#!/usr/bin/env bash

# AKS Confidential Cluster Manager
# Author: Matteus Silva <matteus.sthefano.ls@gmail.com>
# MIT License


set -o nounset
set -o errexit
# inherit traps
set -o errtrace
set -o pipefail

umask 077


BANNER=\
"
 █████╗ ██╗  ██╗███████╗
██╔══██╗██║ ██╔╝██╔════╝ Confidential
███████║█████╔╝ ███████╗ Cluster
██╔══██║██╔═██╗ ╚════██║ Manager
██║  ██║██║  ██╗███████║ v1.0.0
╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝

"

function show_help {
    printf '%s%s\n' "$BANNER" \
"This program helps you to create and delete an aks cluster easily.

The following options are supported:
    -h, --help                     display this help and exit.
    -g, --resource-group           resource group to be used (default=).
    -c, --cluster-name             cluster name (default=).
    -l, --location                 cluster location (default=westus2).
    -C, --only-confidential-nodes  create a cluster with confidential nodes only.
    -n, --nodes                    number of nodes in the confidential node pool (default=1).
    -N, --regular-nodes            number of nodes in the regular node pool (default=1).
    -f, --node-flavor              node VM flavor (node-vm-size).
                                   https://docs.microsoft.com/en-us/azure/virtual-machines/dcv2-series
Flags:
    -d, --delete                   change mode to delete cluster.
    -a, --all                      also create/delete resource group.
    -v, --verbose                  set -x and use az-cli verbose mode.
"
    exit 0
}


function parse_args {
    OPTIONS="hg:c:n:N:davCl:f:"
    LONGOPTS_STANDARD="help"
    LONGOPTS_OPTIONAL="$(printf '%s' "resource-group:,cluster-name:,nodes:,regular-nodes:,delete,all,verbose,location:,node-flavor:,only-confidential-nodes,")"
    LONGOPTS="$(printf '%s' "$LONGOPTS_STANDARD"",""$LONGOPTS_OPTIONAL")"
    ! PARSED="$(getopt --shell=bash --options="$OPTIONS" --longoptions="$LONGOPTS" --name "$0" -- "$@")"
    [[ "${PIPESTATUS[0]}" -ne 0 ]] && exit 2
    eval set -- "$PARSED"
    while (( "$#" )); do
        arg="$1"
        case "$arg" in
            -h|--help)
                show_help
                shift
                ;;

            -v|--verbose)
                set -x
                shift
                ;;

            -g|--resource-group)
                export RESOURCE_GROUP="$2"
                shift 2
                ;;

            -c|--cluster-name)
                export CLUSTER_NAME="$2"
                shift 2
                ;;

            -l|--location)
                export LOCATION="$2"
                shift 2
                ;;

            -n|--nodes)
                export NUMBER_OF_NODES="$2"
                shift 2
                ;;

            -N|--regular-nodes)
                export NUMBER_OF_REG_NODES="$2"
                shift 2
                ;;

            -f|--node-flavor)
                export NODE_FLAVOR="$2"
                shift 2
                ;;

            -d|--delete)
                export CREATE_MODE=0
                shift
                ;;

            -a|--all)
                export INCLUDE_RESOURCE_GROUP=1
                shift
                ;;

            -C|--only-confidential-nodes)
                export ONLY_CONF_NODES=1
                shift
                ;;

            --)
                shift
                break
                ;;

            *) # preserve positional arguments
                echo "unsupported command ""$1"
                exit 1
                ;;
        esac
    done
}

function show_info {
    echo -n "Executing with the following configuration in "
    [ $CREATE_MODE -eq 1 ] && echo "CREATE mode." || echo "DELETE mode."
    echo "cluster name:            "$CLUSTER_NAME
    echo "resource group:          "$RESOURCE_GROUP
    [ $CREATE_MODE -eq 1 ] && echo "location:                "$LOCATION
    [ $CREATE_MODE -eq 1 ] && echo "node flavor:             "$NODE_FLAVOR
    [ $CREATE_MODE -eq 1 ] && echo "# of confidential nodes: "$NUMBER_OF_NODES
    [ $ONLY_CONF_NODES -eq 1 ] && echo "only confidential nodes will be created."
    if [ $INCLUDE_RESOURCE_GROUP -eq 1 ]; then
        if [ $CREATE_MODE -eq 1 ]; then
            echo "!!! WILL try to create the resource group !!!"
        else
            echo "!!! WARNING: will also delete the resource group !!!"
        fi
    fi
}

function create {
    # Create resource group
    if [ $INCLUDE_RESOURCE_GROUP -eq 1 ]; then
        echo "    -> Creating resource group..."
        az group create --name $RESOURCE_GROUP --location $LOCATION
        [ $? -ne 0 ] && exit 1
    fi

    # Create cluster
    echo "    -> Creating aks cluster..."
    if [ $ONLY_CONF_NODES -eq 1 ]; then
        # create pure confidential cluster
        az aks create --name $CLUSTER_NAME --generate-ssh-keys --enable-addon confcom -c $NUMBER_OF_NODES --node-vm-size $NODE_FLAVOR -g $RESOURCE_GROUP
        [ $? -ne 0 ] && exit 1
    else
        # create initial non-confidential pool
        az aks create --name $CLUSTER_NAME --generate-ssh-keys --enable-addon confcom -c 1 -g $RESOURCE_GROUP -c $NUMBER_OF_REG_NODES
        [ $? -ne 0 ] && exit 1

        # Create node pool
        echo "    -> Creating node pool..."
        az aks nodepool add --cluster-name $CLUSTER_NAME --name $NODE_POOL_NAME --node-vm-size $NODE_FLAVOR -c $NUMBER_OF_NODES --resource-group $RESOURCE_GROUP
        [ $? -ne 0 ] && exit 1
    fi
    # Show get credencials command
    echo "Created. Use the following command to get the credentials."
    echo "az aks get-credentials --name "$CLUSTER_NAME" --resource-group "$RESOURCE_GROUP""
}

function delete {
    if [ $INCLUDE_RESOURCE_GROUP -eq 1 ]; then
        echo "    ->Deleting resource group..."
        az group delete --name $RESOURCE_GROUP
    else
        if [ $ONLY_CONF_NODES -ne 1 ]; then
            echo "    -> Deleting node pool..."
            az aks nodepool delete --cluster-name $CLUSTER_NAME --name $NODE_POOL_NAME --resource-group $RESOURCE_GROUP
            [ $? -ne 0 ] && exit 1
        fi
        echo "    -> Deleting aks cluster..."
        az aks delete --name $CLUSTER_NAME --resource-group $RESOURCE_GROUP
        [ $? -ne 0 ] && exit 1
    fi
}

# Set defaults
RESOURCE_GROUP="aks-resource-group"
CLUSTER_NAME="aks-cluster"
LOCATION="westus2"
declare -i NUMBER_OF_NODES=1
declare -i NUMBER_OF_REG_NODES=1
NODE_FLAVOR="Standard_DC2s_v2"
declare -i CREATE_MODE=1 # default is create mode
NODE_POOL_NAME=confnodepool
declare -i INCLUDE_RESOURCE_GROUP=0 # default is not
declare -i ONLY_CONF_NODES=0

######################################################
#                        MAIN                        #
######################################################

parse_args "$@"

printf '%s' "$BANNER"

show_info

if [ $CREATE_MODE -eq 1 ]; then
    create
else
    delete
fi
