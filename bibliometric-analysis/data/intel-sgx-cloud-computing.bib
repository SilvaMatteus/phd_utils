
@inproceedings{wang_segive_2020,
	title = {{SEGIVE}: {A} {Practical} {Framework} of {Secure} {GPU} {Execution} in {Virtualization} {Environment}},
	doi = {10.1109/IPCCC50635.2020.9391574},
	abstract = {With the advancement of processor technology, general-purpose GPUs have become popular parallel computing accelerators in the cloud. However, designed for graphics rendering and high-performance computing, GPUs are born without sound security mechanisms. Consequently, the GPU-based service in the cloud is vulnerable to attacks from the potentially compromised guest OS as large amounts of sensitive code and data are offloaded directly to the unprotected GPUs.In this paper, we propose SEGIVE, a practical framework of secure GPU execution in the virtualization environment, which protects offloaded device code and data from disclosure or tampering by malicious guest OSes through the full life cycle of security-critical GPU applications. First, SEGIVE secures all the traffic transferred to GPUs with Intel SGX technology, including the users' sensitive data and GPU binaries. Second, with various memory isolation mechanisms, SEGIVE enhances security in multi-user execution scenarios by sharing a GPU among multiple workloads, which avoids underutilization of device resources. Besides, SEGIVE requires no modifications to application source codes, the GPU architecture, or I/O interconnection to fulfill security principles, and thus almost all prevailing GPU-based applications can easily benefit from SEGIVE with little porting effort. We have implemented SEGIVE with KVM-QEMU on off-the-shelf NVIDIA GPUs and CPUs. Evaluation results show that with security-enhances, the performance of SEGIVE prototype is still competitive to the native execution on compute-intensive applications, especially for the public-key cryptography algorithm.},
	booktitle = {2020 {IEEE} 39th {International} {Performance} {Computing} and {Communications} {Conference} ({IPCCC})},
	author = {Wang, Ziyang and Zheng, Fangyu and Lin, Jingqiang and Fan, Guang and Dong, Jiankuo},
	month = nov,
	year = {2020},
	note = {ISSN: 2374-9628},
	pages = {1--10},
}

@inproceedings{hartono_brofy_2021,
	title = {{BROFY}: {Towards} {Essential} {Integrity} {Protection} for {Microservices}},
	doi = {10.1109/SRDS53918.2021.00024},
	abstract = {Trusted computing has emerged as one of the main components in a critical microservice application. A powerful adversary such as the cloud provider could harm its integrity by altering the application\&\#x0027;s code, behavior, and memory. Numerous attempts to preserve application integrity have been made, especially using Trusted Execution Environments (TEE). However, recent studies show that a CPU bitflip, which both adversary or faulty hardware can trigger, may invalidate its integrity despite being executed inside TEE. In the form of Silent Data Corruption (SDC), this bitflip may come undetected and shamble the trust built in a distributed system. We present BROFY, a toolchain that makes the program reliably perform correct computation inside the Intel SGX enclave that already provides code and memory integrity protection out-of-the-box. BROFY is compatible with multiple programming languages, needs no specific requirements or changes on the codebase, and offers a configurable trade-off between recovery ability and performance. We tested BROFY against actual bitflips by undervolting CPU, and our results show a significant decrease in irrecoverable failure rate from 96.7\&\#x0025; to 0.5\&\#x0025;, with a 100\&\#x0025; detection rate inside an SGX enclave. Our experiment shows that programs armored by BROFY, compared to native execution, have 84\&\#x0025; overhead on average based on the computation-intensive Starbench benchmark and only 3\&\#x0025; overhead on a multithreaded HTTP server application written in C.},
	booktitle = {2021 40th {International} {Symposium} on {Reliable} {Distributed} {Systems} ({SRDS})},
	author = {Hartono, Ardhi Putra Pratama and Fetzer, Christof},
	month = sep,
	year = {2021},
	note = {ISSN: 2575-8462},
	pages = {154--163},
}

@inproceedings{zhang_survey_2020,
	title = {Survey of {Attacks} and {Defenses} against {SGX}},
	doi = {10.1109/ITOEC49072.2020.9141835},
	abstract = {The great abundance of information brings us convenient life. At the same time, how to prevent malicious attackers from stealing user data or privacy is a hot and difficult issue in the current research of information security. In 2013, Intel proposed a new processor security technology SGX(Software Guard Extensions) at the HASP conference, which can provide a trusted zone named enclave on the computing platform to protect the confidentiality and integrity of user code and data. SGX is a breakthrough research achievement in the field of information security, which is of great significance to individual users and tenants of cloud computing platforms. In order to better study the attacks and defense technologies against SGX, the threat model against SGX attacks is introduced, the types of attacks against SGX are summarized, the defense measures against SGX attacks are analyzed, and the possible future attacks against SGX and the Defense technology was explored.},
	booktitle = {2020 {IEEE} 5th {Information} {Technology} and {Mechatronics} {Engineering} {Conference} ({ITOEC})},
	author = {Zhang, Yahui and Zhao, Min and Li, Tingquan and Han, Huan},
	month = jun,
	year = {2020},
	pages = {1492--1496},
}

@inproceedings{naseri_securing_2021,
	title = {On {Securing} {Cloud}-{Hosted} {Cyber}-{Physical} {Systems} {Using} {Trusted} {Execution} {Environments}},
	doi = {10.1109/ICAS49788.2021.9551155},
	abstract = {Recently, cloud control systems have gained increasing attention from the research community as a solution to implement networked cyber-physical systems (CPSs). Such an architecture can reduce deployment and maintenance costs albeit at the expense of additional security and privacy concerns. In this paper, first, we discuss state-of-the-art security solutions for cloud control systems and their limitations. Then, we propose a novel control architecture based on Trusted Execution Environments (TEE). We show that such an approach can potentially address major security and privacy issues for cloud-hosted control systems. Finally, we present an implementation setup based on Intel Software Guard Extensions (SGX), and validate its effectiveness on a testbed system.},
	booktitle = {2021 {IEEE} {International} {Conference} on {Autonomous} {Systems} ({ICAS})},
	author = {Naseri, Amir Mohammad and Lucia, Walter and Mannan, Mohammad and Youssef, Amr},
	month = aug,
	year = {2021},
	pages = {1--5},
}

@inproceedings{gabel_secure_2017,
	title = {Secure {Database} {Outsourcing} to the {Cloud}: {Side}-{Channels}, {Counter}-{Measures} and {Trusted} {Execution}},
	doi = {10.1109/CBMS.2017.141},
	abstract = {Outsourcing data processing and storage to the cloud is a persistent trend in the last years. Cloud computing offers many advantages like flexibility in resource allocation, cost reduction and high availability. However, when sensitive information is handed to a third party, security questions are raised since the cloud provider and his employees are not fully trusted. Standard security mechanisms like transport encryption and regular audits alone cannot solve the issue of insider attacks. Additional cryptographic techniques are required. In this paper, we build upon an existing proxy for secure database outsourcing. We address potential side-channels and weaknesses, which are later analyzed and mitigated. Furthermore, we take a look at trusted execution environments (TEEs) like Intel Software Guard Extensions (SGX) and show how they can be applied to allow for secure execution in the secure database outsourcing case.},
	booktitle = {2017 {IEEE} 30th {International} {Symposium} on {Computer}-{Based} {Medical} {Systems} ({CBMS})},
	author = {Gabel, Matthias and Mechler, Jeremias},
	month = jun,
	year = {2017},
	note = {ISSN: 2372-9198},
	pages = {799--804},
}

@article{han_scalable_2023,
	title = {Scalable and {Secure} {Virtualization} of {HSM} {With} {ScaleTrust}},
	volume = {31},
	issn = {1558-2566},
	doi = {10.1109/TNET.2022.3220427},
	abstract = {Hardware security modules (HSMs) have been utilized as a trustworthy foundation for cloud services. Unfortunately, existing systems using HSMs fail to meet multi-tenant scalability arising from the emerging trends such as microservices, which utilize frequent cryptographic operations. As an alternative, cloud vendors provide HSMs as a service. However, such cloud-managed HSM usage models raise security concerns due to their untrusted and shared operating environment. We propose ScaleTrust, a scalable and secure system for key management. ScaleTrust allows us to scale the number of virtual HSM partitions, each of which is isolated with respect to each other and is robust against cloud insider attacks, while preserving physical isolation of the root of trust. To enable this, ScaleTrust uses Intel SGX and multiple HSM features, such as restricting key usage by controlling key attributes of in-HSM keys and establishing a secure channel using only HSM commands. Finally, we apply ScaleTrust to four real-world systems: Keyless SSL for TLS private key offloading, JSON Web Token authentication for microservices, key provisioning, and encryption in database systems. Our evaluation shows that ScaleTrust achieves multi-tenancy in a scalable way by providing multiple virtual HSMs with legacy HSM devices that are designed to support a single tenant. ScaleTrust provides security against insider threats while incurring 11.9\% and 39.0\% of end-to-end throughput and latency overhead for Keyless SSL compared to stand-alone HSMs.},
	number = {4},
	journal = {IEEE/ACM Transactions on Networking},
	author = {Han, Juhyeng and Yun, Insu and Kim, Seongmin and Kim, Taesoo and Son, Sooel and Han, Dongsu},
	month = aug,
	year = {2023},
	pages = {1595--1610},
}

@article{valadares_systematic_2021,
	title = {Systematic {Literature} {Review} on the {Use} of {Trusted} {Execution} {Environments} to {Protect} {Cloud}/{Fog}-{Based} {Internet} of {Things} {Applications}},
	volume = {9},
	issn = {2169-3536},
	doi = {10.1109/ACCESS.2021.3085524},
	abstract = {Trusted Execution Environments have been applied to improve data security in many distinct application scenarios since they enable data processing in a separate and protected region of memory. To investigate how this technology has been applied to the different IoT scenarios, which commonly deal with specific characteristics such as device resource constraints, we carried out a systematic literature review. For this, we selected and analyzed 58 papers from different conferences and journals, identifying the main IoT solutions and scenarios in which TEE has been employed. We also gathered the mentioned TEE advantages and disadvantages as well as the suggestions for future works. This study gives a general overview of the use of TEEs for cloud/fog-based IoT applications, bringing some challenges and directions.},
	journal = {IEEE Access},
	author = {Valadares, Dalton Cézane Gomes and Will, Newton Carlos and Caminha, Jean and Perkusich, Mirko Barbosa and Perkusich, Angelo and Gorgônio, Kyller Costa},
	year = {2021},
	pages = {80953--80969},
}

@inproceedings{cui_speed_2019,
	title = {{SPEED}: {Accelerating} {Enclave} {Applications} {Via} {Secure} {Deduplication}},
	doi = {10.1109/ICDCS.2019.00110},
	abstract = {The emerging hardware-assisted security technologies facilitate the deployment of secure and trustworthy applications in today's cloud computing infrastructure. Despite promising, the advantages appear to diminish due to limited resources of trusted execution environments and ever-increasing workload to be processed inside. Different from existing task-specific and system-level optimizations, our key observation is that those redundant computations occur commonly among several applications when handling the same input data. In light of this, we propose SPEED, a secure and generic computation deduplication system in the context of Intel SGX. It allows SGX-enabled applications to identify redundant computations and reuse computation results, while protecting the confidentiality and integrity of code, inputs, and results. To maximize the benefit of computation deduplication, we design a cross-application deduplication scheme, empowering multiple applications to securely utilize the shared results as long as they perform identical computations. To ease the use of SPEED, we implement a fully functional prototype and provide a concise and expressive API for developers to deduplicate rich computations with minimal effort, as few as 2 lines of code per function call. Extensive evaluations of four popular applications demonstrate that SPEED improves performance by up to 400 times. The source code is available on GitHub for public use.},
	booktitle = {2019 {IEEE} 39th {International} {Conference} on {Distributed} {Computing} {Systems} ({ICDCS})},
	author = {Cui, Helei and Duan, Huayi and Qin, Zhan and Wang, Cong and Zhou, Yajin},
	month = jul,
	year = {2019},
	note = {ISSN: 2575-8411},
	pages = {1072--1082},
}

@inproceedings{pires_lightweight_2017,
	title = {A {Lightweight} {MapReduce} {Framework} for {Secure} {Processing} with {SGX}},
	doi = {10.1109/CCGRID.2017.129},
	abstract = {MapReduce is a programming model used extensively for parallel data processing in distributed environments. A wide range of algorithms were implemented using MapReduce, from simple tasks like sorting and searching up to complex clustering and machine learning operations. Many of these implementations are part of services externalized to cloud infrastructures. Over the past years, however, many concerns have been raised regarding the security guarantees offered in such environments. Some solutions relying on cryptography were proposed for countering threats but these typically imply a high computational overhead. Intel, the largest manufacturer of commodity CPUs, recently introduced SGX (software guard extensions), a set of hardware instructions that support execution of code in an isolated secure environment. In this paper, we explore the use of Intel SGX for providing privacy guarantees for MapReduce operations, and based on our evaluation we conclude that it represents a viable alternative to a cryptographic mechanism. We present results based on the widely used k-means clustering algorithm, but our implementation can be generalized to other applications that can be expressed using MapReduce model.},
	booktitle = {2017 17th {IEEE}/{ACM} {International} {Symposium} on {Cluster}, {Cloud} and {Grid} {Computing} ({CCGRID})},
	author = {Pires, Rafael and Gavril, Daniel and Felber, Pascal and Onica, Emanuel and Pasin, Marcelo},
	month = may,
	year = {2017},
	pages = {1100--1107},
}

@inproceedings{muhammad_trusted_2020,
	title = {Trusted {Network} {Slicing} {Among} {Multiple} {Mobile} {Network} {Operators}},
	doi = {10.1109/TrustCom50675.2020.00150},
	abstract = {5G mobile networks are expected to be much bigger in size, faster in speeds and better in scalability, providing varied services to different users and businesses in contrast to previous networks. 5G will also help enabling new business models and use cases. “Network Slicing” is a driving architectural concept for multi-tenancy. Network Slicing enables Mobile Network Operators (MNOs) to deploy different services over shared physical infrastructure, increasing inter-operator resource sharing. As 5G is still in its nascent, inter operator cooperation is an area that requires immediate attention of research. Traditional inter operator trust relationship models cannot fully comprehend the needs of 5G networks. In this paper, we propose an Intel SGX based multi-MNO cooperation scheme for trusted, dynamic and efficient network slice sharing in order to support inter-operator trustworthy collaboration. Furthermore, we developed a Proof of Concept of our proposed scheme using Intel SGX, flask framework and Docker containers. The obtained results indicate the applicability of the proposed scheme with little effect on performance.},
	booktitle = {2020 {IEEE} 19th {International} {Conference} on {Trust}, {Security} and {Privacy} in {Computing} and {Communications} ({TrustCom})},
	author = {Muhammad, Jehanzaib Yousuf and Wang, Mingjun and Yan, Zheng and Khan, Fawad},
	month = dec,
	year = {2020},
	note = {ISSN: 2324-9013},
	pages = {1135--1140},
}

@inproceedings{djoko_nexus_2019,
	title = {{NeXUS}: {Practical} and {Secure} {Access} {Control} on {Untrusted} {Storage} {Platforms} using {Client}-{Side} {SGX}},
	doi = {10.1109/DSN.2019.00049},
	abstract = {With the rising popularity of file-sharing services such as Google Drive and Dropbox in the workflows of individuals and corporations alike, the protection of client-outsourced data from unauthorized access or tampering remains a major security concern. Existing cryptographic solutions to this problem typically require server-side support, involve non-trivial key management on the part of users, and suffer from severe re-encryption penalties upon access revocations. This combination of performance overheads and management burdens makes this class of solutions undesirable in situations where performant, platform-agnostic, dynamic sharing of user content is required. We present NEXUS, a stackable filesystem that leverages trusted hardware to provide confidentiality and integrity for user files stored on untrusted platforms. NEXUS is explicitly designed to balance security, portability, and performance: it supports dynamic sharing of protected volumes on any platform exposing a file access API without requiring server-side support, enables the use of fine-grained access control policies to allow for selective sharing, and avoids the key revocation and file re-encryption overheads associated with other cryptographic approaches to access control. This combination of features is made possible by the use of a client-side Intel SGX enclave that is used to protect and share NEXUS volumes, ensuring that cryptographic keys never leave enclave memory and obviating the need to reencrypt files upon revocation of access rights. We implemented a NEXUS prototype that runs on top of the AFS filesystem and show that it incurs ×2 overhead for a variety of common file and database operations.},
	booktitle = {2019 49th {Annual} {IEEE}/{IFIP} {International} {Conference} on {Dependable} {Systems} and {Networks} ({DSN})},
	author = {Djoko, Judicael B. and Lange, Jack and Lee, Adam J.},
	month = jun,
	year = {2019},
	note = {ISSN: 1530-0889},
	pages = {401--413},
}

@inproceedings{ataide_implementing_2018,
	title = {Implementing {Quality} of {Service} and {Confidentiality} for {Batch} {Processing} {Applications}},
	doi = {10.1109/UCC-Companion.2018.00065},
	abstract = {With a massive volume of information generated from many kinds of sources and for many different purposes comes the need for processing systems that help digest these data. One approach for efficient processing of data is to batch process larger sets of data. For example, periodically, recent data can be analyzed and filtered, having as a result actions, updated models, or cleaned versions of the data uploaded to databases. Increasingly often, such applications have strong requirements regarding data security, quality of service, and scalability. While scalability is typically addressed by leveraging the abundant resources and fair pricing of cloud computing techniques, using a shared environment triggers resistance from developers regarding data security and quality of service. In this work, we present a system that combines a novel technology for data protection, Intel SGX, with a popular, open source tool for managing interactive and data processing applications, Kubernetes, to provide a batch processing system that is easy to use while still providing quality of service and strong confidentiality guarantees. Our evaluation shows that independent tasks that consume data from scalable storages can be implemented in a controllable, secure fashion, without added complexity or considerable performance or resource overheads.},
	booktitle = {2018 {IEEE}/{ACM} {International} {Conference} on {Utility} and {Cloud} {Computing} {Companion} ({UCC} {Companion})},
	author = {Ataide, Igor and Vinha, Gabriel and Souza, Clenimar and Brito, Andrey},
	month = dec,
	year = {2018},
	pages = {258--265},
}

@inproceedings{dagostino_seeds_2021,
	title = {Seeds of {SEED}: {Characterizing} {Enclave}-level {Parallelism} in {Secure} {Multicore} {Processors}},
	doi = {10.1109/SEED51797.2021.00031},
	abstract = {Secure processor technologies incorporating some form of enclave-based isolation are being deployed in remote cloud computing environments. However, commercial enclave-based systems, such as Intel SGX, incur performance penalties due to architectural limitations arising from enclave interactions with the operating system (OS), encryption and attestation checks for data accesses to main memory, and limitations on the enclave memory size. Enclave software development frameworks like Graphene-SGX aim to improve these limitations with performance enhancements such as exitless calling that offset the latency of expensive enclave interactions with the OS. However, to the best of our knowledge, prior works have not presented a thorough characterization of enclave performance in the presence of increased enclave-level parallelism. In this paper, we characterize how enclave overheads trade off exploitable parallelism on an Intel SGX-enabled multicore CPU for a set of parallelized workloads. We develop a microbenchmark to study the effects of threading as a function of application characteristics, such as the intensity of memory operations and system calls to the OS. We extend our characterization to realistic parallelized enclave workloads from the database and web server domains. We find that application performance scaling with threading is tightly correlated to system call and memory-bound activities in applications. The real world applications stress these constraints, while the underlying system calling implementations deliver competing performance at different thread counts.},
	booktitle = {2021 {International} {Symposium} on {Secure} and {Private} {Execution} {Environment} {Design} ({SEED})},
	author = {D’Agostino, Brandon and Khan, Omer},
	month = sep,
	year = {2021},
	pages = {203--209},
}

@article{ning_dual_2022,
	title = {Dual {Access} {Control} for {Cloud}-{Based} {Data} {Storage} and {Sharing}},
	volume = {19},
	issn = {1941-0018},
	doi = {10.1109/TDSC.2020.3011525},
	abstract = {Cloud-based data storage service has drawn increasing interests from both academic and industry in the recent years due to its efficient and low cost management. Since it provides services in an open network, it is urgent for service providers to make use of secure data storage and sharing mechanism to ensure data confidentiality and service user privacy. To protect sensitive data from being compromised, the most widely used method is encryption. However, simply encrypting data (e.g., via AES) cannot fully address the practical need of data management. Besides, an effective access control over download request also needs to be considered so that Economic Denial of Sustainability (EDoS) attacks cannot be launched to hinder users from enjoying service. In this article, we consider the dual access control, in the context of cloud-based storage, in the sense that we design a control mechanism over both data access and download request without loss of security and efficiency. Two dual access control systems are designed in this article, where each of them is for a distinct designed setting. The security and experimental analysis for the systems are also presented.},
	number = {2},
	journal = {IEEE Transactions on Dependable and Secure Computing},
	author = {Ning, Jianting and Huang, Xinyi and Susilo, Willy and Liang, Kaitai and Liu, Ximeng and Zhang, Yinghui},
	month = mar,
	year = {2022},
	pages = {1036--1048},
}

@inproceedings{ren_limited_2021,
	title = {Limited {Times} of {Data} {Access} {Based} on {SGX} in {Cloud} {Storage}},
	doi = {10.1109/SMC52423.2021.9658833},
	abstract = {It is straightforward to encrypt the outsourced data to protect its confidentiality using symmetric cryptography in cloud storage. How to control and restrict the use of the encryption key in data users’ devices becomes one of the critical issues. In most of existing time-based and policy-based schemes, the key cannot be stored locally in data users’ devices, making the traffic cost linear with the data access times as the key should be retrieved in each data access. In this paper, we propose a times-based scheme with Intel SGX to restrict the times the key can be used in the data user’s device to restrict the times of data access. The basic idea is to compare the current used times with the specified maximal times to determine whether the key can be used or not. To this end, we use a monotonic counter to count the times the key has been used. When the use condition is not satisfied, we destroy the key securely and generate public proof so that (i) the encrypted data cannot be accessed anymore, i.e., the data is deleted assuredly, (ii) the deletion can be verified. In addition, a hash-based integrity check approach is utilized to detect and prevent replay attacks. The experimental results on the implemented prototype show our scheme is feasible in practice.},
	booktitle = {2021 {IEEE} {International} {Conference} on {Systems}, {Man}, and {Cybernetics} ({SMC})},
	author = {Ren, Zhengwei and Chen, Xiaoshuang and Tang, Jinshan and Wang, Lina and Tong, Yan and Xu, Shiwei},
	month = oct,
	year = {2021},
	note = {ISSN: 2577-1655},
	pages = {3146--3151},
}

@inproceedings{wang_magikcube_2021,
	title = {{MagikCube}: {Securing} {Cross}-{Domain} {Publish}/{Subscribe} {Systems} with {Enclave}},
	doi = {10.1109/TrustCom53373.2021.00037},
	abstract = {The publish/subscribe(pub/sub) is an asynchronous messaging service or content distribution framework. For the idempotency it provides, pub/sub diagram is an efficient solution for large-scale content distributing systems, thus it is widely used in stock exchange systems or e-Health content sharing systems. Some wide-area applications require cross-domain pub/sub service, making it a natural choice to deploy on the public cloud. However, it would bring about security and privacy issues. Recent research proposes security enhancements to prevent thefts, such as searchable data encryption and attribute-based encryption, which allow the matching process to perform encrypted matching without learning the content of the publications and subscriptions. Besides the considerable performance loss, they could not resist the collusion attacks. If the malicious brokers collude with a malicious publisher or subscriber in a cross-domain environment, they can still infer the subscriptions of benign subscribers. We propose the MagikCube framework that provides confidentiality and integrity of the contents and also protects the privacy of the publishers and subscribers in cross-domain scenarios. Moreover, MagikCube can also resist the collusion attacks from malicious brokers in a cross-domain environment. It achieves these security goals by dynamically selecting and placing the sensitive data and some necessary components in enclaves protected by trusted hardware such as Intel SGX. Our experiment result shows that, compared with the baseline model, MagikCube does not introduce much overhead loss when providing better security for all the participants in the pub/sub system.},
	booktitle = {2021 {IEEE} 20th {International} {Conference} on {Trust}, {Security} and {Privacy} in {Computing} and {Communications} ({TrustCom})},
	author = {Wang, Shuran and Pan, Dahan and Feng, Runhan and Zhang, Yuanyuan},
	month = oct,
	year = {2021},
	note = {ISSN: 2324-9013},
	pages = {147--154},
}

@inproceedings{coppolino_protection_2021,
	title = {The protection of {LP}-{WAN} {Endpoints} via {TEE}: a {Chemical} {Storage} {Case} {Study}},
	doi = {10.1109/ISSREW53611.2021.00100},
	abstract = {Industrial IoT (IIoT) solutions typically rely on Low-Power Wide Area Network (LP-WAN) protocols to transmit data over long distances while preserving battery life. Regrettably, the distributed nature of LP-WAN deployments and the adoption of managed services make the endpoints —from the field up to the cloud— target of attacks, which could threaten the security and resilience of the infrastructure under monitoring. In this paper, we propose a solution for improving the security of LoRa-based monitoring infrastructures, which is by far the most widely used LP-WAN protocol in the IIoT landscape. We combine two different trusted execution technologies, i.e., ARM TrustZone and Intel SGX, to preserve the chain-of-trust throughout the entire data cycle, i.e. from collection to transmission and processing, and finally to storage. An experimental evaluation is conducted on a real chemical storage infrastructure, managed by Attilio Carmagnani “AC” S.p.A.. We demonstrate the practicability of the proposed approach, i.e. we prove that our solution improves security while also satisfying the performance and energy consumption requirements of a real setup. The technique can be extended to other LP-WAN deployments with minor engineering efforts.},
	booktitle = {2021 {IEEE} {International} {Symposium} on {Software} {Reliability} {Engineering} {Workshops} ({ISSREW})},
	author = {Coppolino, Luigi and D'Antonio, Salvatore and Mazzeo, Giovanni and Romano, Luigi and Bonetti, Irene and Spagnuolo, Elena},
	month = oct,
	year = {2021},
	pages = {345--352},
}

@inproceedings{sartakov_stanlite_2018,
	title = {{STANlite} – {A} {Database} {Engine} for {Secure} {Data} {Processing} at {Rack}-{Scale} {Level}},
	doi = {10.1109/IC2E.2018.00024},
	abstract = {Intel's novel Software Guard eXtensions (SGX) enable secure and trusted execution of services, thereby paving the way to outsource sensitive data processing to external data centers. While SGX promises trusted execution close to native speed, frequent I/O operations and memory usage beyond a hardware-dependent threshold of currently 92 MiB result in substantial performance degradation. For memory-intensive workloads such as key-value stores and databases these penalties can be prohibitively high. We present STANlite - an in-memory database engine for SGX-enabled secure data processing in rack-scale environments. STANlite performs efficient user-level paging, whenever a database workload requires more space than the performance-friendly in-memory state size. Furthermore, STANlite smartly combines the properties of Remote Direct Memory Access (RDMA) and SGX to reduce the overhead of network-based I/O operations. While SGX usually provides confidentiality and integrity at the same time, STANlite enables a purely integrity preserving data management mode for additional performance. Finally, STANlite features a small trusted computing base and is memory-efficient, as it extends SQLite, a database for embedded use. We evaluated STANlite in terms of query response time. It outperforms a vanilla SGX-based SQLite version by 1.79x for microbenchmarks and 2.44x for TPC-C.},
	booktitle = {2018 {IEEE} {International} {Conference} on {Cloud} {Engineering} ({IC2E})},
	author = {Sartakov, Vasily and Weichbrodt, Nico and Krieter, Sebastian and Leich, Thomas and Kapitza, Rudiger},
	month = apr,
	year = {2018},
	pages = {23--33},
}

@inproceedings{ahmed_harpocrates_2018,
	title = {Harpocrates: {Giving} {Out} {Your} {Secrets} and {Keeping} {Them} {Too}},
	doi = {10.1109/SEC.2018.00015},
	abstract = {Content Distribution Networks (CDNs) offer websites and web services the ability to host content on servers that are near the edge of the network, close to users. Benefits of this arrangement include low latency, scalability, and resistance to Denial of Service attacks. Traditionally, CDNs have hosted primarily static content, but increasingly, there is an interest in pushing active computation to the edge as well. This active computation, which is similar in style to the "server-less" computing becoming popular in clouds, offers a wealth of new opportunities for web services to be-come faster and more scalable. With this opportunity, however, comes a much greater exposure to security threats. One is leakage of secret materials (such as keys, identities, etc.) that are accessed by these functions. Another is the possibility that sensitive calculations are not executed faithfully in the CDN; e.g. a modified version of the customer's code is run. In this paper, we present the design of Harpocrates, a framework that allows active code to be pushed from an origin webserver out to workers at the edge of a CDN. Harpocrates makes use of Intel's SGX technology to keep data private, and presents an environment similar to the JavaScript WebWorker API to simplify the process of code that can run on either origin servers or the CDN. We use Harpocrates to design a number of interesting services, including a service that generates and checks secure cookies within the CDN, and a framework that protects against denial-of-service attacks in a way that is customized to a specific website. We show that the framework performs well enough to be deployable in practice.},
	booktitle = {2018 {IEEE}/{ACM} {Symposium} on {Edge} {Computing} ({SEC})},
	author = {Ahmed, Rufaida and Zaheer, Zirak and Li, Richard and Ricci, Robert},
	month = oct,
	year = {2018},
	pages = {103--114},
}

@inproceedings{wilke_undeserved_2021,
	title = {{undeSErVed} trust: {Exploiting} {Permutation}-{Agnostic} {Remote} {Attestation}},
	doi = {10.1109/SPW53761.2021.00064},
	abstract = {The ongoing trend of moving data and computation to the cloud is met with concerns regarding privacy and protection of intellectual property. Cloud Service Providers (CSP) must be fully trusted to not tamper with or disclose processed data, hampering adoption of cloud services for many sensitive or critical applications. As a result, CSPs and CPU manufacturers are rushing to find solutions for secure and trustworthy outsourced computation in the Cloud. While enclaves, like Intel SGX, are strongly limited in terms of throughput and size, AMD’s Secure Encrypted Virtualization (SEV) offers hardware support for transparently protecting code and data of entire VMs, thus removing the performance, memory and software adaption barriers of enclaves. Through attestation of boot code integrity and means for securely transferring secrets into an encrypted VM, CSPs are effectively removed from the list of trusted entities. There have been several attacks on the security of SEV, by abusing I/O channels to encrypt and decrypt data, or by moving encrypted code blocks at runtime. Yet, none of these attacks have targeted the attestation protocol, the core of the secure computing environment created by SEV. We show that the current attestation mechanism of Zen 1 and Zen 2 architectures has a significant flaw, allowing us to manipulate the loaded code without affecting the attestation outcome. An attacker may abuse this weakness to inject arbitrary code at startup–and thus take control over the entire VM execution, without any indication to the VM’s owner. Our attack primitives allow the attacker to do extensive modifications to the bootloader and the operating system, like injecting spy code or extracting secret data. We present a full end-to-end attack, from the initial exploit to leaking the key of the encrypted disk image during boot, giving the attacker unthrottled access to all of the VM’s persistent data.},
	booktitle = {2021 {IEEE} {Security} and {Privacy} {Workshops} ({SPW})},
	author = {Wilke, Luca and Wichelmann, Jan and Sieck, Florian and Eisenbarth, Thomas},
	month = may,
	year = {2021},
	pages = {456--466},
}

@inproceedings{brandenburger_rollback_2017,
	title = {Rollback and {Forking} {Detection} for {Trusted} {Execution} {Environments} {Using} {Lightweight} {Collective} {Memory}},
	doi = {10.1109/DSN.2017.45},
	abstract = {Novel hardware-aided trusted execution environments, as provided by Intel's Software Guard Extensions (SGX), enable to execute applications in a secure context that enforces confidentiality and integrity of the application state even when the host system is misbehaving. While this paves the way towards secure and trustworthy cloud computing, essential system support to protect persistent application state against rollback and forking attacks is missing. In this paper we present LCM - a lightweight protocol to establish a collective memory amongst all clients of a remote application to detect integrity and consistency violations. LCM enables the detection of rollback attacks against the remote application, enforces the consistency notion of fork-linearizability and notifies clients about operation stability. The protocol exploits the trusted execution environment, complements it with simple client-side operations, and maintains only small, constant storage at the clients. This simplifies the solution compared to previous approaches, where the clients had to verify all operations initiated by other clients. We have implemented LCM and demonstrated its advantages with a key-value store application. The evaluation shows that it introduces low network and computation overhead, in particular, a LCM-protected key-value store achieves 0.72x - 0.98x of an SGX-secured key-value store throughput.},
	booktitle = {2017 47th {Annual} {IEEE}/{IFIP} {International} {Conference} on {Dependable} {Systems} and {Networks} ({DSN})},
	author = {Brandenburger, Marcus and Cachin, Christian and Lorenz, Matthias and Kapitza, Rüdiger},
	month = jun,
	year = {2017},
	note = {ISSN: 2158-3927},
	pages = {157--168},
}

@inproceedings{islam_big_2020,
	title = {Big {Data} {Driven} {Secure} {IoT} {Analytics} with {Trusted} {Execution} {Environments}},
	doi = {10.1109/AECT47998.2020.9194185},
	abstract = {The growing adoption of IoT devices in our daily life engendered a need for secure systems to safely store or analyze sensitive data, as well as a decentralized data processing system to handle vast amount of streaming data. The cloud services used to store data and process sensitive data are often come out to be vulnerable to outside threats. Moreover, to analyze enormous streaming data swiftly, they are in need of a fast and efficient system. In this paper we propose a framework to maintain confidentiality and integrity of IoT data, which is of paramount importance, and manage large-scale data analytics. We design the framework to preserve data privacy utilizing Trusted Execution Environment (TEE) such as Intel SGX, and end-to-end data encryption mechanism. In addition, we utilize Apache Spark for fast real-time streaming data processing from many IoT devices. We evaluate the framework by performing simple decision making in the SGX securely that involves multiple IoT devices, and a real-time anomaly detection in the streaming data from IoT devices using Spark.},
	booktitle = {2019 {International} {Conference} on {Advances} in the {Emerging} {Computing} {Technologies} ({AECT})},
	author = {Islam, Md Shihabul and Khan, Latifur},
	month = feb,
	year = {2020},
	pages = {1--6},
}

@inproceedings{nguyen_logsafe_2018,
	title = {{LogSafe}: {Secure} and {Scalable} {Data} {Logger} for {IoT} {Devices}},
	doi = {10.1109/IoTDI.2018.00023},
	abstract = {As devices in the Internet of Things (IoT) increase in number and integrate with everyday lives, large amounts of personal information will be generated. With multiple discovered vulnerabilities in current IoT networks, a malicious attacker might be able to get access to and misuse this personal data. Thus, a logger that stores this information securely would make it possible to perform forensic analysis in case of such attacks that target valuable data. In this paper, we propose LogSafe, a scalable, fault-tolerant logger that leverages the use of Intel Software Guard Extensions (SGX) to store logs from IoT devices efficiently and securely. Using the security guarantees of SGX, LogSafe is designed to run on an untrusted cloud infrastructure and satisfies Confidentiality, Integrity, and Availability (CIA) security properties. Finally, we provide an exhaustive evaluation of LogSafe in order to demonstrate that it is capable of handling logs from a large number of IoT devices and at a very high data transmission rate.},
	booktitle = {2018 {IEEE}/{ACM} {Third} {International} {Conference} on {Internet}-of-{Things} {Design} and {Implementation} ({IoTDI})},
	author = {Nguyen, Hung and Ivanov, Radoslav and Phan, Linh T.X. and Sokolsky, Oleg and Weimer, James and Lee, Insup},
	month = apr,
	year = {2018},
	pages = {141--152},
}

@inproceedings{cui_comparison_2023,
	title = {A {Comparison} {Study} of the {Compatibility} {Approaches} for {SGX} {Enclaves}},
	doi = {10.1109/ATS59501.2023.10317965},
	abstract = {Confidential computing technologies, such as that enabled by Intel SGX (Software Guard eXtensions), have been widely deployed in various commercial cloud platforms. Specifically, SGX uses hardware-isolated compartments named enclaves to shield user applications from Operating Systems (OSes) and hypervisors, thus providing confidentiality and integrity guarantees for code and data. However, some crucial problems are not fully analyzed yet, especially for the compatibility with binary applications. This work first delivers an overview of Intel SGX and reviews its five design constraints that may affect compatibility. Subsequently, we revisit three distinct compatibility solutions from the internals and analyze their impact on security, performance, and flexibility. At last, we lay out some fundamental lessons learned from prior SGX studies.},
	booktitle = {2023 {IEEE} 32nd {Asian} {Test} {Symposium} ({ATS})},
	author = {Cui, Jinhua and Yin, Yiyun and Cai, Zhiping and Zhang, Jiliang},
	month = oct,
	year = {2023},
	note = {ISSN: 2377-5386},
	pages = {1--6},
}

@inproceedings{elgamal_serdab_2020,
	title = {Serdab: {An} {IoT} {Framework} for {Partitioning} {Neural} {Networks} {Computation} across {Multiple} {Enclaves}},
	doi = {10.1109/CCGrid49817.2020.00-41},
	abstract = {Recent advances in Deep Neural Networks (DNN) and Edge Computing have made it possible to automatically analyze streams of videos from home/security cameras over hierarchical clusters that include edge devices, close to the video source, as well as remote cloud compute resources. However, preserving the privacy and confidentiality of users' sensitive data as it passes through different devices remains a concern to most users. Private user data is subject to attacks by malicious attackers or misuse by internal administrators who may use the data in activities that are not explicitly approved by the user. To address this challenge, we present Serdab, a distributed orchestration framework for deploying deep neural network computation across multiple secure enclaves (e.g., Intel SGX). Secure enclaves provide a guarantee on the privacy of the data/code deployed inside it. However, their limited hardware resources make them inefficient when solely running an entire deep neural network. To bridge this gap, Serdab presents a DNN partitioning strategy to distribute the layers of the neural network across multiple enclave devices or across an enclave device and other hardware accelerators. Our partitioning strategy achieves up to 4.7x speedup compared to executing the entire neural network in one enclave.},
	booktitle = {2020 20th {IEEE}/{ACM} {International} {Symposium} on {Cluster}, {Cloud} and {Internet} {Computing} ({CCGRID})},
	author = {Elgamal, Tarek and Nahrstedt, Klara},
	month = may,
	year = {2020},
	pages = {519--528},
}

@inproceedings{peterson_vallum_2019,
	title = {Vallum: {Privacy}, {Confidentiality} and {Access} {Controlfor} {Sensitive} {Data} in {Cloud} {Environments}},
	doi = {10.1109/CloudCom.2019.00026},
	abstract = {Managing sensitive data in shared environments such as public clouds is an enduring challenge. While several approaches exist to protect data at rest such as end-to-end encryption, there exist only a few solutions such as homomorphic encryption that offer secure data processing. Unfortunately, these solutions cannot be used in practice as they incur non-negligible run-time overheads and security risks. Moreover, as the majority of data management systems were designed to operate in private cloud environments, which are under the control of the data owner, they often lack appropriate mechanisms for access control as well as privacy assurance. In this paper we propose Vallum, a data access and protection layer that closes these gaps while enabling users to operate data management systems in shared environments such securely as public clouds. Vallum utilizes Intel SGX and remote attestation to ensure confidentiality and integrity of the data being stored and processed. Furthermore, it provides access protection and privacy assurance through a extensible architecture. Our performance evaluation indicates that the overhead introduced by Vallum makes it viable to be deployed in cloud infrastructures.},
	booktitle = {2019 {IEEE} {International} {Conference} on {Cloud} {Computing} {Technology} and {Science} ({CloudCom})},
	author = {Peterson, Ronny and Carvalho, André and da Silva, Altigran and Fernandez, Gabriel and Martin, André and Fetzer, Christof and Brito, Andrey},
	month = dec,
	year = {2019},
	note = {ISSN: 2330-2186},
	pages = {103--110},
}

@inproceedings{bomai_privacy-preserving_2020,
	title = {Privacy-{Preserving} {GWAS} {Computation} on {Outsourced} {Data} {Encrypted} under {Multiple} {Keys} {Through} {Hybrid} {System}},
	doi = {10.1109/DSAA49011.2020.00078},
	abstract = {Genome-wide association studies (GWAS) necessitate genomic information of a large population of an individual to achieve reliable results. The human genome can expose sensitive information and is potentially re-identifiable, which raises privacy and security concerns, making individuals deter from contributing their genomic information for such studies. Therefore, there is a need for secure and efficient analysis in which the data owners can securely allocate both the computation and storage on the untrusted cloud. Previous solutions used either a single key setting or far from being practical. Also, efficiency is a big limitation for real life applications. In this paper, we propose a novel hybrid solution that uses the concept of multi-key homomorphic encryption to encrypt ciphertexts using different public keys. To decrypt all the ciphertexts by using a single secret key, we add the re-encryption property of proxy re-encryption to multi-key homomorphic encryption. Also, our framework uses the recently introduced hardware-based architecture (i.e software guard extensions) to securely perform GWAS on genomic data in a privacy-preserving manner and ensure high efficiency by speeding up the computation while preserving the privacy of the data owners. To the best of our knowledge, our scheme is the first multi-key homomorphism combined with intel SGX for analyzing genomic data.},
	booktitle = {2020 {IEEE} 7th {International} {Conference} on {Data} {Science} and {Advanced} {Analytics} ({DSAA})},
	author = {Bomai, Abubakar and Aldeen, Mohammed Shujaa and Zhao, Chuan},
	month = oct,
	year = {2020},
	pages = {683--691},
}

@inproceedings{searle_secure_2022,
	title = {Secure {Implementation} of {Artificial} {Intelligence} {Applications} for {Anti}-{Money} {Laundering} using {Confidential} {Computing}},
	doi = {10.1109/BigData55660.2022.10021108},
	abstract = {Money laundering not only facilitates the perpetration of dangerous and illegal activities it also damages the credibility and integrity of the global financial system and the financial institutions through whom money is laundered. Despite most financial institutions adhering to prevailing laws and regulations designed to prevent the practice of money laundering, it has been difficult to stop illicit activity using conventional methods. Hence, to combat money laundering, financial institutions are increasingly focused on the adoption of new technologies involving the use of artificial intelligence (AI) and machine learning (ML). One barrier to adoption of these new techniques for anti-money laundering (AML), however, is the need to maintain the confidentiality of the massive quantities of data required to train AI models, a financial data is the subject of regulatory controls and a target for cyber threat actors. In response to these challenges, this paper presents a secure and scalable architecture for AI implementation that uses confidential computing technology to provide complete end-to-end protection of sensitive financial data and the intellectual property of AML algorithm developers. Generative adversarial networks (GANs) are demonstrated using cloud infrastructure secured using Intel® Software Guard Extensions (Intel® SGX). The reported solution architecture can be adapted to support federated machine learning (FML), at scale, between mutually distrusting institutions, with independent control of data security at rest, in transit, and in use by individual data owners.},
	booktitle = {2022 {IEEE} {International} {Conference} on {Big} {Data} ({Big} {Data})},
	author = {Searle, Richard and Gururaj, Prabhanjan and Gupta, Anubhav and Kannur, Kiran},
	month = dec,
	year = {2022},
	pages = {3092--3098},
}

@article{park_sgx-based_2020,
	title = {An {SGX}-{Based} {Key} {Management} {Framework} for {Data} {Centric} {Networking}},
	volume = {8},
	issn = {2169-3536},
	doi = {10.1109/ACCESS.2020.2978346},
	abstract = {As the Internet has evolved from host-to-host communications to content distribution, data-centric networking is poised to improve networking efficiency. Especially, as the cloud computing, the Internet of Things (IoT), the fifth-generation (5G) networking become popular, there is a consensus that data is to be distributed over some potentially untrusted middleboxes (e.g., CDN servers, web caches) that mediates between data writers and data readers. While data-centric networking designs such as Edge Caching, Global Data Plane (GDP), Named Data Networking (NDN) have been active explored, there have been few studies on how to distribute and manage keys for data access control in such designs with untrusted servers (i.e., middleboxes). We present a key management framework in which symmetric and asymmetric keys are securely managed. A writer publishes his (encrypted) data along with the decryption key for the data. Likewise, an authorized reader retrieves the decryption key as well as the data of interest. To make the key distribution securely between a writer and a reader via an untrusted server, we introduce a key server running on top of the Intel SGX technology. In this way, we can manage and distribute keys for data access control in an efficient and flexible manner. We evaluate the proposed framework by prototyping, which shows some delays in key publishing and retrieval. However, the delays in real operations will be marginal as the period will become longer.},
	journal = {IEEE Access},
	author = {Park, Minkyung and Kim, Jeongnyeo and Kim, Youngho and Cho, Eunsang and Park, Soobin and Sohn, Sungmin and Kang, Minhyeok and Kwon, Ted Taekyoung},
	year = {2020},
	pages = {45198--45210},
}

@inproceedings{marku_safelib_2021,
	title = {{SafeLib}: a practical library for outsourcing stateful network functions securely},
	doi = {10.1109/NetSoft51509.2021.9492579},
	abstract = {A recent trend is to outsource virtual network functions (VNFs) to a third-party service provider, such as a public cloud. Since the cloud is usually not trusted, redirecting enterprise traffic to such an entity introduces security concerns. In addition to protecting enterprise traffic, it is also desirable to protect VNF code, policies and states. Existing outsourcing solutions fall short in either supporting stateful VNFs, catering for all security requirements, or providing adequate performance.In this paper we present SafeLib, a trusted hardware based outsourcing solution built on Intel SGX. SafeLib provides i) support for stateful VNFs, ii) support for illegal SGX instructions by integrating Graphene-SGX, iii) protection of both packet headers and payload for enterprise user traffic, VNF policies and VNF code, and iv) integration of libVNF for streamlined VNF development. Our performance evaluation shows that SafeLib scales properly for multiple cores, and introduces a reasonable performance overhead. We also outline plans to further improve SafeLib to satisfy even more stringent functional, security and performance requirements.},
	booktitle = {2021 {IEEE} 7th {International} {Conference} on {Network} {Softwarization} ({NetSoft})},
	author = {Marku, Enio and Biczók, Gergely and Boyd, Colin},
	month = jun,
	year = {2021},
	note = {ISSN: 2693-9789},
	pages = {244--252},
}

@inproceedings{martin_adam-cs_2021,
	title = {{ADAM}-{CS}: {Advanced} {Asynchronous} {Monotonic} {Counter} {Service}},
	doi = {10.1109/DSN48987.2021.00053},
	abstract = {Trusted execution environments (TEEs) offer the technological breakthrough to allow several applications to be deployed and executed over untrusted public cloud environments. Although TEEs (e. g., Intel SGX, ARM TrustZone, AMD SEV) provide several mechanisms to ensure confidentiality and integrity of data and code, they do not offer freshness out of the box, a critical aspect yet often overlooked, for instance, to protect against rollback attacks. Monotonic counters are a popular way to detect rollbacks, as their counter values cannot be decremented. However, counter increments are slow (i.e., 10th of milliseconds), making their use impractical for distributed services and applications processing thousands of transactions simultaneously, for which an order of magnitude improvement is needed. ADAM-CS is an asynchronous monotonic counter service to protect such high-traffic applications against rollback attacks. Leveraging a set of distributed monotonic counters and specific algorithms, ADAM-CS minimizes the maximum vulnerability window (MVW), i.e., the amount of transactions an adversary could successfully rollback. Thanks to its asynchronous nature, ADAM-CS supports thousands of increments per second without introducing additional latency in the transactions performed by applications. Our measurements indicate that we can keep the MVW well below 10ms while supporting a throughput of more than 21K requests/s when using eight counters.},
	booktitle = {2021 51st {Annual} {IEEE}/{IFIP} {International} {Conference} on {Dependable} {Systems} and {Networks} ({DSN})},
	author = {Martin, André and Lian, Cong and Gregor, Franz and Krahn, Robert and Schiavoni, Valerio and Felber, Pascal and Fetzer, Christof},
	month = jun,
	year = {2021},
	note = {ISSN: 2158-3927},
	pages = {426--437},
}

@inproceedings{arnautov_pubsub-sgx_2018,
	title = {{PubSub}-{SGX}: {Exploiting} {Trusted} {Execution} {Environments} for {Privacy}-{Preserving} {Publish}/{Subscribe} {Systems}},
	doi = {10.1109/SRDS.2018.00023},
	abstract = {This paper presents PUBSUB-SGX, a content-based publish-subscribe system that exploits trusted execution environments (TEEs), such as Intel SGX, to guarantee confidentiality and integrity of data as well as anonymity and privacy of publishers and subscribers. We describe the technical details of our Python implementation, as well as the required system support introduced to deploy our system in a container-based runtime. Our evaluation results show that our approach is sound, while at the same time highlighting the performance and scalability trade-offs. In particular, by supporting just-in-time compilation inside of TEEs, Python programs inside of TEEs are in general faster than when executed natively using standard CPython.},
	booktitle = {2018 {IEEE} 37th {Symposium} on {Reliable} {Distributed} {Systems} ({SRDS})},
	author = {Arnautov, Sergei and Brito, Andrey and Felber, Pascal and Fetzer, Christof and Gregor, Franz and Krahn, Robert and Ozga, Wojciech and Martin, André and Schiavoni, Valerio and Silva, Fábio and Tenorio, Marcus and Thümmel, Nikolaus},
	month = oct,
	year = {2018},
	note = {ISSN: 2575-8462},
	pages = {123--132},
}

@inproceedings{zhang_cerberus_2020,
	title = {Cerberus: {Privacy}-{Preserving} {Computation} in {Edge} {Computing}},
	doi = {10.1109/INFOCOMWKSHPS50562.2020.9162942},
	abstract = {Edge computing reduces the overhead of data centers and improves the efficiency of data processing. However, traditional cloud data protection mechanisms are no longer applicable to edge devices. Data leakage and other privacy issues may occur when computation is outsourced to edge nodes. The decentralization raises new privacy challenge for data control, storage and computation. In this work, we present Cerberus, a brand-new framework that preserves data privacy in edge computing by combining blockchain, distributed data storage and trusted execution environment (TEE). Blockchain is used to maintain a global computation state, and also acts as a medium of information interaction. Distributed data storage provides a secure and large-capacity storage. TEE-based off-chain computation guarantees confidentiality and efficiency of data processing. We also implement a prototype of Cerberus using Hyperledger Fabric and Intel SGX. Our evaluation on a sample of data sorting application shows that Cerberus achieves significant speed ups over previous cryptographic schemes. Compared with non secure computation, Cerberus can preserve data privacy without incurring much performance loss.},
	booktitle = {{IEEE} {INFOCOM} 2020 - {IEEE} {Conference} on {Computer} {Communications} {Workshops} ({INFOCOM} {WKSHPS})},
	author = {Zhang, Dilu and Fan, Lei},
	month = jul,
	year = {2020},
	pages = {43--49},
}

@inproceedings{islam_secure_2019,
	title = {Secure {Real}-{Time} {Heterogeneous} {IoT} {Data} {Management} {System}},
	doi = {10.1109/TPS-ISA48467.2019.00037},
	abstract = {The growing adoption of IoT devices in our daily life engendered a need for secure systems to safely store and analyze sensitive data as well as the real-time data processing system to be as fast as possible. The cloud services used to store and process sensitive data are often come out to be vulnerable to outside threats. Furthermore, to analyze streaming IoT data swiftly, they are in need of a fast and efficient system. The Paper will envision the aspects of complexity dealing with real time data from various devices in parallel, building solution to ingest data from different IOT devices, forming a secure platform to process data in a short time, and using various techniques of IOT edge computing to provide meaningful intuitive results to users. The paper envisions two modules of building a real time data analytics system. In the first module, we propose to maintain confidentiality and integrity of IoT data, which is of paramount importance, and manage large-scale data analytics with real-time data collection from various IoT devices in parallel. We envision a framework to preserve data privacy utilizing Trusted Execution Environment (TEE) such as Intel SGX, end-to-end data encryption mechanism, and strong access control policies. Moreover, we design a generic framework to simplify the process of collecting and storing heterogeneous data coming from diverse IoT devices. In the second module, we envision a drone-based data processing system in real-time using edge computing and on-device computing. As, we know the use of drones is growing rapidly across many application domains including real-time monitoring, remote sensing, search and rescue, delivery of goods, security and surveillance, civil infrastructure inspection etc. This paper demonstrates the potential drone applications and their challenges discussing current research trends and provide future insights for potential use cases using edge and on-device computing.},
	booktitle = {2019 {First} {IEEE} {International} {Conference} on {Trust}, {Privacy} and {Security} in {Intelligent} {Systems} and {Applications} ({TPS}-{ISA})},
	author = {Islam, Md Shihabul and Verma, Harsh and Khan, Latifur and Kantarcioglu, Murat},
	month = dec,
	year = {2019},
	pages = {228--235},
}

@inproceedings{correia_omega_2020,
	title = {Omega: a {Secure} {Event} {Ordering} {Service} for the {Edge}},
	doi = {10.1109/DSN48063.2020.00062},
	abstract = {Edge computing is a paradigm that extends cloud computing with storage and processing capacity close to the edge of the network that can be materialized by using many fog nodes placed in multiple geographic locations. Fog nodes are likely to be vulnerable to tampering, so it is important to secure the functions they provide. A key building block of many distributed applications is an ordering service that keeps track of cause-effect dependencies among events and that allows events to be processed in an order that respects causality. In this paper we present the design and implementation of a secure event ordering service for fog nodes. Our service, named Omegae, leverages the availability of a Trusted Execution Environment (TEE) based on Intel SGX technology to offer fog clients guarantees regarding the order in which events are applied and served, even when fog nodes are compromised. We have also built OmegaKV, a key-value store that uses Omega e to offer causal consistency. Experimental results show that the ordering service can be secured without violating the latency constraints of time-sensitive edge applications, despite the overhead associated with using a TEE.},
	booktitle = {2020 50th {Annual} {IEEE}/{IFIP} {International} {Conference} on {Dependable} {Systems} and {Networks} ({DSN})},
	author = {Correia, Cláudio and Correia, Miguel and Rodrigues, Luís},
	month = jun,
	year = {2020},
	note = {ISSN: 1530-0889},
	pages = {489--501},
}

@inproceedings{vavala_secure_2017,
	title = {Secure {Tera}-scale {Data} {Crunching} with a {Small} {TCB}},
	doi = {10.1109/DSN.2017.53},
	abstract = {Outsourcing services to third-party providers comes with a high security cost-to fully trust the providers. Using trusted hardware can help, but current trusted execution environments do not adequately support services that process very large scale datasets. We present LASTGT, a system that bridges this gap by supporting the execution of self-contained services over a large state, with a small and generic trusted computing base (TCB). LASTGT uses widely deployed trusted hardware to guarantee integrity and verifiability of the execution on a remote platform, and it securely supplies data to the service through simple techniques based on virtual memory. As a result, LASTGT is general and applicable to many scenarios such as computational genomics and databases, as we show in our experimental evaluation based on an implementation of LAST-GT on a secure hypervisor. We also describe a possible implementation on Intel SGX.},
	booktitle = {2017 47th {Annual} {IEEE}/{IFIP} {International} {Conference} on {Dependable} {Systems} and {Networks} ({DSN})},
	author = {Vavala, Bruno and Neves, Nuno and Steenkiste, Peter},
	month = jun,
	year = {2017},
	note = {ISSN: 2158-3927},
	pages = {169--180},
}

@inproceedings{jain_cmp-sil_2023,
	title = {{CMP}-{SiL}: {Confidential} {Multi} {Party} {Software}-in-the-{Loop} {Simulation} {Frameworks}},
	doi = {10.1109/ISQED57927.2023.10129404},
	abstract = {Increasing complexity of systems and software in the automotive industry, coupled with distributed development environments has intensified adoption of Software in the Loop (SIL) systems, i.e. setup where traditional hardware components are designed and tested in pure virtual PC/IT environment consisting of virtualized hardware and networks. Cloud-based SiL simulation systems involving multiple contributors and orchestrators create huge risks for organizations due to potential for leakage of confidential model-IP to adversaries within the distributed infrastructure. This can create a bottleneck for wide-scale adoption of SiL-systems. We propose a data-flow architecture using trusted-computing technologies (e.g. Intel-SGX) to protect models and IP in cloud-based SiL environments. We illustrate that these protections can be designed to be compatible with existing SiL tools and workflows with minimal modifications. Further, we highlight the need for future standardization efforts of such security architectures in the SiL domain.},
	booktitle = {2023 24th {International} {Symposium} on {Quality} {Electronic} {Design} ({ISQED})},
	author = {Jain, Shalabh and Pappachan, Pradeep and Guajardo, Jorge and Trieflinger, Sven and Raghupatruni, Indrasen and Huber, Thomas},
	month = apr,
	year = {2023},
	note = {ISSN: 1948-3295},
	pages = {1--8},
}

@article{feng_anonymous_2022,
	title = {Anonymous {Authentication} on {Trust} in {Blockchain}-{Based} {Mobile} {Crowdsourcing}},
	volume = {9},
	issn = {2327-4662},
	doi = {10.1109/JIOT.2020.3018878},
	abstract = {Mobile crowdsourcing (MCS) has become an effective data collection method due to its mobility, low cost, and flexibility. However, since centralized MCS confronts severe security and privacy risks in reality, many researchers are devoted to building a decentralized MCS system based on blockchain. Despite the effectiveness of these schemes, they fail to offer anonymous authentication on the trust of MCS nodes, although privacy is a main concern in MCS and trust plays an important role in a series of MCS activities, such as worker selection and truth discovery. Nevertheless, anonymous authentication on trust is not a trivial issue since trust evaluation usually conflicts with anonymity, which is a necessary privacy requirement in an open MCS environment. To tackle this problem, we leverage Intel software guard extension (SGX) and propose a scheme to anonymously authenticate trust with trustworthy trust evaluation in a blockchain-based MCS system. The scheme employs an SGX-enabled cloud server to periodically alter user public/private key pairs and mix newly altered keys among a number of faked keys in order to ensure unlinkability. Besides, we consider the unique features of MCS and work out a novel trust evaluation method by aggregating both subjective feedback and objective behaviors. Finally, we conduct several analyses and experiments to illustrate its security and efficiency.},
	number = {16},
	journal = {IEEE Internet of Things Journal},
	author = {Feng, Wei and Yan, Zheng and Yang, Laurence T. and Zheng, Qinghua},
	month = aug,
	year = {2022},
	pages = {14185--14202},
}

@article{chen_towards_2019,
	title = {Towards {Efficient} {Fine}-{Grained} {Access} {Control} and {Trustworthy} {Data} {Processing} for {Remote} {Monitoring} {Services} in {IoT}},
	volume = {14},
	issn = {1556-6021},
	doi = {10.1109/TIFS.2018.2885287},
	abstract = {As an important application of the Internet of Things, many remote monitoring systems adopt a device-to-cloud network paradigm. In a remote patient monitoring case, various resource-constrained devices are used to measure the health conditions of a target patient in a distant non-clinical environment and the collected data are sent to the cloud backend of an authorized health care service for processing and decision making. As the measurements involve private patient information, access control and trustworthy processing of the confidential data become very important. Software-based solutions that adopt advanced cryptographic tools, such as attribute-based encryption and fully homomorphic encryption, can address the problem, but they also impose substantial computation overhead on both client and server sides. In this paper, we deviate from the conventional software-based solutions and propose a secure and efficient remote monitoring framework, called SRM, using the latest hardware-based trustworthy computing technology, such as Intel SGX. In addition, we present a robust and lightweight “heartbeat” protocol to handle notoriously difficult key revocation problem. We implemented a prototype of the framework for SRM and show that SRM can protect user data privacy against unauthorized parties, with minimum performance cost compared to existing software-based solutions.},
	number = {7},
	journal = {IEEE Transactions on Information Forensics and Security},
	author = {Chen, Yaxing and Sun, Wenhai and Zhang, Ning and Zheng, Qinghua and Lou, Wenjing and Hou, Y. Thomas},
	month = jul,
	year = {2019},
	pages = {1830--1842},
}

@inproceedings{he_sgxlinger_2018,
	title = {{SGXlinger}: {A} {New} {Side}-{Channel} {Attack} {Vector} {Based} on {Interrupt} {Latency} {Against} {Enclave} {Execution}},
	doi = {10.1109/ICCD.2018.00025},
	abstract = {Software Guard Extension (SGX) is a new security feature that has been released in recent Intel commodity processors. It is designed to provide a user program with a strongly shielded environment against other components in the system, including the OS, firmware and hardware peripherals. With SGX, developers can securely deploy critical applications on untrusted remote platforms without the concern of information leakage. However, researchers have found several attacks against SGX, suggesting blind reliance on SGX is inadvisable, and promoting the need for a comprehensive study on the security property of SGX. In this paper, we discover a new attack vector SGXlinger to disclose information inside the protected program. Our attack monitors the interrupt latency of the SGX-protected program, and it is the first time that the interrupt latency is leveraged as a side-channel. We develop a framework to repeatedly measure the interrupt latency of an enclave program, and the evaluation shows we can learn coarse-grained information inside the shielded environment. In an experimental setting, we measure that the information leakage rate of the proposed side-channel can reach up to 35 Kbps.},
	booktitle = {2018 {IEEE} 36th {International} {Conference} on {Computer} {Design} ({ICCD})},
	author = {He, Wenjian and Zhang, Wei and Das, Sanjeev and Liu, Yang},
	month = oct,
	year = {2018},
	note = {ISSN: 2576-6996},
	pages = {108--114},
}

@article{wang_trust_2023,
	title = {Trust {Beyond} {Border}: {Lightweight}, {Verifiable} {User} {Isolation} for {Protecting} {In}-{Enclave} {Services}},
	volume = {20},
	issn = {1941-0018},
	doi = {10.1109/TDSC.2021.3138427},
	abstract = {Due to the absence of in-enclave isolation, today's trusted execution environment (TEE), specifically Intel's Software Guard Extensions (SGX), does not have the capability to securely run different users’ tasks within a single enclave, which is required for supporting real-world services, such as an in-enclave machine learning model that classifies the data from various sources, or a microservice (e.g., data search) that performs a very small task (within sub-seconds) for a user and therefore cannot afford the resources and the delay for creating a separate enclave for each user. To address this challenge, we developed Liveries, a technique that enables lightweight, verifiable in-enclave user isolation for protecting time-sharing services. Our approach restricts an in-enclave thread's privilege when configuring an enclave, and further performs integrity check and sanitization on critical enclave data upon user switches. For this purpose, we developed a novel technique that ensures the protection of sensitive user data (e.g., session keys) even in the presence of the adversary who may have compromised the enclave. Our study shows that the new technique is lightweight (1\% overhead) and verifiable (about 3200 lines of code), making a step towards assured protection of real-world in-enclave services.},
	number = {1},
	journal = {IEEE Transactions on Dependable and Secure Computing},
	author = {Wang, Wenhao and Liu, Weijie and Chen, Hongbo and Wang, XiaoFeng and Tian, Hongliang and Lin, Dongdai},
	month = jan,
	year = {2023},
	pages = {522--538},
}

@inproceedings{li_featurespy_2023,
	title = {{FeatureSpy}: {Detecting} {Learning}-{Content} {Attacks} via {Feature} {Inspection} in {Secure} {Deduplicated} {Storage}},
	doi = {10.1109/INFOCOM53939.2023.10228971},
	abstract = {Secure deduplicated storage is a critical paradigm for cloud storage outsourcing to achieve both operational cost savings (via deduplication) and outsourced data confidentiality (via encryption). However, existing secure deduplicated storage designs are vulnerable to learning-content attacks, in which malicious clients can infer the sensitive contents of outsourced data by monitoring the deduplication pattern. We show via a simple case study that learning-content attacks are indeed feasible and can infer sensitive information in short time under a real cloud setting. To this end, we present FeatureSpy, a secure deduplicated storage system that effectively detects learning-content attacks based on the observation that such attacks often generate a large volume of similar data. FeatureSpy builds on two core design elements, namely (i) similarity-preserving encryption that supports similarity detection on encrypted chunks and (ii) shielded attack detection that leverages Intel SGX to accurately detect learning-content attacks without being readily evaded by adversaries. Trace-driven experiments on real-world and synthetic datasets show that our FeatureSpy prototype achieves high accuracy and low performance overhead in attack detection.},
	booktitle = {{IEEE} {INFOCOM} 2023 - {IEEE} {Conference} on {Computer} {Communications}},
	author = {Li, Jingwei and Ren, Yanjing and Lee, Patrick P. C. and Wang, Yuyu and Chen, Ting and Zhang, Xiaosong},
	month = may,
	year = {2023},
	note = {ISSN: 2641-9874},
	pages = {1--10},
}

@inproceedings{priebe_enclavedb_2018,
	title = {{EnclaveDB}: {A} {Secure} {Database} {Using} {SGX}},
	doi = {10.1109/SP.2018.00025},
	abstract = {We propose EnclaveDB, a database engine that guarantees confidentiality, integrity, and freshness for data and queries. EnclaveDB guarantees these properties even when the database administrator is malicious, when an attacker has compromised the operating system or the hypervisor, and when the database runs in an untrusted host in the cloud. EnclaveDB achieves this by placing sensitive data (tables, indexes and other metadata) in enclaves protected by trusted hardware (such as Intel SGX). EnclaveDB has a small trusted computing base, which includes an in-memory storage and query engine, a transaction manager and pre-compiled stored procedures. A key component of EnclaveDB is an efficient protocol for checking integrity and freshness of the database log. The protocol supports concurrent, asynchronous appends and truncation, and requires minimal synchronization between threads. Our experiments using standard database benchmarks and a performance model that simulates large enclaves show that EnclaveDB achieves strong security with low overhead (up to 40\% for TPC-C) compared to an industry strength in-memory database engine.},
	booktitle = {2018 {IEEE} {Symposium} on {Security} and {Privacy} ({SP})},
	author = {Priebe, Christian and Vaswani, Kapil and Costa, Manuel},
	month = may,
	year = {2018},
	note = {ISSN: 2375-1207},
	pages = {264--278},
}

@article{brito_privacy-preserving_2023,
	title = {Privacy-{Preserving} {Machine} {Learning} on {Apache} {Spark}},
	volume = {11},
	issn = {2169-3536},
	doi = {10.1109/ACCESS.2023.3332222},
	abstract = {The adoption of third-party machine learning (ML) cloud services is highly dependent on the security guarantees and the performance penalty they incur on workloads for model training and inference. This paper explores security/performance trade-offs for the distributed Apache Spark framework and its ML library. Concretely, we build upon a key insight: in specific deployment settings, one can reveal carefully chosen non-sensitive operations (e.g. statistical calculations). This allows us to considerably improve the performance of privacy-preserving solutions without exposing the protocol to pervasive ML attacks. In more detail, we propose Soteria, a system for distributed privacy-preserving ML that leverages Trusted Execution Environments (e.g. Intel SGX) to run computations over sensitive information in isolated containers (enclaves). Unlike previous work, where all ML-related computation is performed at trusted enclaves, we introduce a hybrid scheme, combining computation done inside and outside these enclaves. The experimental evaluation validates that our approach reduces the runtime of ML algorithms by up to 41\% when compared to previous related work. Our protocol is accompanied by a security proof and a discussion regarding resilience against a wide spectrum of ML attacks.},
	journal = {IEEE Access},
	author = {Brito, Cláudia V. and Ferreira, Pedro G. and Portela, Bernardo L. and Oliveira, Rui C. and Paulo, João T.},
	year = {2023},
	pages = {127907--127930},
}

@article{cai_guardian_2023,
	title = {{GUARDIAN}: {A} {Hardware}-{Assisted} {Distributed} {Framework} to {Enhance} {Deep} {Learning} {Security}},
	volume = {10},
	issn = {2329-924X},
	doi = {10.1109/TCSS.2023.3262289},
	abstract = {The ubiquity of artificial intelligence (AI) has led to its extensive research and application in various fields, such as computer vision, natural language processing, and medical image analysis. However, responsible AI faces severe security challenges, including the leakage of pretrained models and valuable training data. The existing solutions adopt new algorithm designs (such as federated learning) or cryptography (such as homomorphic encryption) to prevent possible security vulnerabilities. We observe that hardware-assisted trusted execution environments (TEEs) can further improve machine learning responsibility. Intel Software Guard Extension (SGX) is a popular, trusted execution hardware that enables users’ programs to run in an untrusted execution environment, such as a malicious operating system, but ensures the confidentiality and integrity of data. Therefore, we have designed GUARDIAN, a hardware-assisted secure machine learning training framework that protects data security during the training process. We have analyzed the typical characteristics of machine learning applications and characterized GUARDIAN through extensive experiments. Our findings demonstrate that introducing security guarantees causes performance degradation, which provides a feasible optimization direction in the near future.},
	number = {6},
	journal = {IEEE Transactions on Computational Social Systems},
	author = {Cai, Zinuo and Ren, Bojun and Ma, Ruhui and Guan, Haibing and Tian, Mengke and Wang, Yong},
	month = dec,
	year = {2023},
	pages = {3012--3020},
}

@article{sultan_container_2019,
	title = {Container {Security}: {Issues}, {Challenges}, and the {Road} {Ahead}},
	volume = {7},
	issn = {2169-3536},
	doi = {10.1109/ACCESS.2019.2911732},
	abstract = {Containers emerged as a lightweight alternative to virtual machines (VMs) that offer better microservice architecture support. The value of the container market is expected to reach 2.7 billion in 2020 as compared to 762 million in 2016. Although they are considered the standardized method for microservices deployment, playing an important role in cloud computing emerging fields such as service meshes, market surveys show that container security is the main concern and adoption barrier for many companies. In this paper, we survey the literature on container security and solutions. We have derived four generalized use cases that should cover security requirements within the host-container threat landscape. The use cases include: (I) protecting a container from applications inside it, (II) inter-container protection, (III) protecting the host from containers, and (IV) protecting containers from a malicious or semi-honest host. We found that the first three use cases utilize a software-based solutions that mainly rely on Linux kernel features (e.g., namespaces, CGroups, capabilities, and seccomp) and Linux security modules (e.g., AppArmor). The last use case relies on hardware-based solutions such as trusted platform modules (TPMs) and trusted platform support (e.g., Intel SGX). We hope that our analysis will help researchers understand container security requirements and obtain a clearer picture of possible vulnerabilities and attacks. Finally, we highlight open research problems and future research directions that may spawn further research in this area.},
	journal = {IEEE Access},
	author = {Sultan, Sari and Ahmad, Imtiaz and Dimitriou, Tassos},
	year = {2019},
	pages = {52976--52996},
}

@inproceedings{choi_avx_2023,
	title = {{AVX} {Timing} {Side}-{Channel} {Attacks} against {Address} {Space} {Layout} {Randomization}},
	doi = {10.1109/DAC56929.2023.10247741},
	abstract = {Modern x86 processors support an AVX instruction set to boost performance. However, this extension may cause security issues. We discovered that there are vulnerable properties in implementing masked load/store instructions. Based on this, we present a novel AVX timing side-channel attack that can defeat address space layout randomization. We demonstrate the significance of our attack by showing User and Kernel ASLR breaks on the recent Intel and AMD processors in various environments, including cloud computing systems, an SGX enclave (a fine-grained ASLR break), and major operating systems. We further demonstrate that our attack can be used to infer user behavior, such as Bluetooth events and mouse movements. We highlight that stronger isolation or more fine-grained randomization should be adopted to successfully mitigate our presented attacks.},
	booktitle = {2023 60th {ACM}/{IEEE} {Design} {Automation} {Conference} ({DAC})},
	author = {Choi, Hyunwoo and Kim, Suryeon and Shin, Seungwon},
	month = jul,
	year = {2023},
	pages = {1--6},
}

@inproceedings{yuhala_plinius_2021,
	title = {Plinius: {Secure} and {Persistent} {Machine} {Learning} {Model} {Training}},
	doi = {10.1109/DSN48987.2021.00022},
	abstract = {With the increasing popularity of cloud based machine learning (ML) techniques there comes a need for privacy and integrity guarantees for ML data. In addition, the significant scalability challenges faced by DRAM coupled with the high access-times of secondary storage represent a huge performance bottleneck for ML systems. While solutions exist to tackle the security aspect, performance remains an issue. Persistent memory (PM) is resilient to power loss (unlike DRAM), provides fast and fine-granular access to memory (unlike disk storage) and has latency and bandwidth close to DRAM (in the order of ns and GB/s, respectively). We present PLINIUS, a ML framework using Intel SGX enclaves for secure training of ML models and PM for fault tolerance guarantees. PLINIUS uses a novel mirroring mechanism to create and maintain (i) encrypted mirror copies of ML models on PM, and (ii) encrypted training data in byte-addressable PM, for near-instantaneous data recovery after a system failure. Compared to disk-based checkpointing systems, PLINIUS is 3.2× and 3.7× faster respectively for saving and restoring models on real PM hardware, achieving robust and secure ML model training in SGX enclaves.},
	booktitle = {2021 51st {Annual} {IEEE}/{IFIP} {International} {Conference} on {Dependable} {Systems} and {Networks} ({DSN})},
	author = {Yuhala, Peterson and Felber, Pascal and Schiavoni, Valerio and Tchana, Alain},
	month = jun,
	year = {2021},
	note = {ISSN: 2158-3927},
	pages = {52--62},
}

@inproceedings{goltzsche_endbox_2018,
	title = {{EndBox}: {Scalable} {Middlebox} {Functions} {Using} {Client}-{Side} {Trusted} {Execution}},
	doi = {10.1109/DSN.2018.00048},
	abstract = {Many organisations enhance the performance, security, and functionality of their managed networks by deploying middleboxes centrally as part of their core network. While this simplifies maintenance, it also increases cost because middlebox hardware must scale with the number of clients. A promising alternative is to outsource middlebox functions to the clients themselves, thus leveraging their CPU resources. Such an approach, however, raises security challenges for critical middlebox functions such as firewalls and intrusion detection systems. We describe EndBox, a system that securely executes middlebox functions on client machines at the network edge. Its design combines a virtual private network (VPN) with middlebox functions that are hardware-protected by a trusted execution environment (TEE), as offered by Intel's Software Guard Extensions (SGX). By maintaining VPN connection endpoints inside SGX enclaves, EndBox ensures that all client traffic, including encrypted communication, is processed by the middlebox. Despite its decentralised model, EndBox's middlebox functions remain maintainable: they are centrally controlled and can be updated efficiently. We demonstrate EndBox with two scenarios involving (i) a large company; and (ii) an Internet service provider that both need to protect their network and connected clients. We evaluate EndBox by comparing it to centralised deployments of common middlebox functions, such as load balancing, intrusion detection, firewalling, and DDoS prevention. We show that EndBox achieves up to 3.8x higher throughput and scales linearly with the number of clients.},
	booktitle = {2018 48th {Annual} {IEEE}/{IFIP} {International} {Conference} on {Dependable} {Systems} and {Networks} ({DSN})},
	author = {Goltzsche, David and Rüsch, Signe and Nieke, Manuel and Vaucher, Sébastien and Weichbrodt, Nico and Schiavoni, Valerio and Aublin, Pierre-Louis and Cosa, Paolo and Fetzer, Christof and Felber, Pascal and Pietzuch, Peter and Kapitza, Rüdiger},
	month = jun,
	year = {2018},
	note = {ISSN: 2158-3927},
	pages = {386--397},
}

@article{liu_esmac_2023,
	title = {{ESMAC}: {Efficient} and {Secure} {Multi}-{Owner} {Access} {Control} {With} {TEE} in {Multi}-{Level} {Data} {Processing}},
	volume = {20},
	issn = {1941-0018},
	doi = {10.1109/TDSC.2022.3215977},
	abstract = {Traditional data access control schemes only prevent unauthorized access to private data with a single owner. They are not suitable for application in a Multi-Level Data Processing (MLDP) scenario, where data are processed by a series of parties who also insert new data. Hence, the accumulated dataset should be protected through access control handled by hierarchically-structured parties who are at least partial data owners in MLDP. Existing multi-owner access control schemes mainly focus on controlling access to co-owned data of multiple entities with the equal ownership, but seldom investigates how to apply access control in MLDP. In this paper, we base the off-the-shelf Trusted Execution Environment (TEE), Intel SGX, to propose an Efficient and Secure Multi-owner Access Control scheme (ESMAC) for access authorization in MLDP. Moreover, to prevent unauthorized data disclosure by non-root data owners aiming to gain extra profits, we further introduce undercover polices to supervise their behaviors. Specifically, we design a data protection scheme based on game theory to decide the payoffs and punishments of honest and dishonest data owners, which motivates data owners to behave honestly when claiming ownership over data. Through comprehensive security analysis and performance evaluation, we demonstrate ESMAC's security and effectiveness.},
	number = {5},
	journal = {IEEE Transactions on Dependable and Secure Computing},
	author = {Liu, Dan and Yan, Zheng and Ding, Wenxiu and Cai, Yuxuan and Chen, Yaxing and Wan, Zhiguo},
	month = sep,
	year = {2023},
	pages = {4052--4069},
}

@inproceedings{aga_invisipage_2019,
	title = {{InvisiPage}: {Oblivious} {Demand} {Paging} for {Secure} {Enclaves}},
	abstract = {State-of-art secure processors like Intel SGX remain susceptible to leaking page-level address trace of an application via the page fault channel in which a malicious OS induces spurious page faults and deduces application's secrets from it. Prior works which fix this vulnerability do not provision for OS demand paging to be oblivious. In this work, we present InvisiPage which obfuscates page fault channel while simultaneously making OS demand paging oblivious. To do so, InvisiPage first carefully distributes page management actions between the application and the OS. Second, InvisiPage secures application's page management interactions with the OS using a novel construct which is derived from Oblivious RAM (ORAM) but is customized for page management. Finally, we lower overheads of our approach by reducing page management interactions with the OS via a novel memory partition. For a suite of cloud applications which process sensitive data we show that page fault channel can be tackled while enabling oblivious demand paging at low overheads.},
	booktitle = {2019 {ACM}/{IEEE} 46th {Annual} {International} {Symposium} on {Computer} {Architecture} ({ISCA})},
	author = {Aga, Shaizeen and Narayanasamy, Satish},
	month = jun,
	year = {2019},
	note = {ISSN: 2575-713X},
	pages = {372--384},
}

@inproceedings{hernandez_coronado_are_2019,
	title = {Are {We} {Referring} to the {Same} x86 64?: {Detection} of {Cache} {Events} in {AMD}'s {Zen} {Micro}-architecture},
	doi = {10.1109/ICDCS.2019.00218},
	abstract = {The disclosure of attacks based on flawed speculative execution mechanisms exposed cache side-channels as an apparatus to violate process isolation guarantees. Previous work has made Intel's SGX trust model the critical target of state-of-the-art techniques that leverage shared caches to shatter Enclave's safeguard. We demonstrate that porting attack implementations between micro-architectures can become a complex task, dismantling the concept of x86\_64 as a whole when talking about covert cache side-channels. Our work describes the shortcomings and alternatives of assessing low-level events within Zen's cache hierarchy. We disclose the effects of the implemented Second Level cache pre-fetcher and how it tampers the ability of algorithms to discover minimal eviction sets, for which we coin the term ZenAccess.},
	booktitle = {2019 {IEEE} 39th {International} {Conference} on {Distributed} {Computing} {Systems} ({ICDCS})},
	author = {Hernández Coronado, Andrés Rainiero and Lee, Wonjun},
	month = jul,
	year = {2019},
	note = {ISSN: 2575-8411},
	pages = {2217--2227},
}

@inproceedings{shyamasundar_realizing_2017,
	title = {Realizing software vault on {Android} through information-flow control},
	doi = {10.1109/ISCC.2017.8024657},
	abstract = {Several approaches to protect data and code, and ensure execution in a secure environment without getting infected from malwares, such as isolation, sandboxing, trust-based execution, application oriented access control have been proposed. In recent times, hardware-based solutions like ARM TrustZone and Intel SGX Enclave have been introduced to protect code and data from being infected or modified from outside the designated “secure” zone. While the hardware-based approaches have a distinct advantage, they have disadvantages in realizing Multi-Level Secure (MLS) systems, as they need to communicate via a central agent; further, a software vault would provide a good alternative when a system (like smartphone) is used/owned by a single person. In this paper, we describe a general approach for the creation of a software vault to preserve integrity and confidentiality of the information and computation end-to-end while supporting inter-communication among different components. This realizes an efficient interacting system that is secure and as good as the system using the hardware-based solutions. Our solution is through dynamic labelling using the recent information flow models for decentralized systems. We illustrate the application of our technique for building a runtime monitor for the Android environment, and demonstrate its characteristic properties by realizing a secure banking application. The solution guarantees end-to-end preservation of confidentiality \& integrity, and allowing interactions among distributed components but still preserving the hardness of penetration from malware. We believe that our software vault will have extensive applications in utility computing that demands inter-communication between clouds.},
	booktitle = {2017 {IEEE} {Symposium} on {Computers} and {Communications} ({ISCC})},
	author = {Shyamasundar, R.K. and Narendra Kumar, N.V. and Teltumde, Priyanka},
	month = jul,
	year = {2017},
	pages = {1007--1014},
}

@inproceedings{brasser_special_2018,
	title = {Special {Session}: {Advances} and {Throwbacks} in {Hardware}-{Assisted} {Security}},
	doi = {10.1109/CASES.2018.8516874},
	abstract = {Hardware security architectures and primitives are becoming increasingly important in practice providing trust anchors and trusted execution environment to protect modern software systems. Over the past two decades we have witnessed various hardware security solutions and trends from Trusted Platform Modules (TPM), performance counters for security, ARM's TrustZone, and Physically Unclonable Functions (PUFs), to very recent advances such as Intel's Software Guard Extension (SGX). Unfortunately, these solutions are rarely used by third party developers, make strong trust assumptions (including in manufacturers), are too expensive for small constrained devices, do not easily scale, or suffer from information leakage. Academic research has proposed a variety of solutions, in hardware security architectures, these advancements are rarely deployed in practice.},
	booktitle = {2018 {International} {Conference} on {Compilers}, {Architectures} and {Synthesis} for {Embedded} {Systems} ({CASES})},
	author = {Brasser, Ferdinand and Davi, Lucas and Dhavlle, Abhijitt and Frassetto, Tommaso and Dinakarrao, Sai Manoj Pudukotai and Rafatirad, Setareh and Sadeghi, Ahmad-Reza and Sasan, Avesta and Sayadi, Hossein and Zeitouni, Shaza and Homayoun, Houman},
	month = sep,
	year = {2018},
	note = {ISSN: 2381-1560},
	pages = {1--10},
}

@inproceedings{li_peapods_2018,
	title = {Peapods: {OS}-{Independent} {Memory} {Confidentiality} for {Cryptographic} {Engines}},
	doi = {10.1109/BDCloud.2018.00128},
	abstract = {Cryptography is widely adopted in computer systems to protect the confidentiality of sensitive information. The security relies on the assumption that cryptography keys are never leaked, which may be broken by the memory disclosure attacks, e.g., the Heartbleed and coldboot attacks. Various schemes are proposed to defend against memory disclosure attacks, e.g., performing the cryptographic computations in registers, or adopting the hardware features (e.g., Intel TSX and Intel SGX) to ensure that the plaintext of the cryptography key never appears in memory. However, these schemes are still not widely deployed due to the following limitations: (a) Most of the schemes are deployed in the OS kernel and require the root (or administrator) privileges of the host; and (b) They require the programmers to integrate these protection schemes in the implementation of different cryptography algorithms on different platforms. In this paper, we propose a tool implemented in Clang/LLVM, named Peapods, which provides the user-mode protection for cryptographic keys in software engines. It introduces one qualifier and three intrinsics for the programmers to specify the sensitive variables and code fragments to be protected, making it easier to be deployed. Peapods adopts transactional memory to protect cryptographic keys, while it is OS-independent and does not require the cryptographic computation performed in the OS kernel. Peapods supports the automatic protection between transactions for better performance. We have implemented the prototype of Peapods. Evaluation results demonstrate that Peapods achieves the design goals with a modest overhead (less than 10\%).},
	booktitle = {2018 {IEEE} {Intl} {Conf} on {Parallel} \& {Distributed} {Processing} with {Applications}, {Ubiquitous} {Computing} \& {Communications}, {Big} {Data} \& {Cloud} {Computing}, {Social} {Computing} \& {Networking}, {Sustainable} {Computing} \& {Communications} ({ISPA}/{IUCC}/{BDCloud}/{SocialCom}/{SustainCom})},
	author = {Li, Congwu and Lin, Jingqiang and Cai, Quanwei and Luo, Bo},
	month = dec,
	year = {2018},
	pages = {862--869},
}

@inproceedings{ferreira_bisen_2019,
	title = {{BISEN}: {Efficient} {Boolean} {Searchable} {Symmetric} {Encryption} with {Verifiability} and {Minimal} {Leakage}},
	doi = {10.1109/SRDS47363.2019.00021},
	abstract = {The prevalence and availability of cloud infrastructures has made them the de facto solution for storing and archiving data, both for organizations and individual users. Nonetheless, the cloud's wide spread adoption is still hindered by dependability and security concerns, particularly in applications with large data collections where efficient search and retrieval services are also major requirements. This leads to an increased tension between security, efficiency, and search expressiveness, which current state of the art solutions try to balance through complex cryptographic protocols that tradeoff efficiency and expressiveness for near optimal security. In this paper we tackle this tension by proposing BISEN, a new provably-secure boolean searchable symmetric encryption scheme that improves these three complementary dimensions by exploring the design space of isolation guarantees offered by novel commodity hardware such as Intel SGX, abstracted as Isolated Execution Environments (IEEs). BISEN is the first scheme to enable highly expressive and arbitrarily complex boolean queries, with minimal information leakage regarding performed queries and accessed data, and verifiability regarding fully malicious adversaries. Furthermore, by exploiting trusted hardware and the IEE abstraction, BISEN reduces communication costs between the client and the cloud, boosting query execution performance. Experimental validation and comparison with the state of art shows that BISEN provides better performance with enriched search semantics and security properties.},
	booktitle = {2019 38th {Symposium} on {Reliable} {Distributed} {Systems} ({SRDS})},
	author = {Ferreira, Bernardo and Portela, Bernardo and Oliveira, Tiago and Borges, Guilherme and Domingos, Henrique and Leitão, João},
	month = oct,
	year = {2019},
	note = {ISSN: 2575-8462},
	pages = {103--10309},
}

@article{ferreira_boolean_2022,
	title = {Boolean {Searchable} {Symmetric} {Encryption} {With} {Filters} on {Trusted} {Hardware}},
	volume = {19},
	issn = {1941-0018},
	doi = {10.1109/TDSC.2020.3012100},
	abstract = {The prevalence and availability of cloud infrastructures has made them the de facto solution for storing and archiving data, both for organizations and individual users. Nonetheless, the cloud’s wide spread adoption is still hindered by dependability and security concerns, particularly in applications with large data collections where efficient search and retrieval services are also major requirements. This leads to an increased tension between security, efficiency, and search expressiveness. In this article we tackle this tension by proposing BISEN, a new provably-secure boolean searchable symmetric encryption scheme that improves these three complementary dimensions by exploring the design space of isolation guarantees offered by novel commodity hardware such as Intel SGX, abstracted as Isolated Execution Environments (IEEs). BISEN is the first scheme to support multiple users and enable highly expressive and arbitrarily complex boolean queries, with minimal information leakage regarding performed queries and accessed data, and verifiability regarding fully malicious adversaries. Furthermore, BISEN extends the traditional SSE model to support filter functions on search results based on generic metadata created by the users. Experimental validation and comparison with the state of art shows that BISEN provides better performance with enriched search semantics and security properties.},
	number = {2},
	journal = {IEEE Transactions on Dependable and Secure Computing},
	author = {Ferreira, Bernardo and Portela, Bernardo and Oliveira, Tiago and Borges, Guilherme and Domingos, Henrique and Leitão, João},
	month = mar,
	year = {2022},
	pages = {1307--1319},
}

@inproceedings{chen_tora_2021,
	title = {Tora: {A} {Trusted} {Blockchain} {Oracle} {Based} on a {Decentralized} {TEE} {Network}},
	doi = {10.1109/JCC53141.2021.00016},
	abstract = {Smart Contracts cannot get external data directly due to the closure and determinacy of blockchain itself, limiting the extensibility of blockchain applications. Oracle is proposed to serve as a data feed to offer authenticated and deterministic external data to smart contracts. However, existing centralized oracles are efficient but vulnerable to targeted attacks and suffering from a single point of failure, while existing decentralized oracles are inefficient. The paper presents a trusted blockchain oracle based on a decentralized Trusted Execution Environment (TEE) network called Tora, which embraces both efficiency and availability. The key of Tora is a hybrid consensus mechanism with the confidential available group selection based on Proof-of-Availability (PoA). We have implemented a prototype of Tora on Ethereum with Intel Software Guard eXtensions (SGX) and evaluated it with a data-fetch use case on different measurements, including gas costs, off-chain execution time, group selection results and throughput. The results show that Tora provides considerable efficiency and scalability.},
	booktitle = {2021 {IEEE} {International} {Conference} on {Joint} {Cloud} {Computing} ({JCC})},
	author = {Chen, Lili and Yuan, Rui and Xia, Yubin},
	month = aug,
	year = {2021},
	pages = {28--33},
}

@inproceedings{lv_dramd_2020,
	title = {{DRAMD}: {Detect} {Advanced} {DRAM}-based {Stealthy} {Communication} {Channels} with {Neural} {Networks}},
	doi = {10.1109/INFOCOM41043.2020.9155515},
	abstract = {Shared resources facilitate stealthy communication channels, including side channels and covert channels, which greatly endanger the information security, even in cloud environments. As a commonly shared resource, DRAM memory also serves as a source of stealthy channels. Existing solutions rely on two common features of DRAM-based channels, i.e., high cache miss and high bank locality, to detect the existence of such channels. However, such solutions could be defeated. In this paper, we point out the weakness of existing detection solutions by demonstrating a new advanced DRAM-based channel, which utilizes the hardware Intel SGX to conceal cache miss and bank locality. Further, we propose a novel neural network based solution DRAMD to detect such advanced stealthy channels. DRAMD uses hardware performance counters to track not only cache miss events that are used by existing solutions, but also counts of branches and instructions executed, as well as branch misses. Then DRAMD utilizes neural networks to model the access patterns of different applications and therefore detects potential stealthy communication channels. Our evaluation shows that DRAMD achieves up to 99\% precision with 100\% recall. Furthermore, DRAMD introduces less than 5\% performance overheads and negligible impacts on legacy applications.},
	booktitle = {{IEEE} {INFOCOM} 2020 - {IEEE} {Conference} on {Computer} {Communications}},
	author = {Lv, Zhiyuan and Zhao, Youjian and Zhang, Chao and Li, Haibin},
	month = jul,
	year = {2020},
	note = {ISSN: 2641-9874},
	pages = {1907--1916},
}

@inproceedings{guo_performance-enhanced_2021,
	title = {Performance-{Enhanced} {Integrity} {Verification} for {Large} {Memories}},
	doi = {10.1109/SEED51797.2021.00016},
	abstract = {Modern memory systems on cloud servers are vulnerable to many security threats including memory integrity attacks. To protect user data, secure infrastructures like Intel SGX have deployed cryptographic memory protection mechanisms such as MAC+integrity tree. However, using an integrity tree can significantly increase the latency of memory data accesses and thus decrease performance. Although there are many tree optimizations that have obtained performance improvements, the overhead of using an integrity tree remains high. This overhead has become even worse with the recent increase of cloud memory size, making integrity protection impractical on cloud servers.We argue that most prior optimization works do not consider the architecture features of cloud server processors and thus miss the opportunity for further performance improvement. Based on this, we propose Parallelized-Compressed-Prefetched-Tree (PCPT), a tree optimization design tailored for cloud servers. PCPT consists of three methods including 1) parallelizing the memory accesses along a tree path to shorten the critical path, 2) compressing data cache lines and storing counters together with the data to reduce meta data accesses, and 3) prefetching in a tree-aware manner. We evaluate PCPT using 25 benchmarks drawn from 3 suites, and we show that PCPT improves the performance of the state-of-the-art by over 35\%.},
	booktitle = {2021 {International} {Symposium} on {Secure} and {Private} {Execution} {Environment} {Design} ({SEED})},
	author = {Guo, Yanan and Zigerelli, Andrew and Cheng, Yueqiang and Zhang, Youtao and Yang, Jun},
	month = sep,
	year = {2021},
	pages = {50--62},
}

@inproceedings{rocha_heats_2019,
	title = {Heats: {Heterogeneity}-and {Energy}-{Aware} {Task}-{Based} {Scheduling}},
	doi = {10.1109/EMPDP.2019.8671554},
	abstract = {Cloud providers usually offer diverse types of hardware for their users. Customers exploit this option to deploy cloud instances featuring GPUs, FPGAs, architectures other than x86 (e.g., ARM, IBM Power8), or featuring certain specific extensions (e.g., Intel SGX). We consider in this work the instances used by customers to deploy containers, nowadays the de facto standard for micro-services, or to execute computing tasks. In doing so, the underlying container orchestrator (e.g., Kubernetes) should be designed so as to take into account and exploit this hardware diversity. In addition, besides the feature range provided by different machines, there is an often overlooked diversity in the energy requirements introduced by hardware heterogeneity, which is simply ignored by default container orchestrator's placement strategies. We introduce Heats, a new task-oriented and energy-aware orchestrator for containerized applications targeting heterogeneous clusters. Heats allows customers to trade performance vs. energy requirements. Our system first learns the performance and energy features of the physical hosts. Then, it monitors the execution of tasks on the hosts and opportunistically migrates them onto different cluster nodes to match the customer-required deployment trade-offs. Our Heats prototype is implemented within Google's Kubernetes. The evaluation with synthetic traces in our cluster indicate that our approach can yield considerable energy savings (up to 8.5\%) and only marginally affect the overall runtime of deployed tasks (by at most 7\%). Heats is released as open-source.},
	booktitle = {2019 27th {Euromicro} {International} {Conference} on {Parallel}, {Distributed} and {Network}-{Based} {Processing} ({PDP})},
	author = {Rocha, Isabelly and Göttel, Christian and Felber, Pascal and Pasin, Marcelo and Rouvoy, Romain and Schiavoni, Valerio},
	month = feb,
	year = {2019},
	note = {ISSN: 2377-5750},
	pages = {400--405},
}

@article{wang_schain_2023,
	title = {{sChain}: {An} {Efficient} and {Secure} {Solution} for {Improving} {Blockchain} {Storage}},
	volume = {18},
	issn = {1556-6021},
	doi = {10.1109/TIFS.2023.3285489},
	abstract = {Emerging blockchain technology has become the cornerstone of many applications providing trusted data services. However, existing blockchain platforms cannot meet the growing demand for big data storage. Blockchain should duplicate both transactions and other user-defined data across nodes for integrity assurance. The rapid expansion of data on blockchain (on-chain data) increases the difficulty of deploying a full node, resulting in decreasing the degree of decentralization and adding the risk of broken data. To tackle these problems, we propose sChain, a novel framework for improving blockchain storage capacity, which does not revise blockchain implementation and can be applied to almost all the existing blockchain platforms. sChain outsources the user data to storage devices that are structurally external to the blockchain network. In theory, a user can outsource unlimited data to sChain. However, those off-chain data may suffer from corruption. To verify the data integrity, we propose a new provable data possession (PDP) scheme, which does not need a centralized entity to maintain any secret keys and therefore eliminates a single point of failure. What is more, we also design a prototype to accelerate the proposed PDP scheme through Intel SGX technology and parallel processing. Security analysis and evaluation results show that sChain can protect data security and effectively improve the blockchain storage capacity, respectively.},
	journal = {IEEE Transactions on Information Forensics and Security},
	author = {Wang, Lipeng and Guan, Zhi and Chen, Zhong and Hu, Mingsheng},
	year = {2023},
	pages = {3662--3676},
}

@inproceedings{zhang_priroster_2019,
	title = {{PriRoster}: {Privacy}-preserving {Radio} {Context} {Attestation} in {Cognitive} {Radio} {Networks}},
	doi = {10.1109/DySPAN.2019.8935740},
	abstract = {Spectrum shortage is a global concern and cognitive radio network (CRN) is envisioned to be one of the key technologies for overcoming this challenge. However, proper operation of a CRN heavily depends on compliance of cognitive radios (CRs). Although remote attestation of a CR's radio context is a promising solution, current remote attestation that requires the target's configuration to be publicly available to the verifier poses a fundamental challenge to the operational security of spectrum users, especially military primary users. To protect a device's configuration information, we propose PriRoster, a privacy-preserving remote attestation mechanism, that effectively separates the need to know the operational configuration from the capability to execute the verification process correctly at the verifier. PriRoster hides sensitive device and/or radio configuration information from untrusted intermediate verifiers in a public network and enables a range of new applications such as efficient network-wide radio context attestation. Trusted execution environment (TEE) such as Intel SGX is used in our design to provide confidential processing. However, naive application of TEE suffers from not only poor system scalability, but also information side channel leakage. We develop trust transfer protocol to significantly enhance system scalability, and the protection against information side channel attack is accomplished by automatically incorporating obliviousness primitive into the attestation program. We build a prototype of the proposed PriRoster system using Raspberry Pi, USRP, Intel NUC, and AWS cloud. The feasibility of our proposed framework is demonstrated by system benchmarks and the effectiveness of the proposed oblivious appraisal functions are verified by recording memory access pattern via code instrumentation},
	booktitle = {2019 {IEEE} {International} {Symposium} on {Dynamic} {Spectrum} {Access} {Networks} ({DySPAN})},
	author = {Zhang, Ruide and Wang, Ning and Zhang, Ning and Yan, Zheng and Lou, Wenjing and Thomas Hou, Y.},
	month = nov,
	year = {2019},
	note = {ISSN: 2334-3125},
	pages = {1--10},
}

@inproceedings{oak_language_2021,
	title = {Language {Support} for {Secure} {Software} {Development} with {Enclaves}},
	doi = {10.1109/CSF51468.2021.00037},
	abstract = {Confidential computing is a promising technology for securing code and data-in-use on untrusted host machines, e.g., the cloud. Many hardware vendors offer different implementations of Trusted Execution Environments (TEEs). A TEE is a hardware protected execution environment that allows performing confidential computations over sensitive data on untrusted hosts. Despite the appeal of achieving strong security guarantees against low-level attackers, two challenges hinder the adoption of TEEs. First, developing software in high-level managed languages, e.g., Java or Scala, taking advantage of existing TEEs is complex and error-prone. Second, partitioning an application into components that run inside and outside a TEE may break application-level security policies, resulting in an insecure application when facing a realistic attacker. In this work, we study both these challenges. We present JE, a programming model that seamlessly integrates a TEE, abstracting away low-level programming details such as initialization and loading of data into the TEE. JE only requires developers to add annotations to their programs to enable the execution within the TEE. Drawing on information flow control, we develop a security type system that checks confidentiality and integrity policies against realistic attackers with full control over the code running outside the TEE. We formalize the security type system for the JE core and prove it sound for a semantic characterization of security. We implement JE and the security type system, enable Java programs to run on Intel SGX with strong security guarantees. We evaluate our approach on use cases from the literature, including a battleship game, a secure event processing system, and a popular processing framework for big data, showing that we correctly handle complex cases of partitioning, information flow, declassification, and trust.},
	booktitle = {2021 {IEEE} 34th {Computer} {Security} {Foundations} {Symposium} ({CSF})},
	author = {Oak, Aditya and Ahmadian, Amir M. and Balliu, Musard and Salvaneschi, Guido},
	month = jun,
	year = {2021},
	note = {ISSN: 2374-8303},
	pages = {1--16},
}

@inproceedings{perez_achieving_2021,
	title = {Achieving the {Promise} of {Confidential} {Computing}},
	doi = {10.1109/IISWC53511.2021.00011},
	abstract = {The confidentiality and integrity of data are cornerstone properties of information technology security. The use of cryptography in conjunction with more traditional access control and other separation mechanisms is now wide-spread, well understood, and accepted when protecting data at rest or in motion. As we rely more and more on computing environments that we may not directly control, such as those we see today with various cloud computing models, there is heightened interest in the use of these technologies to protect data that is actively in use. This interest and related trend, which is becoming known as Confidential Computing (and several other names), has its roots in the long and rich history of computer security. I will discuss the role and ongoing evolution of hardware-based trusted execution environments - such as SGX - in achieving these goals, the progress we've made and the challenges we and the industry still face, all through the lens of my personal experience and what we are seeing from Intel's cloud and data center customers and partners.},
	booktitle = {2021 {IEEE} {International} {Symposium} on {Workload} {Characterization} ({IISWC})},
	author = {Perez, Ron},
	month = nov,
	year = {2021},
	pages = {xv--xvi},
}

@inproceedings{alabdulatif_secure_2020,
	title = {Secure {Data} {Analytics} for {IoT} {Cloud}-enabled {Framework} {Using} {Intel} {SGX}},
	doi = {10.1109/WETICE49692.2020.00019},
	abstract = {Cloud infrastructure capabilities, including massive, scalable and elastic computing resources, have led to the widespread adaption of Internet of Things (IoT) cloud-enabled services. This involves moving the storage and processing of sensitive IoT data to Cloud Service Providers (CSPs) that gain complete access to outsourced IoT data in the cloud. An efficient and lightweight Advanced Encryption Standard (AES) cryptosystem can play a major role in protecting IoT data from being exposed to CSPs by protecting the privacy of sensitive outsourced data. However, AES cryptosystems lack computation capabilities, which is a critical factor that prevents us taking full advantage of cloud computing services. When used with AES cryptosystems, Intel Software Guard Extensions (SGX) can provide a comprehensive solution to building secure data analytics framework for IoT-enabled application in various domains. In this paper, we develop a secure data analytics framework that relies on a hyper-integrated approach where both software- and hardware-based solutions are applied to protect and process sensitive outsourced data in the cloud.},
	booktitle = {2020 {IEEE} 29th {International} {Conference} on {Enabling} {Technologies}: {Infrastructure} for {Collaborative} {Enterprises} ({WETICE})},
	author = {Alabdulatif, Abdulatif},
	month = sep,
	year = {2020},
	note = {ISSN: 2641-8169},
	pages = {54--57},
}

@inproceedings{liang_man_2017,
	title = {Man in the {Cloud} ({MITC}) {Defender}: {SGX}-{Based} {User} {Credential} {Protection} for {Synchronization} {Applications} in {Cloud} {Computing} {Platform}},
	doi = {10.1109/CLOUD.2017.46},
	abstract = {In cloud environment, client user credential protection is a critical security capability that is target of adversarial attacks, especially, in cloud file synchronization applications. Among the various adversarial attacks, MITC (Man in the Cloud) attack on commercial cloud storage applications has emerged as a critical threat because it is easy to launch and hard to detect. In this paper, we propose MITC Defender, a hardware-based defense system capable of protecting client user credentials using Intel Software Guard Extensions (SGX) and preventing against four different types of MITC attack in cloud environment. By adopting Intel SGX security features such as sealing and attestation, MITC Defender can securely seal user credentials locally and easily unseal user credentials, when verifications are needed, in a Trusted Execution Environment (TEE). We implement MITC Defender on an open source platform OpenSGX and evaluate the performance and potential overhead. Our evaluation results show that MITC Defender is effective on defense against MITC attack and other security threats with a low cost.},
	booktitle = {2017 {IEEE} 10th {International} {Conference} on {Cloud} {Computing} ({CLOUD})},
	author = {Liang, Xueping and Shetty, Sachin and Zhang, Lingchen and Kamhoua, Charles and Kwiat, Kevin},
	month = jun,
	year = {2017},
	note = {ISSN: 2159-6190},
	pages = {302--309},
}

@inproceedings{zhao_performance_2016,
	title = {On the {Performance} of {Intel} {SGX}},
	doi = {10.1109/WISA.2016.45},
	abstract = {As cloud computing is widely used in various fields, more and more individuals and organizations are considering outsourcing data to the public cloud. However, the security of the cloud data has become the most prominent concern of many customers, especially those who possess a large volume of valuable and sensitive data. Although some technologies like Homomorphic Encryption were proposed to solve the problem of secure data, the result is still not satisfying. With the advent of Intel SGX processor, which aims to thoroughly eliminate the security concern of cloud environment in a hardware-assisted approach, it brings us a number of questions on its features and its practicability for the current cloud platform. To evaluate the potential impact of Intel SGX, we analyzed the current SGX programming mode and inferred some possible factors that may arise the overhead. To verify our performance hypothesis, we conducted a systematic study on SGX performance by a series of benchmark experiments. After analyzing the experiment result, we performed a workload characterization to help programmer better exploit the current availability of Intel SGX and identify feasible research directions.},
	booktitle = {2016 13th {Web} {Information} {Systems} and {Applications} {Conference} ({WISA})},
	author = {Zhao, ChongChong and Saifuding, Daniyaer and Tian, Hongliang and Zhang, Yong and Xing, ChunXiao},
	month = sep,
	year = {2016},
	pages = {184--187},
}

@inproceedings{pereira_using_2018,
	title = {Using {Intel} {SGX} to {Enforce} {Auditing} of {Running} {Software} in {Insecure} {Environments}},
	doi = {10.1109/CloudCom2018.2018.00054},
	abstract = {In this work we propose a strategy using Intel SGX processors to guarantee the use of audited applications in insecure environments. A cloud-based toolchain allows auditors to assess if the user's application meets specifications and standards, to generate the final binaries, and to cryptographically sign them. It also generates a manifesto containing information to verify the authenticity of the audited software binaries. A SGX-based binary loader (inserted by the cloud-based toolchain during the applications building process) writes down auditing data that is encrypted and sealed by SGX functions to form reliable proofs that the original audited software is the one running. As a proof-of-concept, a Linux kernel was modified in order to cryptographically measure all processes being executed and send these results to a SGX application. An analysis was carried out to measure the performance of the altered system. On average, a system consistently running the audit increased the execution time of each process by 20 to 30\%.},
	booktitle = {2018 {IEEE} {International} {Conference} on {Cloud} {Computing} {Technology} and {Science} ({CloudCom})},
	author = {Pereira, L. and Ortiz, L. and Rossi, D. and Rosa, M. and Fonseca, K. and Prado, C. and Rust, L. and Britto, A. and Riella, R.},
	month = dec,
	year = {2018},
	note = {ISSN: 2330-2186},
	pages = {243--246},
}

@article{wu_exploring_2023,
	title = {Exploring {Dynamic} {Task} {Loading} in {SGX}-{Based} {Distributed} {Computing}},
	volume = {16},
	issn = {1939-1374},
	doi = {10.1109/TSC.2021.3123511},
	abstract = {Nowadays, data privacy is one of the most critical concerns in cloud computing, and many privacy-preserving distributed computing systems based on the trusted execution environment (e.g., Intel SGX) have been proposed to protect the user’s privacy during cloud-outsourced computation. However, these SGX-based solutions are vulnerable to some traffic analyses, and loading all tasks into the enclave introduces much overhead for frequent EPC-paging. In this article, we propose a T-SGX framework, which keeps the confidentiality of a distributed job and guarantees the system efficiency by allowing dynamically loading an enclave shared object for the task under processing. In T-SGX, all these objects are secretly shared and stored in a verifiably distributed share management system (SMS) outside the TCB. To mitigate the exposure of sensitive information, we present an efficient oblivious transfer (OT) protocol under the Decisional Diffie-Hellman (DDH) assumption for obliviously transmitting desired shares. Detailed security analysis demonstrates that the proposed T-SGX achieves the goal of secure distributed computing without privacy leakage to unauthorized parties. Finally, we benchmark the framework in six real-world applications, and the experimental results show that T-SGX significantly outperforms a state-of-the-art solution, with 11.9\%-29.7\% less overhead performing an SGX-based application.},
	number = {1},
	journal = {IEEE Transactions on Services Computing},
	author = {Wu, Pengfei and Ning, Jianting and Luo, Wu and Huang, Xinyi and He, Debiao},
	month = jan,
	year = {2023},
	pages = {288--301},
}

@inproceedings{zhang_design_2020,
	title = {Design and implementation of high-performance cloud computing system},
	doi = {10.1109/ICBDIE50010.2020.00106},
	abstract = {Cloud computing technology has brought huge changes to modern computing methods and is widely used. However, its security issues cannot be ignored. In order to use cloud services, users must store programs, data, etc. in the cloud. Once the attacker gains control of the server, or the cloud service provider itself is not trustworthy, the user's programs and data face great risks. For the security of cloud computing, SGX (Intel Software Guard Extensions) technology proposed by Intel provides users with a hardware-assisted trusted execution environment, and isolates the program code and data that need to be protected in a container called Enclave to ensure its confidentiality and completeness. However, SGX sacrifices some performance, and applications running in SGX cannot get satisfactory speed. Therefore, in order to improve the availability of the SGX application, it is necessary to optimize the SGX operating mechanism and program logic to increase the speed of the program. This article designs a set of high-performance cloud computing systems, selects a deep learning framework as a case, combines the characteristics of the framework and the SGX operating mechanism, analyzes various factors affecting performance, proposes an optimization scheme, and implements the system. Experiments show that the optimized trusted deep learning framework has reduced the running time by 24.8\% compared with that before optimization.},
	booktitle = {2020 {International} {Conference} on {Big} {Data} and {Informatization} {Education} ({ICBDIE})},
	author = {Zhang, Zhongqiu},
	month = apr,
	year = {2020},
	pages = {426--429},
}

@inproceedings{ahmed_seed_2020,
	title = {{SEED}: {Confidential} {Big} {Data} {Workflow} {Scheduling} with {Intel} {SGX} {Under} {Deadline} {Constraints}},
	doi = {10.1109/SCC49832.2020.00023},
	abstract = {Recently, cloud platforms play an essential role in large-scale big data analytics and especially running scientific workflows. In contrast to traditional on-premise computing environments, where the number of resources is bounded, cloud computing can provide practically unlimited resources to a workflow application based on a pay-as-you-go pricing model. One challenge of using cloud computing is the protection of the privacy of the confidential workflow's tasks, whose proprietary algorithm implementations are intellectual properties of the respective stakeholders. Another one is the monetary cost optimization of executing workflows in the cloud while satisfying a user-defined deadline. In this paper, we use the Intel Software Guard eXtensions (SGX) as a Trusted Execution Environment (TEE) to support the confidentiality of individual workflow tasks. Based on this, we propose a deadline-constrained and SGX-aware workflow scheduling algorithm, called SEED (SGX, Efficient, Effective, Deadline Constrained), to address these two challenges. SEED features several heuristics, including exploiting the longest critical paths and reuse of extra times in existing virtual machine instances. Our experiments show that SEED outperforms the representative algorithm, IC-PCP, in most cases in monetary cost while satisfying the given user-defined deadline. To our best knowledge, this is the first workflow scheduling algorithm that considers protecting the confidentiality of workflow tasks in a public cloud computing environment.},
	booktitle = {2020 {IEEE} {International} {Conference} on {Services} {Computing} ({SCC})},
	author = {Ahmed, Ishtiaq and Mofrad, Saeid and Lu, Shiyong and Bai, Changxin and Zhang, Fengwei and Che, Dunren},
	month = nov,
	year = {2020},
	note = {ISSN: 2474-2473},
	pages = {108--115},
}

@article{liang_architectural_2021,
	title = {Architectural {Protection} of {Trusted} {System} {Services} for {SGX} {Enclaves} in {Cloud} {Computing}},
	volume = {9},
	issn = {2168-7161},
	doi = {10.1109/TCC.2019.2892449},
	abstract = {Data security and privacy are of great concern for users of cloud computing. In order to provide such guarantees in public clouds, hardware manufacturers have designed trusted execution environments such as Intel’s Software Guard eXtensions (SGX). Intel SGX supports privacy-preserving, tamper-proof containments called enclaves. Regrettably, an SGX enclave has to rely on the untrusted operating system or hypervisor for underlying services, which contradicts the threat model of Intel SGX. Whereas much of the previous work concentrates on protecting trusted applications by means of modifying a hypervisor, we tackle the problem by reusing existing drivers and leveraging processor-enforced protection. We propose a novel approach, named SMK, to provide trusted system services for SGX enclaves. SMK leverages existing Intel architecture features, i.e., System Management Mode (SMM) and Uniform Extensible Firmware Interface (UEFI). Specifically, we retrofit UEFI firmware and design an isolated micro-kernel inside SMM to securely provision critical system services for enclaves. To highlight the effectiveness and extensibility of SMK, we implement two system services: trusted clock and trusted network. Furthermore, we harden two real-world security-sensitive applications, OpenSSL and OpenVPN, with SMK’s system services. Our evaluation indicates that SMK can supply trusted system services for enclaves with modest runtime overheads.},
	number = {3},
	journal = {IEEE Transactions on Cloud Computing},
	author = {Liang, Hongliang and Li, Mingyu and Chen, Yixiu and Yang, Tianqi and Xie, Zhuosi and Jiang, Lin},
	month = jul,
	year = {2021},
	pages = {910--922},
}

@inproceedings{jing_characterizing_2021,
	title = {Characterizing {AI} {Model} {Inference} {Applications} {Running} in the {SGX} {Environment}},
	doi = {10.1109/NAS51552.2021.9605445},
	abstract = {Intel Software Guard Extensions (SGX) is a set of extensions built into Intel CPUs for the trusted computation. It creates a hardware-assisted secure container, within which programs are protected from data leakage and data manipulations by privileged software and hypervisors. With the trend that more and more machine learning based programs are moving to cloud computing, SGX can be used in cloud-based Machine Learning applications to protect user data from malicious privileged programs.However, applications running in SGX suffer from several overheads, including frequent context switching, memory page encryption/decryption, and memory page swapping, which significantly degrade the execution efficiency. In this paper, we aim to i) comprehensively explore the execution of general AI applications running on SGX, ii) systematically characterize the data reuses at both page granularity and cacheline granularity, and iii) provide optimization insights for efficient deployment of machine learning based applications on SGX. To the best of our knowledge, our work is the first to study machine learning applications on SGX and explore the potential of data reuses to reduce the runtime overheads in SGX.},
	booktitle = {2021 {IEEE} {International} {Conference} on {Networking}, {Architecture} and {Storage} ({NAS})},
	author = {Jing, Shixiong and Bao, Qinkun and Wang, Pei and Tang, Xulong and Wu, Dinghao},
	month = oct,
	year = {2021},
	pages = {1--4},
}

@inproceedings{alansari_privacy-preserving_2017,
	title = {Privacy-{Preserving} {Access} {Control} in {Cloud} {Federations}},
	doi = {10.1109/CLOUD.2017.108},
	abstract = {A Cloud federation is a collaboration of organizations sharing data hosted on their private cloud infrastructures in order to exploit a common business opportunity. However, the adoption of cloud federations is hindered by member organizations' concerns on sharing their data with potentially competing organizations. For cloud federations to be viable, federated organizations' privacy concerns should be alleviated by providing mechanisms that allow organizations to control which users from other federated organizations can access which data. We propose the architecture of a novel identity and access management system part of FaaS, a cloud federation service developed by the H2020 SUNFISH project. Our system allows federated organizations to enforce attribute-based access control policies on their data in a privacy-preserving fashion. Users are granted access to federated data when their identity attributes match the policies, but without revealing their attributes in clear. The architecture relies on two novel technologies, blockchain and Intel SGX hardware platform to guarantee integrity of the policy evaluation process.},
	booktitle = {2017 {IEEE} 10th {International} {Conference} on {Cloud} {Computing} ({CLOUD})},
	author = {Alansari, Shorouq and Paci, Federica and Margheri, Andrea and Sassone, Vladimiro},
	month = jun,
	year = {2017},
	note = {ISSN: 2159-6190},
	keywords = {identity},
	pages = {757--760},
}

@article{coppolino_vise_2021,
	title = {{VISE}: {Combining} {Intel} {SGX} and {Homomorphic} {Encryption} for {Cloud} {Industrial} {Control} {Systems}},
	volume = {70},
	issn = {1557-9956},
	doi = {10.1109/TC.2020.2995638},
	abstract = {Protecting data-in-use from privileged attackers is challenging. New CPU extensions (notably: Intel SGX) and cryptographic techniques (specifically: Homomorphic Encryption) can guarantee privacy even in untrusted third-party systems. HE allows sensitive processing on ciphered data. However, it is affected by i) a dramatic ciphertext expansion making HE unusable when bandwidth is narrow, ii) unverifiable conditional variables requiring off-premises support. Intel SGX allows sensitive processing in a secure enclave. Unfortunately, it is i) strictly bonded to the hosting server making SGX unusable when the live migration of cloud VMs/Containers is desirable, ii) limited in terms of usable memory, which is in contrast with resource-consuming data processing. In this article, we propose the VIrtual Secure Enclave (VISE), an approach that effectively combines the two aforementioned techniques, to overcome their limitations and ultimately make them usable in a typical cloud setup. VISE moves the execution of sensitive HE primitives (e.g., encryption) to the cloud in a remotely attested SGX enclave, and then performs sensitive processing on HE data-outside the enclave-leveraging all the memory resources available. We demonstrate that VISE meets the challenging security and performance requirements of a substantial application in the Industrial Control Systems domain. Our experiments prove the practicability of the proposed solution.},
	number = {5},
	journal = {IEEE Transactions on Computers},
	author = {Coppolino, Luigi and D’Antonio, Salvatore and Formicola, Valerio and Mazzeo, Giovanni and Romano, Luigi},
	month = may,
	year = {2021},
	pages = {711--724},
}

@inproceedings{park_toward_2016,
	title = {Toward {Live} {Migration} of {SGX}-{Enabled} {Virtual} {Machines}},
	doi = {10.1109/SERVICES.2016.23},
	abstract = {Intel Software Guard Extensions (SGX) can address the information disclosure in cloud computing. However, the existing virtual machine managers do not provide the efficient management operations of the SGX-enabled virtual machines (VMs) like live migration. In this paper, we identify challenges and propose a novel approach and its implementation model to migrate the SGX-enabled VMs. As future work, we will design the protocol and new instructions for live migration of the SGX-enabled VMs, and implement them on top of OpenSGX, an open source SGX emulator.},
	booktitle = {2016 {IEEE} {World} {Congress} on {Services} ({SERVICES})},
	author = {Park, Jaemin and Park, Sungjin and Oh, Jisoo and Won, Jong-Jin},
	month = jun,
	year = {2016},
	pages = {111--112},
}

@inproceedings{wu_leaks_2018,
	title = {Leaks or {Not}: {A} {Framework} for {Evaluating} {Cache} {Timing} {Side} {Channel} {Attacks} in {SGX}},
	doi = {10.1109/SmartWorld.2018.00254},
	abstract = {With the advent of Intel SGX processor, Intel is trying to prove that SGX can completely eliminate the security problems in cloud environment with assisted hardware. However, many studies have demonstrated that SGX cannot prevent some side channel attacks such as the spectre and meltdown attacks. Intel has focused on this issue and tried to solve it, but so far it has not yet released a powerful version. In this paper, we investigate related security works with SGX involving cache timing channel and speculative execution deeply. Based on SGX platform, we are going to take OpenSSL as a case study to validate SGX timing channel security. Besides, we are proposing a test framework to verify and assess whether and how much SGX influenced by timing side channel. Consisting of validating OpenSSL timing channel security and assessing secure cryptography implementation with timing channel mitigation measures in SGX, the framework will also motivate us to evaluate cache protection measures and perform trade-off between timing channel security and performance when using SGX.},
	booktitle = {2018 {IEEE} {SmartWorld}, {Ubiquitous} {Intelligence} \& {Computing}, {Advanced} \& {Trusted} {Computing}, {Scalable} {Computing} \& {Communications}, {Cloud} \& {Big} {Data} {Computing}, {Internet} of {People} and {Smart} {City} {Innovation} ({SmartWorld}/{SCALCOM}/{UIC}/{ATC}/{CBDCom}/{IOP}/{SCI})},
	author = {Wu, Ying and Zheng, Wei and Mao, BaoLei and Wu, XiaoXue},
	month = oct,
	year = {2018},
	pages = {1467--1470},
}

@inproceedings{fan_crop_2023,
	title = {Crop {Enclave} {Interface} for {SGX} {Programs}},
	doi = {10.1109/JCC59055.2023.00015},
	abstract = {Existing memory attacks against SGX use the enclave interface, such as ECALLs and OCALLs, to inject malicious data into the enclave’s trusted memory to trigger memory corruption vulnerabilities therein. Therefore, enclave interface security becomes a key issue in defending against such attacks. However, a comprehensive static analysis of source SGX programs is currently lacking to obtain sufficient a priori knowledge to provide effective runtime interface protection for the enclave. In view of this, we identify 8 types of unsafe input data of enclave and design a new interface cropping method, SGXCrop. This method extracts critical interface information from source SGX programs, including ECALLs in use and unsafe input data, which are cropped at runtime of SGX programs. Tests in real SGX environment verify that the proposed method can effectively crop illegal ECALLs and unsafe input data.},
	booktitle = {2023 {IEEE} {International} {Conference} on {Joint} {Cloud} {Computing} ({JCC})},
	author = {Fan, Yaqi and Chen, Zhifeng and Li, Qingbao and Deng, Wenbo},
	month = jul,
	year = {2023},
	pages = {66--69},
}

@inproceedings{faree_protecting_2019,
	title = {Protecting {Security}-{Sensitive} {Data} {Using} {Program} {Transformation} and {Intel} {SGX}},
	doi = {10.1109/NaNA.2019.00079},
	abstract = {Cloud computing allows clients uploading their sensitive data to the public cloud and perform sensitive computations in those untrusted areas, which drives to possible violations to the confidentiality of client sensitive data. By leveraging the program transformation and the Intel Software Guard Extension (SGX) technology, our proposed solution hides the security-sensitive statements inside an SGX enclave. Some former works have shown that most applications can run in their entirety inside trusted areas such as SGX enclaves, and that leads to a large trusted computing base (TCB). As a result, we analyze a case study in which we partition an application and use an SGX enclave to protect only security-sensitive statements, thus obtaining a smaller TCB. In this paper, we describe our case study that secures applications written in Java using Intel SGX technology. We analyzed our proposed solution using concrete examples to show how the confidentiality of security-sensitive variables is protected.},
	booktitle = {2019 {International} {Conference} on {Networking} and {Network} {Applications} ({NaNA})},
	author = {Faree, Anter and Wang, Yongzhi},
	month = oct,
	year = {2019},
	pages = {421--428},
}

@inproceedings{wang_poster_2018,
	title = {Poster: {Obfuscating} {Program} {Control} {Flow} with {Intel} {SGX}},
	abstract = {Control flow obfuscation is a direct approach in protecting the confidentiality of program logic. However, existing works in this direction either failed to offer high confidentiality guarantees or incurred high performance overheads. In this paper, we propose CFHider, a high security and high performance control flow obfuscation technique. By leveraging program transformation and Intel Software Guard Extension (SGX) technology, CFHider hides control flow information to an opaque yet trusted execution environment, i.e., the SGX enclave. Our evaluation showed that, CFHider extensively raises the bar for reverse-engineering attacks targeting on the control flow confidentiality, and incurs a moderate performance overhead.},
	booktitle = {2018 {IEEE}/{ACM} 40th {International} {Conference} on {Software} {Engineering}: {Companion} ({ICSE}-{Companion})},
	author = {Wang, Yongzhi and Shen, Yulong and Cheng, Ke and Yang, Yibo and Su, Cuicui and Faree, Anter},
	month = may,
	year = {2018},
	note = {ISSN: 2574-1934},
	pages = {321--322},
}

@inproceedings{ding_efficient_2022,
	title = {An {Efficient} and {Secure} {Scheme} of {Verifiable} {Computation} for {Intel} {SGX}},
	doi = {10.1109/TrustCom56396.2022.00072},
	abstract = {Cloud computing offers resource-constrained users big-volume data storage and energy-consuming complicated computation. However, owing to the lack of full trust in the cloud, the cloud users prefer privacy-preserving data computation with correctness verification. However, cryptography-based schemes introduce high computational costs to both the cloud and its users for verifiable computation with privacy preservation, which makes it difficult to support complicated computations in practice. Intel Software Guard Extensions (SGX) as a trusted execution environment is widely researched in various fields, and is regarded as a promising way to achieve efficient outsourced data computation with privacy preservation over the cloud. But we find two types of threats towards the computation with SGX: Disarranging Data-Related Code threat and Output Tampering and Misrouting threat. In this paper, we depict these threats using formal methods and propose an efficient and secure scheme to resist the threats and realize verifiable computation for Intel SGX. We prove the security and show the efficiency and correctness of our proposed scheme through theoretic analysis and extensive experiments. Furthermore, we compare our scheme with some cryptography-based schemes to show its high efficiency.},
	booktitle = {2022 {IEEE} {International} {Conference} on {Trust}, {Security} and {Privacy} in {Computing} and {Communications} ({TrustCom})},
	author = {Ding, Wenxiu and Sun, Wei and Yan, Zheng and Deng, Robert H. and Wan, Zhiguo},
	month = dec,
	year = {2022},
	note = {ISSN: 2324-9013},
	pages = {473--482},
}

@inproceedings{bazm_secure_2018,
	title = {Secure {Distributed} {Computing} on {Untrusted} {Fog} {Infrastructures} {Using} {Trusted} {Linux} {Containers}},
	doi = {10.1109/CloudCom2018.2018.00053},
	abstract = {Fog and Edge computing provide a large pool of resources at the edge of the network that may be used for distributed computing. Fog infrastructure heterogeneity also results in complex configuration of distributed applications on computing nodes. Linux containers are a mainstream technique allowing to run packaged applications and micro services. However, running applications on remote hosts owned by third parties is challenging because of untrusted operating systems and hardware maintained by third parties. To meet such challenges, we may leverage trusted execution mechanisms. In this work, we propose a model for distributed computing on Fog infrastructures using Linux containers secured by Intel's Software Guard Extensions (SGX) technology. We implement our model on a Docker and OpenSGX platform. The result is a secure and flexible approach for distributed computing on Fog infrastructures.},
	booktitle = {2018 {IEEE} {International} {Conference} on {Cloud} {Computing} {Technology} and {Science} ({CloudCom})},
	author = {Bazm, Mohammad-Mahdi and Lacoste, Marc and Südholt, Mario and Menaud, Jean-Marc},
	month = dec,
	year = {2018},
	note = {ISSN: 2330-2186},
	pages = {239--242},
}

@inproceedings{kawamura_secure_2022,
	title = {Secure {Offloading} of {User}-level {IDS} with {VM}-compatible {OS} {Emulation} {Layers} for {Intel} {SGX}},
	doi = {10.1109/CLOUD55607.2022.00035},
	abstract = {Since virtual machines (VMs) provided by Infrastructure-as-a-Service clouds often suffer from attacks, they need to be monitored using intrusion detection systems (IDS). For secure execution of host-based IDS (HIDS), IDS offloading is used to run IDS outside target VMs, but offloaded IDS can still be attacked. To address this issue, secure IDS offloading using Intel SGX has been proposed. However, IDS development requires kernel-level programming, which is difficult for most IDS developers. This paper proposes SCwatcher for enabling user-level HIDS running on top of the operating system (OS) to be securely offloaded using VM-compatible OS emulation layers for SGX. SCwatcher provides the standard OS interface used in a target VM to in-enclave IDS. Especially, the virtual proc filesystem called vProcFS analyzes OS data using VM introspection and returns the system information inside the target VM. We have implemented SCwatcher using Xen supporting SGX virtualization and two types of OS emulation layers for SGX called SCONE and Occlum. Then, we confirmed that SCwatcher could offload legacy HIDS and showed that the performance could be comparable to insecure IDS offloading.},
	booktitle = {2022 {IEEE} 15th {International} {Conference} on {Cloud} {Computing} ({CLOUD})},
	author = {Kawamura, Takumi and Kourai, Kenichi},
	month = jul,
	year = {2022},
	note = {ISSN: 2159-6190},
	pages = {157--166},
}

@inproceedings{sfyrakis_uniguard_2018,
	title = {{UniGuard}: {Protecting} {Unikernels} {Using} {Intel} {SGX}},
	doi = {10.1109/IC2E.2018.00032},
	abstract = {Computations executed in lightweight virtual machines called unikernels have a minimal attack surface and improved performance. However, unikernels are still prone to leaking information to the operating system or to the hypervisor that hosts them. This is attributed to vulnerabilities in privileged software and to malicious insiders operating in cloud infrastructures. Indeed, the deployment of unikernels requires a protection mechanism to ensure that information does not leak from unikernels. In this paper, we present our initial experiments into the use of an approach to creating a Trusted Execution Environment (TEE) in unikernels. We present UniGuard: a security architecture that leverages Intel Software Guard Extensions (SGX) to protect security-sensitive computations inside unikernels. We believe that unikernels are an excellent match for Intel SGX to create a TEE. We implemented our solution on top of the KVM hypervisor and its Intel SGX support. Results show that UniGuard has a comparable 20\% overhead when starting an enclave inside a unikernel and 10\% when executing ocalls.},
	booktitle = {2018 {IEEE} {International} {Conference} on {Cloud} {Engineering} ({IC2E})},
	author = {Sfyrakis, Ioannis and Gross, Thomas},
	month = apr,
	year = {2018},
	pages = {99--105},
}

@article{mazzeo_sgxtuner_2022,
	title = {{SGXTuner}: {Performance} {Enhancement} of {Intel} {SGX} {Applications} {Via} {Stochastic} {Optimization}},
	volume = {19},
	issn = {1941-0018},
	doi = {10.1109/TDSC.2021.3064391},
	abstract = {Intel SGX has started to be widely adopted. Cloud providers (Microsoft Azure, IBM Cloud, Alibaba Cloud) are offering new solutions, implementing data-in-use protection via SGX. A major challenge faced by both academia and industry is providing transparent SGX support to legacy applications. The approach with the highest consensus is linking the target software with SGX-extended libc libraries. Unfortunately, the increased security entails a dramatic performance penalty, which is mainly due to the intrinsic overhead of context switches, and the limited size of protected memory. Performance optimization is non-trivial since it depends on key parameters whose manual tuning is a very long process. We present the architecture of an automated tool, called SGXTuner, which is able to find the best setting of SGX-extended libc library parameters, by iteratively adjusting such parameters based on continuous monitoring of performance data. The tool is — to a large extent — algorithm agnostic. We decided to base the current implementation on a particular type of stochastic optimization algorithm, specifically Simulated Annealing. A massive experimental campaign was conducted on a relevant case study. Three client-server applications — Memcached, Redis, and Apache — were compiled with SCONE's sgx-musl and tuned for best performance. Results demonstrate the effectiveness of SGXTuner.},
	number = {4},
	journal = {IEEE Transactions on Dependable and Secure Computing},
	author = {Mazzeo, Giovanni and Arnautov, Sergei and Fetzer, Christof and Romano, Luigi},
	month = jul,
	year = {2022},
	pages = {2595--2608},
}

@inproceedings{burihabwa_sgx-fs_2018,
	title = {{SGX}-{FS}: {Hardening} a {File} {System} in {User}-{Space} with {Intel} {SGX}},
	doi = {10.1109/CloudCom2018.2018.00027},
	abstract = {File systems have long benefited from hardware acceleration to improve their performance. In order to leverage such hardware capabilities, file systems rely on direct and trusted support from the underlying operating system. However, this assumes that the OS and the associated kernel drivers, which access the accelerators, are trustworthy. The recent introduction of the Intel software guard extensions (SGX) instruction set allows application developers to lift part of these assumptions, in conjunction with the widespread availability of these new extensions in mass-market CPUs. With SGX, programmers can design secure applications under a stronger adversarial model, such as a compromised OS or kernel module. Code executes inside enclaves and is protected from privileged processes, including the OS itself. This paper presents SGX-FS, a new user-space file system that leverages SGX data sealing capabilities for secure in-memory and persistent storage. It combines the FUSE framework with SGX to securely protect user data. In particular, SGX-FS efficiently encrypts and decrypts the application data within the enclaves. We fully implement an open-source SGX-FS prototype and evaluate its performance by means of a representative set of nano-and micro-benchmarks.},
	booktitle = {2018 {IEEE} {International} {Conference} on {Cloud} {Computing} {Technology} and {Science} ({CloudCom})},
	author = {Burihabwa, Dorian and Felber, Pascal and Mercier, Hugues and Schiavoni, Valerio},
	month = dec,
	year = {2018},
	note = {ISSN: 2330-2186},
	pages = {67--72},
}

@inproceedings{zheng_performance_2018,
	title = {The {Performance} {Evaluation} {Model} of {Intel} {SGX}-{Based} {Data} {Protection}},
	doi = {10.1109/SmartWorld.2018.00224},
	abstract = {The hardware-level security protection method represented by SGX is the main trend of security guarantee for data processing of cloud tenants. However, different protection strategies have a great impact on the application performance of the tenants. How to make effective balance between the protection cost and the security enhancement has become the key problem in the decision of the data processing hardware security protection. Aiming at this problem, we will study an effective method to balance SGX application performance overhead and security enhancements, which is based on multi-objective optimization. Because there are many factors that cause performance losses in SGX applications, the performance of CPU intensive programs and concurrent programs is difficult to accurately estimate. We analyze the invisible relationship between performance factors and performance losses with deep learning theory, then we build a high precision SGX application performance loss estimation model which can adapt to different application scenarios.},
	booktitle = {2018 {IEEE} {SmartWorld}, {Ubiquitous} {Intelligence} \& {Computing}, {Advanced} \& {Trusted} {Computing}, {Scalable} {Computing} \& {Communications}, {Cloud} \& {Big} {Data} {Computing}, {Internet} of {People} and {Smart} {City} {Innovation} ({SmartWorld}/{SCALCOM}/{UIC}/{ATC}/{CBDCom}/{IOP}/{SCI})},
	author = {Zheng, Wei and Cao, ShiChao and Gao, ZhiQian and Wu, XiaoXue and Ding, Qian},
	month = oct,
	year = {2018},
	pages = {1289--1292},
}

@inproceedings{brito_cloud_2018,
	title = {Cloud {Challenge}: {Secure} {End}-to-{End} {Processing} of {Smart} {Metering} {Data}},
	doi = {10.1109/UCC-Companion.2018.00031},
	abstract = {Cloud computing considerably reduces the costs of deploying applications through on-demand, automated, and fine-granular allocation of resources. Even in private settings, cloud computing platforms enable agile and self-service management, which means that physical resources are shared more efficiently. Nevertheless, using shared infrastructures also creates more opportunities for attacks and data breaches. In this paper, we describe the SecureCloud approach. The SecureCloud project aims to enable confidentiality and integrity of data and applications running in potentially untrusted cloud environments. The project leverages technologies such as Intel SGX, OpenStack and Kubernetes to provide a cloud platform that supports secure applications. In addition, the project provides tools that help generating cloud-native, secure applications and services to be deployed on potentially untrusted clouds. The results have been validated in the smart grid scenario and enabled a data workflow that is protected end-to-end: from the collection of data to the generation of high-level information such as fraud alerts.},
	booktitle = {2018 {IEEE}/{ACM} {International} {Conference} on {Utility} and {Cloud} {Computing} {Companion} ({UCC} {Companion})},
	author = {Brito, Andrey and Fetzer, Christof and Köpsell, Stefan and Pasin, Marcelo and Felber, Pascal and Fonseca, Keiko and Rosa, Marcelo and Gomes, Luiz and Riella, Rodrigo and Prado, Charles and da Costa Carmo, Luiz F.R. and Lucani, Daniel and Sipos, Márton and Nagy, László and Fehér, Marcell},
	month = dec,
	year = {2018},
	pages = {36--42},
}

@inproceedings{widanage_hysec-flow_2021,
	title = {{HySec}-{Flow}: {Privacy}-{Preserving} {Genomic} {Computing} with {SGX}-based {Big}-{Data} {Analytics} {Framework}},
	doi = {10.1109/CLOUD53861.2021.00098},
	abstract = {Trusted execution environments (TEE) such as In-tel's Software Guard Extension (SGX) have been widely studied to boost security and privacy protection for the computation of sensitive data such as human genomics. However, a performance hurdle is often generated by SGX, especially from the small enclave memory. In this paper, we propose a new Hybrid Secured Flow framework (called “HySec-Flow”) for large-scale genomic data analysis using SGX platforms. Here, the data-intensive computing tasks can be partitioned into independent subtasks to be deployed into distinct secured and non-secured containers, therefore allowing for parallel execution while alleviating the limited size of Page Cache (EPC) memory in each enclave. We illustrate our contributions using a workflow supporting indexing, alignment, dispatching, and merging the execution of SGX-enabled containers. We provide details regarding the architecture of the trusted and untrusted components and the underlying Scorn and Graphene support as generic shielding execution frameworks to port legacy code. We thoroughly evaluate the performance of our privacy-preserving reads mapping algorithm using real human genome sequencing data. The results demonstrate that the performance is enhanced by partitioning the time-consuming genomic computation into subtasks compared to the conventional execution of the data-intensive reads mapping algorithm in an enclave. The proposed HySec-Flow framework is made available as an open-source and adapted to the data-parallel computation of other large-scale genomic tasks requiring security and scalable computational resources.},
	booktitle = {2021 {IEEE} 14th {International} {Conference} on {Cloud} {Computing} ({CLOUD})},
	author = {Widanage, Chathura and Liu, Weijie and Li, Jiayu and Chen, Hongbo and Wang, XiaoFeng and Tang, Haixu and Fox, Judy},
	month = sep,
	year = {2021},
	note = {ISSN: 2159-6190},
	pages = {733--743},
}

@article{dong_t-counter_2023,
	title = {T-{Counter}: {Trustworthy} and {Efficient} {CPU} {Resource} {Measurement} {Using} {SGX} in the {Cloud}},
	volume = {20},
	issn = {1941-0018},
	doi = {10.1109/TDSC.2022.3145814},
	abstract = {As cloud services have become popular, and their adoption is growing, consumers are becoming more concerned about the cost of cloud services. Cloud Service Providers (CSPs) generally use a pay-per-use billing scheme in the cloud services model: consumers use resources as they needed and are billed for their resource usage. However, CSPs are untrusted and privileged; they have full control of the entire operating system (OS) and may tamper with bills to cheat consumers. So, how to provide a trusted solution that can keep track of and verify the consumers’ resource usage has been a challenging problem. In this article, we propose a T-Counter framework based on Intel SGX. The T-Counter allows applications to construct a trusted solution to measure its CPU usage by itself in cloud computing. These constructed applications are instrumented with counters in basic blocks and added three components in trusted parts to count instructions and defend against malicious CSPs’ manipulations. We propose two algorithms which selectively instrument counters in the CFG. T-Counter is implemented as an extension of the LLVM framework and integrated with the SGX SDK. Theoretical analyses and evaluations show that T-Counter can effectively measure CPU usage and defend against malicious CSPs’ manipulations.},
	number = {1},
	journal = {IEEE Transactions on Dependable and Secure Computing},
	author = {Dong, Chuntao and Shen, Qingni and Ding, Xuhua and Yu, Daoqing and Luo, Wu and Wu, Pengfei and Wu, Zhonghai},
	month = jan,
	year = {2023},
	pages = {867--885},
}

@inproceedings{alam_demo_2023,
	title = {Demo: {SGX}-{MR}-{Prot}: {Efficient} and {Developer}-{Friendly} {Access}-{Pattern} {Protection} in {Trusted} {Execution} {Environments}},
	doi = {10.1109/ICDCS57875.2023.00121},
	abstract = {Trusted Execution Environments, such as Intel SGX, use hardware supports to ensure the confidentiality and integrity of applications against a compromised cloud system. However, side channels like access patterns remain for adversaries to exploit and obtain sensitive information. Common approaches use oblivious programs or primitives, such as ORAM, to make access patterns oblivious to input data, which are challenging to develop. This demonstration shows a prototype SGX-MR-Prot for efficiently protecting access patterns of SGX-based data-intensive applications and minimizing developers' efforts. SGX-MR-Prot uses the MapReduce framework to regulate application dataflows to reduce the cost of access-pattern protection and hide the data oblivious details from SGX developers. This demonstration will allow users to intuitively understand the unique contributions of the framework-based protection approach via interactive exploration and visualization.},
	booktitle = {2023 {IEEE} 43rd {International} {Conference} on {Distributed} {Computing} {Systems} ({ICDCS})},
	author = {Alam, A K M Mubashwir and Boyce, Justin and Chen, Keke},
	month = jul,
	year = {2023},
	note = {ISSN: 2575-8411},
	pages = {1029--1032},
}

@inproceedings{islam_secure_2020,
	title = {Secure {IoT} {Data} {Analytics} in {Cloud} via {Intel} {SGX}},
	doi = {10.1109/CLOUD49709.2020.00020},
	abstract = {The growing adoption of IoT devices in our daily life is engendering a data deluge, mostly private information that needs careful maintenance and secure storage system to ensure data integrity and protection. Also, the prodigious IoT ecosystem has provided users with opportunities to automate systems by interconnecting their devices and other services with rule-based programs. The cloud services that are used to store and process sensitive IoT data turn out to be vulnerable to outside threats. Hence, sensitive IoT data and rule-based programs need to be protected against cyberattacks. To address this important challenge, in this paper, we propose a framework to maintain confidentiality and integrity of IoT data and rule-based program execution. We design the framework to preserve data privacy utilizing Trusted Execution Environment (TEE) such as Intel SGX, and end-to-end data encryption mechanism. We evaluate the framework by executing rule-based programs in the SGX securely with both simulated and real IoT device data.},
	booktitle = {2020 {IEEE} 13th {International} {Conference} on {Cloud} {Computing} ({CLOUD})},
	author = {Islam, Md Shihabul and Ozdayi, Mustafa Safa and Khan, Latifur and Kantarcioglu, Murat},
	month = oct,
	year = {2020},
	note = {ISSN: 2159-6190},
	pages = {43--52},
}

@inproceedings{huang_sappx_2023,
	title = {{SAPPX}: {Securing} {COTS} {Binaries} with {Automatic} {Program} {Partitioning} for {Intel} {SGX}},
	doi = {10.1109/ISSRE59848.2023.00016},
	abstract = {In the era of cloud computing, many applications are migrated to public servers not fully controlled by users who may fear their critical operations or data from being compromised by attackers. Previous studies have shown that Intel SGX enclaves can improve applications’ security in many market products. Yet they mainly rely on developers to reprogram and recompile the application into an SGX-aware version. To address this problem, we propose SAPPX, an SGX-based program retrofitting method that can automatically partition COTS application binaries into two parts without breaking the original program semantics. The first part of the application runs in user space, while the second part is executed in an SGX enclave to protect the user’s sensitive information. We have implemented a prototype of SAPPX on x86/Linux platforms and evaluated its performance using real-world applications and SPECCPU 2017 benchmarks. The experimental results show that the average overhead of the proposed approach is up to 19\%.},
	booktitle = {2023 {IEEE} 34th {International} {Symposium} on {Software} {Reliability} {Engineering} ({ISSRE})},
	author = {Huang, Jiawei and Han, Hao and Xu, Fengyuan and Chen, Bing},
	month = oct,
	year = {2023},
	note = {ISSN: 2332-6549},
	pages = {148--159},
}

@inproceedings{wang_secure_2019,
	title = {A {Secure} {Multi}-{Party} {Computing} {System} {Based} on {SGX} {Technology} for {Trusted} {Data} {Circulation}},
	doi = {10.1109/ISKE47853.2019.9170307},
	abstract = {The security of data circulation is the core technology of data fusion and sharing service. The paper proposes multi-party circulation mechanism of the trusted data using to MPI communication. In order to achieve the trusted computing, this study proposes the computing service platform based on SMPC, which encapsulates the operation of sensitive data such as encryption key, password, user data, and etc.by trusted hardware using the security extension of Intel SGX. Meanwhile, aiming at these problems of semantic security and efficient processing ability, we chooses ElGamal homomorphic encryption system. In additional, SGX is extended to the remote authentication mechanism. System can support the deployment of hybrid cloud mode. Thus, the data security circulation can be satisfied. Compared to other methods, it has the advantage of model security and efficient communication.},
	booktitle = {2019 {IEEE} 14th {International} {Conference} on {Intelligent} {Systems} and {Knowledge} {Engineering} ({ISKE})},
	author = {Wang, DanChen and Zhang, Xiaosong and Xu, Yang and Song, Haiquan},
	month = nov,
	year = {2019},
	pages = {90--95},
}

@inproceedings{coppolino_approach_2018,
	title = {An {Approach} for {Securing} {Critical} {Applications} in {Untrusted} {Clouds}},
	doi = {10.1109/PDP2018.2018.00076},
	abstract = {The cloud computing has recently emerged as compelling paradigm for managing and delivery services over the internet. However, users as well as critical infrastructure operators, have legitimate concerns about the confidentiality, integrity and availability, in short the dependability, of applications and their data hosted on a third-party cloud. The dependability is become a commercial imperative for cloud providers, especially to support cloud computing for critical infrastructures. In this paper the SecureCloud project, its approach and goals are presented. SecureCloud aims to remove technical impediments to dependable cloud computing, encouraging and enabling a greater uptake of cost-effective, environment-friendly, and innovative cloud solutions, in particular, for critical infrastructure applications.},
	booktitle = {2018 26th {Euromicro} {International} {Conference} on {Parallel}, {Distributed} and {Network}-based {Processing} ({PDP})},
	author = {Coppolino, Luigi and D'Antonio, Salvatore and Mazzeo, Giovanni and Papale, Gaetano and Sgaglione, Luigi and Campanile, Ferdinando},
	month = mar,
	year = {2018},
	note = {ISSN: 2377-5750},
	pages = {436--440},
}

@inproceedings{nakano_secure_2021,
	title = {Secure {Offloading} of {Intrusion} {Detection} {Systems} from {VMs} with {Intel} {SGX}},
	doi = {10.1109/CLOUD53861.2021.00043},
	abstract = {Virtual machines (VMs) inside clouds need to be monitored using intrusion detection systems (IDS). Since host-based IDS can be easily disabled by intruders, IDS offloading with VM introspection (VMI) is used to securely run IDS outside a target VM. However, offloaded IDS can be still attacked because it runs on top of a vulnerable operating system (OS). Various systems have been proposed to protect offloaded IDS, but no systems provide an appropriate execution environment to IDS. This paper proposes SGmonitor for enabling the secure execution of IDS offloaded from VMs inside clouds using Intel SGX. SGmonitor executes IDS in SGX enclaves and preserves confidentiality and integrity. It provides secure VMI for memory and storage by using encryption and integrity checking. To make the development of offloaded IDS easier, it provides the in-kernel API to in-enclave IDS and enables transparent access to OS data in VMs. We have implemented SGmonitor in Xen with SGX support and showed that the overhead of in-enclave IDS was 31\% in compensation for much stronger security.},
	booktitle = {2021 {IEEE} 14th {International} {Conference} on {Cloud} {Computing} ({CLOUD})},
	author = {Nakano, Tomoharu and Kourai, Kenichi},
	month = sep,
	year = {2021},
	note = {ISSN: 2159-6190},
	pages = {297--303},
}

@inproceedings{krieter_towards_2018,
	title = {Towards {Secure} {Dynamic} {Product} {Lines} in the {Cloud}},
	abstract = {Cloud-based technologies play an increasing role in software engineering because of their scalability, availability, and cost efficiency. However, due to privacy issues, developers and organizations still hesitate to host applications that handle sensitive data on servers of external cloud providers. Modern hardware extensions, such as Intel's Software Guard Extensions (SGX), are an attempt to provide confidentiality and integrity for applications running on external hardware. Still, enabling SGX in cloud systems poses new challenges considering scalability and flexibility. In this paper, we propose an approach to address these issues by employing concepts from the domain of Dynamic Software Product Lines (DSPLs). We aim to enable applications running on SGX-based cloud systems to be securely reconfigurable and extendable during runtime. In particular, we describe properties that such an approach should fulfill and discuss corresponding challenges.},
	booktitle = {2018 {IEEE}/{ACM} 40th {International} {Conference} on {Software} {Engineering}: {New} {Ideas} and {Emerging} {Technologies} {Results} ({ICSE}-{NIER})},
	author = {Krieter, Sebastian and Krüger, Jacob and Weichbrodt, Nico and Sartakov, Vasily A. and Kapitza, Rüdiger and Leich, Thomas},
	month = may,
	year = {2018},
	pages = {5--8},
}

@inproceedings{silva_dynsgx_2017,
	title = {{DynSGX}: {A} {Privacy} {Preserving} {Toolset} for {Dinamically} {Loading} {Functions} into {Intel}({R}) {SGX} {Enclaves}},
	doi = {10.1109/CloudCom.2017.42},
	abstract = {Intel(R) Software Guard eXtensions (SGX) is a hardware-based technology for ensuring security of sensitive data from disclosure or modification that enables user-level applications to allocate protected areas of memory called enclaves. Such memory areas are cryptographically protected even from code running with higher privilege levels. This memory protection can be used to develop secure and dependable applications, but the technology has some limitations: (i) the code of an enclave is visible at load time, (ii) libraries used by the code must be statically linked, and (iii) the protected memory size is limited, demanding page swapping to be done when this limit is exceeded. We present DynSGX, a privacy preserving tool that enables users and developers to dynamically load and unload code to be executed inside SGX enclaves. Such a technology makes possible that developers use public cloud infrastructures to run applications based on sensitive code and data. Moreover, we present a series of experiments that assess how applications dynamically loaded by DynSGX perform in comparison to statically linked applications that disregard privacy of the enclave code at load time.},
	booktitle = {2017 {IEEE} {International} {Conference} on {Cloud} {Computing} {Technology} and {Science} ({CloudCom})},
	author = {Silva, Rodolfo and Barbosa, Pedro and Brito, Andrey},
	month = dec,
	year = {2017},
	note = {ISSN: 2330-2186},
	pages = {314--321},
}

@inproceedings{ouyang_scb_2021,
	title = {{SCB}: {Flexible} and {Efficient} {Asymmetric} {Computations} {Utilizing} {Symmetric} {Cryptosystems} {Implemented} with {Intel} {SGX}},
	doi = {10.1109/IPCCC51483.2021.9679452},
	abstract = {The wide spread of cloud computing and the rapid growth of online activities raise the demand for privacy enhancing cryptography, such as identity-based encryption (IBE), attribute-based encryption (ABE), and group/ring signature, which are mostly asymmetric. However, implementing a practical asymmetric cryptosystem with privacy enhancing functionalities faces the big challenge of large computing overhead that stems from the hard mathematical problems they are based on, which in reality hinders the further deployment of such cryptosystems.In this paper, we propose "SGX Cipher Box" (SCB), a method of constructing flexible and efficient asymmetric computations by encapsulating symmetric algorithms into Intel SGX enclaves. Two types of enclaves are designed for serving computations with the public key and the private key, respectively. The security assumptions of asymmetric algorithms can be achieved in SCB based on guarantees offered by SGX. SCB is of great flexibility that it facilitates implementing various asymmetric computations with limited enclaves. We present four SCB-based cryptosystems, provisioning asymmetric primitives, IBE, ABE, and ring signature, respectively. The four prototype cryptosystems are implemented and benchmarked in terms of computing efficiency. Experimental results show that SCB surpasses conventional asymmetric cryptosystem implementations in performance.},
	booktitle = {2021 {IEEE} {International} {Performance}, {Computing}, and {Communications} {Conference} ({IPCCC})},
	author = {Ouyang, Wenyi and Wang, Qiongxiao and Wang, Wei and Lin, Jingqiang and He, Yaxi},
	month = oct,
	year = {2021},
	note = {ISSN: 2374-9628},
	keywords = {identity},
	pages = {1--8},
}

@inproceedings{brito_securecloud_2018,
	title = {{SecureCloud}: {Secure} {Big} {Data} {Processing} in {Untrusted} {Clouds}},
	doi = {10.1109/DSN-W.2018.00026},
	abstract = {This paper describes goals and main achievements of the SecureCloud project. The SecureCloud project aims to enable confidentially and integrity of data and applications running in potentially untrusted cloud environments. On the one hand, the project leverages technologies such as Intel SGX, OpenStack and Kubernetes to provide a cloud platform that supports secure applications. On the other hand, the project provides tools that help generating cloud-native, secure applications and services to be deployed on potentially untrusted clouds.},
	booktitle = {2018 48th {Annual} {IEEE}/{IFIP} {International} {Conference} on {Dependable} {Systems} and {Networks} {Workshops} ({DSN}-{W})},
	author = {Brito, Andrey and Fetzer, Christof},
	month = jun,
	year = {2018},
	note = {ISSN: 2325-6664},
	pages = {53--54},
}

@inproceedings{liang_toward_2019,
	title = {Toward {Migration} of {SGX}-{Enabled} {Containers}},
	doi = {10.1109/ISCC47284.2019.8969644},
	abstract = {Containers are becoming the de facto platform for cloud computing. While cloud security has been a major concern, Intel SGX provisions powerful protection guarantees that can be used for containers. However, this technology does not come for free. For example, limited Enclave Page Cache (EPC) challenges the migration design of SGX-enabled containers.We note that previous security protocols are problematic concerning migration of SGX-enabled containers, which will lead to the failure of measures to prevent fork/fallback attacks. In this paper, we propose the migration of SGX-enabled containers and explore the challenges of deploying and migrating SGX-enabled containers considering both EPC resources and persistent storage. To our best knowledge, we are the first to design and implement such a framework for the SGX-enabled container migration that is easy, flexible and lightweight to deploy. We evaluate the proposed framework by migrating SGX-enabled Sqlite3 container and the experimental result shows that the proposed framework has about 15\% overhead, which is acceptable due to its security advantage.},
	booktitle = {2019 {IEEE} {Symposium} on {Computers} and {Communications} ({ISCC})},
	author = {Liang, Hongliang and Zhang, Qiong and Li, Mingyu and Li, Jianqiang},
	month = jun,
	year = {2019},
	note = {ISSN: 2642-7389},
	pages = {1--6},
}

@article{gao_blockchain_2021,
	title = {Blockchain and {SGX}-{Enabled} {Edge}-{Computing}-{Empowered} {Secure} {IoMT} {Data} {Analysis}},
	volume = {8},
	issn = {2327-4662},
	doi = {10.1109/JIOT.2021.3052604},
	abstract = {The Internet of Medical Things (IoMT) is an important application of the Internet of Things (IoT) in the health field, including remote health monitoring and remote medical diagnosis. This not only brings convenience to the patient but also reduces the cost of the patient. However, the surge of data brought by mobile health monitoring equipment challenges the traditional centralized data processing model. In particular, medical data are closely related to patient privacy. Therefore, only part of the specific medical data should be provided to the medical institutions in need, rather than all the data, to ensure the confidentiality of the data to the greatest extent. But curious data processing centers can easily lead to data leakage. To tackle these challenges, we use edge computing and blockchain to build a new framework. In particular, the trusted execution environment, namely, software guard extension (SGX) technology, is introduced into edge computing to ensure the confidentiality of the data analysis process. The blockchain authenticates the IoMT devices and cloud service providers that are added to the network and provides an access policy management mechanism for IoMT data. Moreover, a prototype of the proposed framework is implemented using Hyperledger Fabric and Intel SGX, and the analysis of the blockchain and SGX performance are also presented.},
	number = {21},
	journal = {IEEE Internet of Things Journal},
	author = {Gao, Ying and Lin, Hongliang and Chen, Yijian and Liu, Yangliang},
	month = nov,
	year = {2021},
	pages = {15785--15795},
}

@article{wu_differentially_2022,
	title = {Differentially {Oblivious} {Data} {Analysis} {With} {Intel} {SGX}: {Design}, {Optimization}, and {Evaluation}},
	volume = {19},
	issn = {1941-0018},
	doi = {10.1109/TDSC.2021.3106317},
	abstract = {A privacy-preserving data analytics system enables a cloud user to perform the distributed job in a secure manner such that the data privacy can be guaranteed during the cloud-outsourced computation. However, many SGX-based solutions are vulnerable to some side-channel attacks, including the access pattern leakage from both network and memory. Several data-oblivious algorithms with full obliviousness have been proposed in the literature, but they are impractical to be used in the cloud due to the expensive computational overhead. In this article, we propose a DPSpark system with the security defined in a notion of ({\textbackslash}epsilon,{\textbackslash}delta)(ε,δ)-differentially private obliviousness (({\textbackslash}epsilon,{\textbackslash}delta)(ε,δ)-DPO), which relaxes full obliviousness to enable an efficiency improvement. Based on this definition, we present a perturbation-shuffle-analysis (PSA) computing architecture and design several typical differentially oblivious operators. In further, we optimize the system efficiency by reducing the number of oblivious shuffles and choosing an appropriate privacy budget. Finally, we benchmark the system in different parameters. The experimental results show that DPSpark significantly outperforms two state-of-the-art solutions, only with 10.1-85.4 percent additional overhead performing an SGX-based data analysis application.},
	number = {6},
	journal = {IEEE Transactions on Dependable and Secure Computing},
	author = {Wu, Pengfei and Li, Qi and Ning, Jianting and Huang, Xinyi and Wu, Wei},
	month = nov,
	year = {2022},
	pages = {3741--3758},
}

@article{chen_qshield_2021,
	title = {{QShield}: {Protecting} {Outsourced} {Cloud} {Data} {Queries} {With} {Multi}-{User} {Access} {Control} {Based} on {SGX}},
	volume = {32},
	issn = {1558-2183},
	doi = {10.1109/TPDS.2020.3024880},
	abstract = {Due to the concern on cloud security, digital encryption is applied before outsourcing data to the cloud for utilization. This introduces a challenge about how to efficiently perform queries over ciphertexts. Crypto-based solutions currently suffer from limited operation support, high computational complexity, weak generality, and poor verifiability. An alternative method that utilizes hardware-assisted Trusted Execution Environment (TEE), i.e., Intel SGX, has emerged to offer high computational efficiency, generality and flexibility. However, SGX-based solutions lack support on multi-user query control and suffer from security compromises caused by untrustworthy TEE function invocation, e.g., key revocation failure, incorrect query results, and sensitive information leakage. In this article, we leverage SGX and propose a secure and efficient SQL-style query framework named QShield. Notably, we propose a novel lightweight secret sharing scheme in QShield to enable multi-user query control; it effectively circumvents key revocation and avoids cumbersome remote attestation for authentication. We further embed a trust-proof mechanism into QShield to guarantee the trustworthiness of TEE function invocation; it ensures the correctness of query results and alleviates side-channel attacks. Through formal security analysis, proof-of-concept implementation and performance evaluation, we show that QShield can securely query over outsourced data with high efficiency and scalable multi-user support.},
	number = {2},
	journal = {IEEE Transactions on Parallel and Distributed Systems},
	author = {Chen, Yaxing and Zheng, Qinghua and Yan, Zheng and Liu, Dan},
	month = feb,
	year = {2021},
	pages = {485--499},
}

@inproceedings{da_silva_squad_2019,
	title = {Squad: {A} {Secure}, {Simple} {Storage} {Service} for {SGX}-{Based} {Microservices}},
	doi = {10.1109/LADC48089.2019.8995723},
	abstract = {Intel SGX has been the subject of numerous research and development projects. Moreover, this technology has been considered a robust option to secure the data being processed in cloud environments. Despite this, configuring SGX-based applications in complex and dynamic scenarios such as microservice architectures is still a challenge. The process of configuring such applications must guarantee the trustworthiness of the services, and must be simple and efficient. We then propose a solution for configuring and provisioning secrets to SGX-based applications made with help from the Intel SGX SDK. We present a simple solution that can be easily validated and hardened. Also, the solution is pluggable and can be extended to fit specific requirements or leverage other tools (e.g., for data persistence). In addition to describing our proposal, we also provide an evaluation that shows low overhead to the initialization and configuration time of SGX microservices deployed on Kubernetes. This work contributes to the state-of-the-art of the usage of trusted execution environments in cloud computing.},
	booktitle = {2019 9th {Latin}-{American} {Symposium} on {Dependable} {Computing} ({LADC})},
	author = {da Silva, Matteus Sthefano Leite and de Oliveira Silva, Fábio Fernando and Brito, Andrey},
	month = nov,
	year = {2019},
	pages = {1--9},
}

@inproceedings{feher_secure_2018,
	title = {Secure and {Scalable} {Key} {Value} {Storage} for {Managing} {Big} {Data} in {Smart} {Cities} {Using} {Intel} {SGX}},
	doi = {10.1109/SmartCloud.2018.00020},
	abstract = {This paper advocates for the use of Intel SGX capable chips to deliver a secure and scalable architecture for Big Data processing in the cloud. The paper provides a novel Key-Value store service designed to use these new security capabilities as well as delivering a flexible mechanism to store hot, cold, and warm data using data replication, network coding, and hybrid mechanisms. We also describe various representative data streams from smart city sensors and applications gathered in Brazil used to tailor and guide our system design.},
	booktitle = {2018 {IEEE} {International} {Conference} on {Smart} {Cloud} ({SmartCloud})},
	author = {Feher, Marcell and Lucani, Daniel E. and Fonseca, Keiko and Rosa, Marcelo and Despotov, Bogdan},
	month = sep,
	year = {2018},
	pages = {70--76},
}

@inproceedings{yoon_comparative_2020,
	title = {A {Comparative} {Analysis} of {Searchable} {Encryption} {Schemes} using {SGX}},
	doi = {10.1109/ICTC49870.2020.9289274},
	abstract = {Searchable encryption (SE) schemes enable users to search over encrypted data that are outsourced to untrusted cloud servers. Although many software-based SE schemes have been developed to improve security and functionality, most of them have limitations in terms of performance and security assumptions. In order to increase the efficiency, and guarantee query and data privacy, several SE schemes based on trusted execution environment (TEE) such as Intel SGX, ARM TrustZone have been proposed recently. In this paper, we investigate the existing SGX-based searchable encryption schemes, and conduct a comparative analysis of them.},
	booktitle = {2020 {International} {Conference} on {Information} and {Communication} {Technology} {Convergence} ({ICTC})},
	author = {Yoon, Hyundo and Hur, Junbeom},
	month = oct,
	year = {2020},
	note = {ISSN: 2162-1233},
	pages = {526--528},
}

@inproceedings{vaucher_sgx-aware_2018,
	title = {{SGX}-{Aware} {Container} {Orchestration} for {Heterogeneous} {Clusters}},
	doi = {10.1109/ICDCS.2018.00076},
	abstract = {Containers are becoming the de facto standard to package and deploy applications and micro-services in the cloud. Several cloud providers (e.g., Amazon, Google, Microsoft) begin to offer native support on their infrastructure by integrating container orchestration tools within their cloud offering. At the same time, the security guarantees that containers offer to applications remain questionable. Customers still need to trust their cloud provider with respect to data and code integrity. The recent introduction by Intel of Software Guard Extensions (SGX) into the mass market offers an alternative to developers, who can now execute their code in a hardware-secured environment without trusting the cloud provider. This paper provides insights regarding the support of SGX inside Kubernetes, an industry-standard container orchestrator. We present our contributions across the whole stack supporting execution of SGX-enabled containers. We provide details regarding the architecture of the scheduler and its monitoring framework, the underlying operating system support and the required kernel driver extensions. We evaluate our complete implementation on a private cluster using the real-world Google Borg traces. Our experiments highlight the performance trade-offs that will be encountered when deploying SGX-enabled micro-services in the cloud.},
	booktitle = {2018 {IEEE} 38th {International} {Conference} on {Distributed} {Computing} {Systems} ({ICDCS})},
	author = {Vaucher, Sébastien and Pires, Rafael and Felber, Pascal and Pasin, Marcelo and Schiavoni, Valerio and Fetzer, Christof},
	month = jul,
	year = {2018},
	note = {ISSN: 2575-8411},
	pages = {730--741},
}

@inproceedings{li_secure_2023,
	title = {Secure and {Efficient} {Cloud} {Ciphertext} {Deduplication} {Based} on {SGX}},
	doi = {10.1109/ICPADS56603.2022.00096},
	abstract = {With the development of data outsourcing technology, the data stored by cloud storage servers are exploding. Secure deduplication for encrypted data helps cloud servers reduce storage overhead in the scenario that cloud users outsource their data in ciphertext. To satisfy client-side semantic security, most existing deduplication schemes for encrypted data need trusted third parties. However, trusted third parties are difficult to deploy and may cause potential risks. Therefore, we propose a secure cloud ciphertext deduplication scheme based on Intel SGX. The proposed scheme uses the Enclave security container provided by Intel SGX as the trusted execution environment on the cloud server to replace the trusted third party to perform sensitive operations. At the same time, our scheme simplifies the secure management of the file encryption keys so that the encryption key of the files with the same data can be securely distributed to other owners of the same file without the need for the original uploader online. We prove the security of the proposed scheme and the experiment shows the efficiency of the scheme.},
	booktitle = {2022 {IEEE} 28th {International} {Conference} on {Parallel} and {Distributed} {Systems} ({ICPADS})},
	author = {Li, Limin and Qin, Guiyun and Liu, Pengtao and Hu, Chengyu and Guo, Shanqing},
	month = jan,
	year = {2023},
	note = {ISSN: 2690-5965},
	pages = {696--703},
}

@inproceedings{hwang_sgx_2021,
	title = {{SGX} -{Capsule}: {A} {Confidential} {Execution} {Engine} for {Unmodified} {Libraries} on {SGX} {Enclave}},
	doi = {10.1109/IC2E52221.2021.00045},
	abstract = {Hardware-assisted lifetime confidentiality of unmodified libraries is required to protect proprietary IP from potentially compromised privileged software. Previous research, however, has found that they do not provide it with smaller TCB size to unmodified binaries. This paper proposes SGX-Capsule, a confidential execution engine that executes a native library within an SGX enclave while the library remains confidential at rest and in transit. Reduced TCB size by accommodating the target library only and interfacing with others across the enclave boundary decreases possible vulnerabilities and performance overhead from memory overcommitment.},
	booktitle = {2021 {IEEE} {International} {Conference} on {Cloud} {Engineering} ({IC2E})},
	author = {Hwang, Woomin and Lee, Chulwoo and Kim, Byungjoon},
	month = oct,
	year = {2021},
	pages = {276--277},
}

@article{jiang_rphx_2022,
	title = {Rphx: {Result} {Pattern} {Hiding} {Conjunctive} {Query} {Over} {Private} {Compressed} {Index} {Using} {Intel} {SGX}},
	volume = {17},
	issn = {1556-6021},
	doi = {10.1109/TIFS.2022.3144877},
	abstract = {Deploying data storage and query service in an untrusted cloud server raises critical privacy and security concerns. This paper focuses on the fundamental problem of processing conjunctive keyword queries over an untrusted cloud in a privacy-preserving manner. Previous tree-based searchable symmetric encryption (SSE) schemes, such as IBTree and VBTree, can process conjunctive keyword queries in a secure and efficient way. However, these schemes cannot address “Result Pattern (RP)” leakage, which can be used to recover the keywords contained in a conjunctive keyword query. To combat this challenging problem, we propose a result pattern hiding conjunctive query scheme named Rphx using Intel SGX. In particular, we first propose a new “SGX-aware” compressed index named VIBT by combining variable-length bloom filter tree, matryoshka filter and online cipher. To achieve RP hiding, we then introduce a new tree-based SSE scheme named Rphx by deploying VIBT to Intel SGX. Security analysis shows that Rphx can enhance the security requirements by hiding RP leakage under the IND-CKA2 security model. Experimental results show that VIBT gains at least 30{\textbackslash}times improvement in storage efficiency and Rphx can achieve comparable search efficiency comparing with previous works.},
	journal = {IEEE Transactions on Information Forensics and Security},
	author = {Jiang, Qin and Chang, Ee-Chien and Qi, Yong and Qi, Saiyu and Wu, Pengfei and Wang, Jianfeng},
	year = {2022},
	pages = {1053--1068},
}

@inproceedings{nguyen_engarde_2017,
	title = {{EnGarde}: {Mutually}-{Trusted} {Inspection} of {SGX} {Enclaves}},
	doi = {10.1109/ICDCS.2017.35},
	abstract = {Intel's SGX architecture allows cloud clients to create enclaves, whose contents are cryptographically protected by the hardware even from the cloud provider. While this feature protects the confidentiality and integrity of the client's enclave content, it also means that enclave content is completely opaque to the cloud provider. Thus, the cloud provider is unable to enforce policy compliance on enclaves. In this paper, we introduce EnGarde, a system that allows cloud providers to ensure SLA compliance on enclave content. In EnGarde, cloud providers and clients mutually agree upon a set of policies that the client's enclave content must satisfy. EnGarde executes when the client provisions the enclave, ensuring that only policy-compliant content is loaded into the enclave. EnGarde is able to achieve its goals without compromising the security guarantees offered by the SGX, and imposes no runtime overhead on the execution of enclave code. We have demonstrated the utility of EnGarde by using it to enforce a variety of security policies on enclave content.},
	booktitle = {2017 {IEEE} 37th {International} {Conference} on {Distributed} {Computing} {Systems} ({ICDCS})},
	author = {Nguyen, Hai and Ganapathy, Vinod},
	month = jun,
	year = {2017},
	note = {ISSN: 1063-6927},
	pages = {2458--2465},
}

@inproceedings{moon_preventing_2021,
	title = {Preventing {Enclave} {Malware} with {Intermediate} {Enclaves} on {Semi}-honest {Cloud} {Platforms}},
	doi = {10.1109/BigComp51126.2021.00050},
	abstract = {Threats to data processing in the cloud computing environment are increasing with emerging cloud applications. Intel Software Guard Extensions (SGX) implements a Trusted Execution Environment (TEE) through hardware-based isolation, which can enhance the security of cloud applications by providing a separate secure space that does not reveal its interior. A trusted memory area isolated by SGX, so-called enclave, protects the confidential code and data from any other software, including highly privileged system software. However, the adversary also benefits from isolation by inserting malicious code into the enclave where the system cannot detect it. Existing studies suggest various measures to deal with enclave malware, but these are based on an underlying assumption that the system must be trusted, which does not apply to the semi-honest cloud platform. To this end, we propose a novel method, named Interclave, that protects the system from enclave malware in the cloud computing environment without trusting any component other than the intermediate enclave. Interclave forces every ECALL and OCALL of a suspicious enclave to be executed through an intermediate enclave. This prevents the malicious behavior of enclave malware such as code-reuse attacks that modify the stack or register values associated with the program's execution address. Interclave stores and restores all stack and register values before and after the execution of the suspicious enclave, ensuring the integrity of these values. Our implementation is done with slight code modifications which occupy only a little storage capacity without complicated hardware changes.},
	booktitle = {2021 {IEEE} {International} {Conference} on {Big} {Data} and {Smart} {Computing} ({BigComp})},
	author = {Moon, Soo Jung and Park, Hoorin and Lee, Wonjun},
	month = jan,
	year = {2021},
	note = {ISSN: 2375-9356},
	pages = {226--232},
}

@inproceedings{alansari_distributed_2017,
	title = {A {Distributed} {Access} {Control} {System} for {Cloud} {Federations}},
	doi = {10.1109/ICDCS.2017.241},
	abstract = {Cloud federations are a new collaboration paradigm where organizations share data across their private cloud infrastructures. However, the adoption of cloud federations is hindered by federated organizations' concerns on potential risks of data leakage and data misuse. For cloud federations to be viable, federated organizations' privacy concerns should be alleviated by providing mechanisms that allow organizations to control which users from other federated organizations can access which data. We propose a novel identity and access management system for cloud federations. The system allows federated organizations to enforce attribute-based access control policies on their data in a privacy-preserving fashion. Users are granted access to federated data when their identity attributes match the policies, but without revealing their attributes to the federated organization owning data. The system also guarantees the integrity of the policy evaluation process by using block chain technology and Intel SGX trusted hardware. It uses block chain to ensure that users identity attributes and access control policies cannot be modified by a malicious user, while Intel SGX protects the integrity and confidentiality of the policy enforcement process. We present the access control protocol, the system architecture and discuss future extensions.},
	booktitle = {2017 {IEEE} 37th {International} {Conference} on {Distributed} {Computing} {Systems} ({ICDCS})},
	author = {Alansari, Shorouq and Paci, Federica and Sassone, Vladimiro},
	month = jun,
	year = {2017},
	note = {ISSN: 1063-6927},
	keywords = {identity},
	pages = {2131--2136},
}

@article{hu_styx_2021,
	title = {{STYX}: {A} {Hierarchical} {Key} {Management} {System} for {Elastic} {Content} {Delivery} {Networks} on {Public} {Clouds}},
	volume = {18},
	issn = {1941-0018},
	doi = {10.1109/TDSC.2019.2918278},
	abstract = {Hosting content delivery networks (CDNs) on clouds has the potential to improve the performance as resources and caches can be placed closer to subscribers. However, avoiding data leakage over an untrusted public cloud is critical, especially for sensitive data such as the SSL private key. The popular Keyless SSL solution allows content owners to retain on-premise custody of SSL private keys on their own key servers, but this solution likely causes performance bottlenecks and impedes the elasticity of CDNs. This paper describes a novel key management system, named STYX, for transmitting trusted data over untrusted channels and storing them on untrusted platforms. STYX accomplishes secure key provisioning for CDN scale-out and the key is securely protected with full revocation rights for CDN scale-in. STYX is implemented as a three-phase hierarchical key management scheme by leveraging Intel Software Guard Extensions (SGX) and QuickAssist Technology (QAT). Furthermore, STYX supports CDN services by integrating Nginx as the SSL termination proxy and the popular Redis/Memcached/Apache as backend caching engines. The performance evaluation shows that STYX significantly outperforms the native HTTPS servers on the CDN node due to QAT acceleration, providing up to a 5× enhancement in throughput and a 50 percent reduction in latency.},
	number = {2},
	journal = {IEEE Transactions on Dependable and Secure Computing},
	author = {Hu, XiaoKang and Li, Jian and Wei, Changzheng and Li, Weigang and Zeng, Xin and Yu, Ping and Guan, Haibing},
	month = mar,
	year = {2021},
	pages = {843--857},
}

@inproceedings{lambert_maskal_2018,
	title = {{MaskAl}: {Privacy} {Preserving} {Masked} {Reads} {Alignment} using {Intel} {SGX}},
	doi = {10.1109/SRDS.2018.00022},
	abstract = {The recent introduction of new DNA sequencing techniques caused the amount of processed and stored biological data to skyrocket. In order to process these vast amounts of data, bio-centers have been tempted to use low-cost public clouds. However, genomes are privacy sensitive, since they store personal information about their donors, such as their identity, disease risks, heredity and ethnic origin. The first critical DNA processing step that can be executed in a cloud, i.e., read alignment, consists in finding the location of the DNA sequences produced by a sequencing machine in the human genome. While recent developments aim at increasing performance, only few approaches address the need for fast and privacy preserving read alignment methods. This paper introduces MaskAl, a novel approach for read alignment. MaskAl combines a fast preprocessing step on raw genomic data - filtering and masking - with established algorithms to align sanitized reads, from which sensitive parts have been masked out, and refines the alignment score using the masked out information with Intel's software guard extensions (SGX). MaskAl is a highly competitive privacy-preserving read alignment software that can be massively parallelized with public clouds and emerging enclave clouds. Finally, MaskAl is nearly as accurate as plain-text approaches (more than 96\% of aligned reads with MaskAl compared to 98\% with BWA) and can process alignment workloads 87\% faster than current privacy-preserving approaches while using less memory and network bandwidth.},
	booktitle = {2018 {IEEE} 37th {Symposium} on {Reliable} {Distributed} {Systems} ({SRDS})},
	author = {Lambert, Christoph and Fernandes, Maria and Decouchant, Jérémie and Esteves-Verissimo, Paulo},
	month = oct,
	year = {2018},
	note = {ISSN: 2575-8462},
	pages = {113--122},
}

@inproceedings{zhou_enclyzer_2022,
	title = {{ENCLYZER}: {Automated} {Analysis} of {Transient} {Data} {Leaks} on {Intel} {SGX}},
	doi = {10.1109/SEED55351.2022.00020},
	abstract = {Trusted Execution Environment (TEE) is the cornerstone of confidential computing. Among other TEEs, Intel® Secure Guard Extensions (Intel® SGX) is the most prominent solution that is frequently used in the public cloud to provide confidential computing services. Intel® SGX promotes runtime confidentiality and integrity of enclaves with minimal modifications to existing CPU microarchitectures. However, Transient Execution Attacks, such as L1 Terminal Fault (L1TF), Microarchitectural Data Sampling (MDS), and Transactional Asynchronous Abort (TAA) have exposed certain vulnerabilities within Intel® SGX solution. Over the past few years, Intel has developed various countermeasures against most of these vulnerabilities via microcode updates and hardware fixes. However, arguably, there are no existing tools nor studies that can measurably verify the effectiveness of these countermeasures. In this paper, we introduce an automated analysis tool, called ENCLYZER, to evaluate Transient Execution Vulnerabilities on Intel® SGX. We leverage ENCLYZER to comprehensively analyze a set of processors, with multiple versions of their microcode, to verify the correctness of these countermeasures. Our empirical analysis suggests that most countermeasures are effective in preventing attacks that are initiated from the same CPU hyperthread, but less effective for cross-thread attacks. Therefore, the application of the latest microcode patches and disabling hyperthreading is warranted to enhance the security of Intel® SGX-enabled systems. Security Configurations like hyperthreading disabled/enabled are attestable on Intel® SGX platform to provide user with increased confidence in making decision on system trustworthiness. Note that the Security Configurations cannot be modified without a system reboot.},
	booktitle = {2022 {IEEE} {International} {Symposium} on {Secure} and {Private} {Execution} {Environment} {Design} ({SEED})},
	author = {Zhou, Jiuqin and Xiao, Yuan and Teodorescu, Radu and Zhang, Yinqian},
	month = sep,
	year = {2022},
	pages = {145--156},
}

@inproceedings{tahir_using_2018,
	title = {Using {SGX}-{Based} {Virtual} {Clones} for {IoT} {Security}},
	doi = {10.1109/NCA.2018.8548065},
	abstract = {Widespread permeation of IoT devices into our daily lives has created a diverse spectrum of security and privacy concerns unique to the IoT ecosystem. Conventional host and network security mechanisms fail to address these issues due to resource constraints, ad-hoc network models and vendor-centric data collection and sharing policies. Hence, there is a need to redesign the IoT infrastructure to secure both the device and the data. To this end, we propose a design where users are in the driving seat, devices are less exposed and data sharing models are flexible and fine-grained. Our proposal comprises hardware-secured data banks based on Intel Software Guard Extensions (SGX) to house the data in clouds without the need to trust the cloud provider. Virtual clones (shadows) of devices running on top of these data banks serve as competent proxies of actual IoT devices hiding away device weaknesses. The proposed infrastructure is scalable and robust and serves as a good first step for the community to build on and improve.},
	booktitle = {2018 {IEEE} 17th {International} {Symposium} on {Network} {Computing} and {Applications} ({NCA})},
	author = {Tahir, Rashid and Raza, Ali and Zaffar, Fareed and Ghani, Faizan Ul and Zulfiqar, Mubeen},
	month = nov,
	year = {2018},
	pages = {1--4},
}

@inproceedings{falcao_supporting_2022,
	title = {Supporting {Confidential} {Workloads} in {SPIRE}},
	doi = {10.1109/CloudCom55334.2022.00035},
	abstract = {The migration of traditional deployment to clouds has driven the need for a more robust security model, the Zero-Trust model. The application of zero-trust principles addresses known security issues such as lateral movement attacks but adds extra identity management complexity. In addition, to cover a broader range of attacks, one must think of strategies to protect data, code, and credentials in such applications. Confidential computing aims to fulfill this goal. Nevertheless, confidential computing is even more complex to implement than Zero-Trust. In this work, we combine the Zero-Trust model with confidential computing by leveraging the SPIFFE standard through its reference implementation (SPIRE), and Intel SGX through the SCONE framework, to seamlessly supply software identities to confidential microservices. Furthermore, we also protected the whole identity-provisioning stack with Intel SGX and assessed the performance overhead. We believe this combination not only improves the security of SPIFFE deployments but also leverages SPIFFE to facilitate the integration between confidential computing components and native applications.},
	booktitle = {2022 {IEEE} {International} {Conference} on {Cloud} {Computing} {Technology} and {Science} ({CloudCom})},
	author = {Falcão, Eduardo and Silva, Matteus and Luz, Ariel and Brito, Andrey},
	month = dec,
	year = {2022},
	note = {ISSN: 2330-2186},
	keywords = {identity},
	pages = {186--193},
}

@inproceedings{soriente_replicatee_2019,
	title = {{ReplicaTEE}: {Enabling} {Seamless} {Replication} of {SGX} {Enclaves} in the {Cloud}},
	doi = {10.1109/EuroSP.2019.00021},
	abstract = {With the proliferation of Trusted Execution Environments (TEEs) such as Intel SGX, a number of cloud providers will soon introduce TEE capabilities within their offering (e.g., Microsoft Azure). The integration of SGX within the cloud considerably strengthens the threat model for cloud applications. However, cloud deployments depend on the ability of the cloud operator to add and remove application dynamically; this is no longer possible given the current model to deploy and provision enclaves that actively involves the application owner. In this paper, we propose ReplicaTEE, a solution that enables seamless commissioning and decommissioning of TEE-based applications in the cloud. ReplicaTEE leverages an SGX-based provisioning service that interfaces with a Byzantine Fault-Tolerant storage service to securely orchestrate enclave replication in the cloud, without the active intervention of the application owner. Namely, in ReplicaTEE, the application owner entrusts application secret to the provisioning service; the latter handles all enclave commissioning and decommissioning operations throughout the application lifetime. We analyze the security of ReplicaTEE and show that it is secure against attacks by a powerful adversary that can compromise a large fraction of the cloud infrastructure. We implement a prototype of ReplicaTEE in a realistic cloud environment and evaluate its performance. ReplicaTEE moderately increments the TCB by approximately 800 LoC. Our evaluation shows that ReplicaTEE does not add significant overhead to existing SGX-based applications.},
	booktitle = {2019 {IEEE} {European} {Symposium} on {Security} and {Privacy} ({EuroS}\&{P})},
	author = {Soriente, Claudio and Karame, Ghassan and Li, Wenting and Fedorov, Sergey},
	month = jun,
	year = {2019},
	pages = {158--171},
}

@article{wang_enabling_2018,
	title = {Enabling {Security}-{Enhanced} {Attestation} {With} {Intel} {SGX} for {Remote} {Terminal} and {IoT}},
	volume = {37},
	issn = {1937-4151},
	doi = {10.1109/TCAD.2017.2750067},
	abstract = {Along with the advent and popularity of cloud computing, Internet of Things, and bring your own device, the trust requirement for terminal devices has increased significantly. An untrusted terminal, a terminal that runs in an untrustworthy execution environment, may cause serious security issues for enterprise networks. With the release of Software Guard Extension, Intel has provided a promising way to construct trusted terminals and services. Utilizing this technology, we propose a security-enhanced attestation for remote terminals, which can achieve shielded execution for measurements and attestation programs. Furthermore, we present a policy-based measurement mechanism where sensitive data, including secret keys and policy details are concealed using the enclave-specific keys. We implement our attestation prototype on real platform with Intel Skylake processor. Evaluation results show that our attestation system can provide much stronger security guarantees, yet incurs small performance overhead.},
	number = {1},
	journal = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
	author = {Wang, Juan and Hong, Zhi and Zhang, Yuhan and Jin, Yier},
	month = jan,
	year = {2018},
	pages = {88--96},
}

@inproceedings{will_intel_2021,
	title = {Intel {Software} {Guard} {Extensions} in {Internet} of {Things} {Scenarios}: {A} {Systematic} {Mapping} {Study}},
	doi = {10.1109/FiCloud49777.2021.00056},
	abstract = {Due to the Internet of Things (IoT) devices' processing and memory constraints, the processing and analysis of data acquired by such devices are generally performed in a fog or cloud environment, which offers more processing power. When delegating data processing to third parties, it is necessary to ensure their confidentiality and their owners' privacy, which can be achieved using a Trusted Execution Environment, such as Intel SGX. In this paper, we present a systematic mapping study to review recent works related to the use of Intel SGX architecture in IoT scenarios. We conduct the study by selecting 35 papers published between 2017 and 2020 and providing a comprehensive overview of the application scenarios and solutions when combining Intel SGX and the IoT paradigm.},
	booktitle = {2021 8th {International} {Conference} on {Future} {Internet} of {Things} and {Cloud} ({FiCloud})},
	author = {Will, Newton Carlos and Gomes Valadares, Dalton Cézane and De Souza Santos, Danilo Freire and Perkusich, Angelo},
	month = aug,
	year = {2021},
	pages = {342--349},
}

@inproceedings{valadares_achieving_2018,
	title = {Achieving {Data} {Dissemination} with {Security} using {FIWARE} and {Intel} {Software} {Guard} {Extensions} ({SGX})},
	doi = {10.1109/ISCC.2018.8538590},
	abstract = {The Internet of Things (IoT) field has gained much attention from industry and academia, being the main subject for numerous research and development projects. Frequently, the dense amount of generated data from IoT applications is sent to a cloud service, that is responsible for processing and storage. Many of these applications demand security and privacy for their data because of their sensitive nature. This is specially true when such data must be processed in entities hosted in public clouds, where the environment in which applications run may not be trusted. Some concerns are then raised since it is not trivial to provide the needed protection for these sensitive data. We present a solution that considers the security components of FIWARE and the Intel SGX capabilities. FIWARE is a platform created to support the development of Smart Applications, including IoT systems, and SGX is the Intel solution for Trusted Execution Environment (TEE). We propose a new component for key management that, together with other FIWARE components, can be used to provide privacy, confidentiality, and integrity guarantees for IoT data. A case study illustrates how this proposed solution can be employed in a realistic scenario, which allows the dissemination of sensitive data through public clouds without risking privacy issues. The results of the experiments provide evidence that our approach does not harm scalability or availability of the system. In addition, it presents acceptable memory costs when considering the benefit of the privacy guarantees achieved.},
	booktitle = {2018 {IEEE} {Symposium} on {Computers} and {Communications} ({ISCC})},
	author = {Valadares, Dalton Cézane Gomes and da Silva, Matteus Sthefano Leite and Brito, Andrey Elísio Monteiro and Salvador, Ewerton Monteiro},
	month = jun,
	year = {2018},
	note = {ISSN: 1530-1346},
	pages = {1--7},
}

@inproceedings{zhang_sgxpy_2019,
	title = {{SGXPy}: {Protecting} {Integrity} of {Python} {Applications} with {Intel} {SGX}},
	doi = {10.1109/APSEC48747.2019.00063},
	abstract = {Python is the programming language of choice for many data scientists, and thus widely used in cloud computing platforms. Untrusted cloud environments have imposed challenges to the security of Python applications. Intel SGX (Intel Software Guard eXtensions) provides an encrypted enclave for securing applications, and a library OS technology can be adopted to run legacy applications inside these enclaves. However, this technology has some limitations: (i) It is difficult to ensure the integrity of Python applications as a result of the complex dependencies among modules. (ii) Python applications often spawn new processes, and file access permissions need to be handled separately in the parent-child process. To address these limitations, we present SGXPy (SGX Python), an integrity preserving tool for Python applications. The design of SGXPy makes it possible to obtain dependencies of applications and assign file access permissions among processes automatically: (i) During the build stage, SGXPy constructs dependency manifests of Python applications based on the ptrace mechanism. (ii) To enhance access control among processes, SGXPy utilizes process introspection to cascading manifests for each process. With the proposed framework, sophisticated Python applications such as NumPy and a web server can now run unmodified with the library OS. We present a series of experiments to evaluate performance overheads of Python applications in SGX. Our evaluation of NumPy submodules shows SGXPy can pass 97.60\% of unit testing, even with the isolated environment and limited memory of SGX.},
	booktitle = {2019 26th {Asia}-{Pacific} {Software} {Engineering} {Conference} ({APSEC})},
	author = {Zhang, Denghui and Wang, Guosai and Xu, Wei and Gao, Kevin},
	month = dec,
	year = {2019},
	note = {ISSN: 2640-0715},
	pages = {418--425},
}

@inproceedings{xia_sgx-fpga_2021,
	title = {{SGX}-{FPGA}: {Trusted} {Execution} {Environment} for {CPU}-{FPGA} {Heterogeneous} {Architecture}},
	doi = {10.1109/DAC18074.2021.9586207},
	abstract = {Trusted execution environments (TEEs), such as Intel SGX, have become a popular security primitive with minimum trusted computing base (TCB) and attack surface. However, the existing CPU-based TEEs do not support FPGAs, even though FPGA-based cloud computing services have been rapidly deployed with security vulnerabilities that are expected to be eliminated by TEEs. To fill the gap, we present SGX-FPGA, a trusted hardware isolation path enabling the first FPGA TEE by bridging SGX enclaves and FPGAs in the heterogeneous CPU-FPGA architecture. Our experiments on real CPU-FPGA hardware justify the high security and low performance overhead achieved by SGX-FPGA.},
	booktitle = {2021 58th {ACM}/{IEEE} {Design} {Automation} {Conference} ({DAC})},
	author = {Xia, Ke and Luo, Yukui and Xu, Xiaolin and Wei, Sheng},
	month = dec,
	year = {2021},
	note = {ISSN: 0738-100X},
	pages = {301--306},
}

@inproceedings{yoon_comparative_2022,
	title = {Comparative {Analysis} of {Forward} and {Backward} {Private} {Searchable} {Encryption} using {SGX}},
	doi = {10.1109/ICTC55196.2022.9952670},
	abstract = {Dynamic searchable encryption (DSE) schemes enable users to search over encrypted data that are outsourced to untrusted cloud servers with the support of data dynamics such as addition and deletion. Although software-based DSE schemes have been developed to improve security and functionality, many of them still has limitations in terms of efficiency and information leakage. In order to overcome such issues, DSE schemes leveraging trusted execution environment (TEE) such as Intel SGX have been introduced. In this paper, we investigate the existing SGX-based dynamic searchable encryption schemes and conduct a comparative analysis of them. Based on the analysis result, we discuss the challenges and open problems in the literature. and future research directions.},
	booktitle = {2022 13th {International} {Conference} on {Information} and {Communication} {Technology} {Convergence} ({ICTC})},
	author = {Yoon, Hyundo and Hur, Junbeom},
	month = oct,
	year = {2022},
	note = {ISSN: 2162-1241},
	pages = {1846--1848},
}

@inproceedings{ma_proactive_2022,
	title = {A {Proactive} {Defense} {Strategy} {Against} {SGX} {Side}-channel {Attacks} via self-checking {DRL} in the {Cloud}},
	doi = {10.1109/ICC45855.2022.9838400},
	abstract = {Intel software guard extensions (SGX) technology allows cloud vendors to provide customers with an independent and trusted execution environment (TEE). It protects critical data confidentiality and integrity from malicious software. However, more and more SGX side-channel attacks have appeared, which seriously undermine the confidence of tenants in cloud security. The related research focuses on system hardware and SGX compiler solutions for specific attacks, which also has difficulties in deployment. Differently, we propose an intelligent-driven proactive defense strategy, which is based on live migration. To the best of our knowledge, this is the first proactive defense against SGX side-channel attacks. We adopt the Markov decision process to solve the migration programming problem. The innovative deep reinforcement learning (DRL) solves problems of the unknown state transition probability and large machine load states, which is called self-checking proximal policy optimization (SPPO). It changes the reward pattern, improving the convergence speed and stability of DRL. In prototype experiments, we deploy the strategy in the OpenStack platform agilely to prove the defense performance and low virtual machine costs.},
	booktitle = {{ICC} 2022 - {IEEE} {International} {Conference} on {Communications}},
	author = {Ma, Tengchao and Xu, Changqiao and An, Qingzhao and Kuang, Xiaohui and Zhong, Lujie and Grieco, Luigi Alfredo},
	month = may,
	year = {2022},
	note = {ISSN: 1938-1883},
	pages = {4174--4179},
}

@inproceedings{hong_sdvisor_2019,
	title = {{SDVisor}: {Secure} {Debug} {Enclave} with {Hypervisor}},
	doi = {10.1109/SOSE.2019.00036},
	abstract = {Cloud computing is developing rapidly nowadays. The cloud computing infrastructure requires cloud users' complete confidence in cloud administrators. The importance of trust issue increases when come into joint cloud computing situation because substantial trust is necessary not only between customers and providers but also between different providers. Although cloud users may expect to keep their code and data to be secret, it is indeed difficult to promise. Various trusted executing environments are widely used to provide security guarantees to cloud computing. Among these Intel's Security Guard Extension (SGX) is now a common choice to protect sensitive code and data. SGX provide hardware supports to protect memory inside enclaves. However, the production mode SGX enclaves with full protection available can not be launched without a production license from Intel, while the free non-production enclaves are under the risk of leaking sensitive data to malicious privileged parties. To address this problem, we introduce SDVisor, a system aiming to achieve the security guarantees of Intel's SGX on enclaves without availability of production license. SDVisor provides a lightweight hypervisor which extends the SGX's safeguard policy to ensure the confidentiality and integrity of non-production enclaves. The enclaves are then named secure debug enclaves. SDVisor is also compatible with normal production enclaves so that production mode SGX-enabled applications can be executed originally as well. SDVisor leverages hardware virtualization to protect these secure debug enclaves so it maintains good performance.},
	booktitle = {2019 {IEEE} {International} {Conference} on {Service}-{Oriented} {System} {Engineering} ({SOSE})},
	author = {Hong, Zhen and Li, Zinan and Xia, Yubin},
	month = apr,
	year = {2019},
	note = {ISSN: 2642-6587},
	pages = {209--2095},
}

@article{wang_cfhider_2022,
	title = {{CFHider}: {Protecting} {Control} {Flow} {Confidentiality} {With} {Intel} {SGX}},
	volume = {71},
	issn = {1557-9956},
	doi = {10.1109/TC.2021.3122903},
	abstract = {Program control flow reflects the algorithm of that program and may reveal implementation vulnerabilities. Thus its confidentiality needs to be protected, especially in a cloud setting. However, most existing control flow obfuscation methods are software-based, which cannot offer high confidentiality while maintaining low performance overhead. In this paper, we propose CFHider, a hardware-assisted solution. By performing program transformation and leveraging Trusted Execution Environments (Intel SGX), CFHider moves branch statement conditions to an opaque and trusted memory space during the program execution. We proved that by generating Obfuscation Invariants, CFHider is able to provide provable control flow confidentiality protection. Based on the design of CFHider, we also developed a prototype system for Java applications. Our security analysis and experimental results indicate that CFHider is effective in protecting control flow confidentiality and incurs a much reduced performance overhead than existing software-based solutions (by a factor of 18.1).},
	number = {9},
	journal = {IEEE Transactions on Computers},
	author = {Wang, Yongzhi and Zou, Yu and Shen, Yulong and Liu, Yao},
	month = sep,
	year = {2022},
	pages = {2128--2141},
}

@inproceedings{ozga_triglav_2021,
	title = {{TRIGLAV}: {Remote} {Attestation} of the {Virtual} {Machine}'s {Runtime} {Integrity} in {Public} {Clouds}},
	doi = {10.1109/CLOUD53861.2021.00013},
	abstract = {Trust is of paramount concern for tenants to deploy their security-sensitive services in the cloud. The integrity of virtual machines (VMs) in which these services are deployed needs to be ensured even in the presence of powerful adversaries with administrative access to the cloud. Traditional approaches for solving this challenge leverage trusted computing techniques, e.g., vTPM, or hardware CPU extensions, e.g., AMD SEV. But, they are vulnerable to powerful adversaries, or they provide only load time (not runtime) integrity measurements of VMs. We propose TRIGLAV, a protocol allowing tenants to establish and maintain trust in VM runtime integrity of software and its configuration. TRIGLAV is transparent to the VM configuration and setup. It performs an implicit attestation of VMs during a secure login and binds the VM integrity state with the secure connection. Our prototype's evaluation shows that TRIGLAV is practical and incurs low performance overhead ({\textless} 6\%).},
	booktitle = {2021 {IEEE} 14th {International} {Conference} on {Cloud} {Computing} ({CLOUD})},
	author = {Ozga, Wojciech and Le Quoc, Do and Fetzer, Christof},
	month = sep,
	year = {2021},
	note = {ISSN: 2159-6190},
	pages = {1--12},
}

@inproceedings{morbitzer_guarantee_2023,
	title = {{GuaranTEE}: {Introducing} {Control}-{Flow} {Attestation} for {Trusted} {Execution} {Environments}},
	doi = {10.1109/CLOUD60044.2023.00073},
	abstract = {Many cloud providers offer Trusted Execution Environments (TEEs) to protect critical data and processes from high privileged adversaries. Unfortunately, TEEs can only be attested at launch. To also enable attestation during run-time, we present GuaranTEE. GuaranTEE uses control-flow attestation to ensure the integrity of a service running within a TEE. To protect the attesting code from a potentially compromised service, we place it in a separate TEE. Additionally, the TEEs guard both the service and the attestation from malicious cloud providers. To reduce the overhead resulting from the use of two TEEs, we securely cache collected information and perform the attestation in parallel to executing the service. The detailed performance evaluation of our prototype based on Intel SGX in Microsoft Azure demonstrates that GuaranTEE provides a practical solution for cloud users focused on protecting the integrity of their data and processes at run-time.},
	booktitle = {2023 {IEEE} 16th {International} {Conference} on {Cloud} {Computing} ({CLOUD})},
	author = {Morbitzer, Mathias and Kopf, Benedikt and Zieris, Philipp},
	month = jul,
	year = {2023},
	note = {ISSN: 2159-6190},
	pages = {547--553},
}

@inproceedings{chalkiadakis_million_2020,
	title = {The {Million} {Dollar} {Handshake}: {Secure} and {Attested} {Communications} in the {Cloud}},
	doi = {10.1109/CLOUD49709.2020.00022},
	abstract = {The number of applications and services that are hosted on cloud platforms is constantly increasing. Nowadays, more and more applications are hosted as services on cloud platforms, co-existing with other services in a mutually untrusted environment. Facilities such as virtual machines, containers and encrypted communication channels aim to offer isolation between the various applications and protect sensitive user data. However, such techniques are not always able to provide a secure execution environment for sensitive applications nor they offer guarantees that data are not monitored by an honest but curious provider once they reach the cloud infrastructure. The recent advancements of trusted execution environments within commodity processors, such as Intel SGX, provide a secure reverse sandbox, where code and data are isolated even from the underlying operating system. Moreover, Intel SGX provides a remote attestation mechanism, allowing the communicating parties to verify their identity as well as prove that code is executed on hardware-assisted software enclaves. Many approaches try to ensure code and data integrity, as well as enforce channel encryption schemes such as TLS, however, these techniques are not enough to achieve complete isolation and secure communications without hardware assistance or are not efficient in terms of performance. In this work, we design and implement a practical attestation system that allows the service provider to offer a seamless attestation service between the hosted applications and the end clients. Furthermore, we implement a novel caching system that is capable to eliminate the latencies introduced by the remote attestation process. Our approach allows the parties to attest one another before each communication attempt, with improved performance when compared to a standard TLS handshake.},
	booktitle = {2020 {IEEE} 13th {International} {Conference} on {Cloud} {Computing} ({CLOUD})},
	author = {Chalkiadakis, Nikolaos and Deyannis, Dimitris and Karnikis, Dimitris and Vasiliadis, Giorgos and Ioannidis, Sotiris},
	month = oct,
	year = {2020},
	note = {ISSN: 2159-6190},
	keywords = {identity},
	pages = {63--70},
}

@inproceedings{correia_safeguarding_2020,
	title = {Safeguarding {Data} {Consistency} at the {Edge}},
	doi = {10.1109/DSN-S50200.2020.00035},
	abstract = {We propose to design and implement a secure edge storage system. Edge computing is a paradigm that extends cloud computing with storage and processing capacity close to the edge of the network, supporting new applications that require low latency. It assumes the availability of fog nodes that are located close to the edge. However, fog nodes are likely to be vulnerable to tampering. A malicious fog node can manipulate, create or delete data from edge applications, leading this application into a fail state, impacting the quality of service. Therefore, it is important to secure the functions fog nodes provide. To achieve our goal we plan to leverage the use of secure hardware (e.g., Intel SGX) as a means to harden the implementation. However, as we discuss here, SGX alone is not enough to achieve the qualities we consider necessary to support edge applications, such as low latency, scalability, and multiple models of data consistency. In this work, we present the main challenges in the design of a secure edge storage system and point to the research directions that we plan to follow to address these challenges.},
	booktitle = {2020 50th {Annual} {IEEE}-{IFIP} {International} {Conference} on {Dependable} {Systems} and {Networks}-{Supplemental} {Volume} ({DSN}-{S})},
	author = {Correia, Cláudio},
	month = jun,
	year = {2020},
	pages = {65--66},
}

@inproceedings{zou_enforcing_2020,
	title = {Enforcing {Control} {Flow} {Confidentiality} with {SGX}},
	doi = {10.1109/INFOCOMWKSHPS50562.2020.9163010},
	abstract = {When a program is executed on a untrusted cloud, the confidentiality of the program logic and related control flow variables should be protected. To obtain this goal, control flow obfuscation can be used. However, previous work has not been effective in terms of performance overhead and security. In this paper, we propose E-CFHider, a hardware-based method to protect the confidentiality of logics and variables involved in control flow. By using the Intel SGX technology and program transformation, we store the control flow variables and execute statements related to those variables in the trusted execution environment, i.e., the SGX enclave. We found this method can better protect the confidentiality of control flow and achieve acceptable performance overhead.},
	booktitle = {{IEEE} {INFOCOM} 2020 - {IEEE} {Conference} on {Computer} {Communications} {Workshops} ({INFOCOM} {WKSHPS})},
	author = {Zou, Yu and Wang, Yongzhi and Zhang, Xiaoyu},
	month = jul,
	year = {2020},
	pages = {1352--1353},
}

@inproceedings{rajamani_keynote_2016,
	title = {Keynote talk {III}: {Trusted} cloud: {How} to make the cloud more secure},
	doi = {10.1109/MEMCOD.2016.7797757},
	abstract = {Cloud computing is growing because of cost advantages and convenience it offers to customers. However, security and privacy continue to be major concerns. We wish to guard against a powerful adversary who can compromise the CloudOS, and uses all privileges of the CloudOS to compromise the integrity and confidentiality of user applications. Secure hardware and/or small trusted hypervisors are the main weapons in our arsenal to guard against such powerful adversaries. Secure hardware (such as Intel SGX) enables user mode applications to package code and data into regions that are isolated from all other software running on the machine. Isolated regions can also be implemented with a small trusted hypervisor. However, it is an open research question as to how entire cloud services can be built using trusted hardware as a primitive, while maintaining a small TCB, providing good performance and end-to-end security guarantees. The Trusted Cloud project at Microsoft Research explores ways to answer this question, and it builds on techniques spanning hardware, OS, compilers and verification tools. In this talk, I will describe our efforts on architecting trusted and more secure cloud services using these principles.},
	booktitle = {2016 {ACM}/{IEEE} {International} {Conference} on {Formal} {Methods} and {Models} for {System} {Design} ({MEMOCODE})},
	author = {Rajamani, Sriram},
	month = nov,
	year = {2016},
	pages = {132--132},
}

@article{bakas_cloud_2020,
	title = {The {Cloud} we {Share}: {Access} {Control} on {Symmetrically} {Encrypted} {Data} in {Untrusted} {Clouds}},
	volume = {8},
	issn = {2169-3536},
	doi = {10.1109/ACCESS.2020.3038838},
	abstract = {Along with the rapid growth of cloud environments, rises the problem of secure data storage-a problem that both businesses and end-users take into consideration before moving their data online. Recently, a lot of solutions have been proposed based either on Symmetric Searchable Encryption (SSE) or Attribute-Based Encryption (ABE). SSE is an encryption technique that offers security against both internal and external attacks. However, since in an SSE scheme, a single key is used to encrypt everything, revoking a user would imply downloading the entire encrypted database and re-encrypt it with a fresh key. On the other hand, in an ABE scheme, the problem of revocation can be addressed. Unfortunately, though, the proposed solutions are based on the properties of the underlying ABE scheme and hence, the revocation costs grow along with the complexity of the policies. To this end, we use these two cryptographic techniques that squarely fit cloud-based environments to design a hybrid encryption scheme based on ABE and SSE in such a way that we utilize the best out of both of them. Moreover, we exploit the functionalities offered by Intel's SGX to design a revocation mechanism and an access control one, that are agnostic to the cryptographic primitives used in our construction.},
	journal = {IEEE Access},
	author = {Bakas, Alexandros and Dang, Hai-Van and Michalas, Antonis and Zalitko, Alexandr},
	year = {2020},
	pages = {210462--210477},
}

@inproceedings{alder_migrating_2018,
	title = {Migrating {SGX} {Enclaves} with {Persistent} {State}},
	doi = {10.1109/DSN.2018.00031},
	abstract = {Hardware-supported security mechanisms like Intel Software Guard Extensions (SGX) provide strong security guarantees, which are particularly relevant in cloud settings. However, their reliance on physical hardware conflicts with cloud practices, like migration of VMs between physical platforms. For instance, the SGX trusted execution environment (enclave) is bound to a single physical CPU. Although prior work has proposed an effective mechanism to migrate an enclave's data memory, it overlooks the migration of persistent state, including sealed data and monotonic counters; the former risks data loss whilst the latter undermines the SGX security guarantees. We show how this can be exploited to mount attacks, and then propose an improved enclave migration approach guaranteeing the consistency of persistent state. Our software-only approach enables migratable sealed data and monotonic counters, maintains all SGX security guarantees, minimizes developer effort, and incurs negligible performance overhead.},
	booktitle = {2018 48th {Annual} {IEEE}/{IFIP} {International} {Conference} on {Dependable} {Systems} and {Networks} ({DSN})},
	author = {Alder, Fritz and Kurnikov, Arseny and Paverd, Andrew and Asokan, N.},
	month = jun,
	year = {2018},
	note = {ISSN: 2158-3927},
	pages = {195--206},
}

@article{rosero-montalvo_survey_2023,
	title = {A {Survey} of {Trusted} {Computing} {Solutions} {Using} {FPGAs}},
	volume = {11},
	issn = {2169-3536},
	doi = {10.1109/ACCESS.2023.3261802},
	abstract = {Ensuring the security and privacy of computation and data management in the cloud and edge is an ever-important requirement. There are several working solutions today for trusted computing with general purpose processors, for instance, Intel SGX and ARM TrustZone. However, with the widespread commercial adoption of specialized hardware accelerators in the cloud and at the edge, most importantly FPGAs, two questions emerge: 1) How secure are they against threats? and 2) How could FPGAs be utilized for more efficient trusted computing? In this survey, we investigate these two questions precisely. Even though there have been numerous surveys in the past on the security of FPGAs, we believe it is timely to study the space of related work again, given the large number of data-centric applications aimed at targeting trusted execution environments that have recently appeared. Therefore, in addition to presenting an overview of state of the art, we also highlight some opportunities for FPGAs in the context of providing efficient trusted computation.},
	journal = {IEEE Access},
	author = {Rosero-Montalvo, Paul D. and István, Zsolt and Hernandez, Wilmar},
	year = {2023},
	pages = {31583--31593},
}

@article{gu_enclavisor_2021,
	title = {Enclavisor: {A} {Hardware}-{Software} {Co}-{Design} for {Enclaves} on {Untrusted} {Cloud}},
	volume = {70},
	issn = {1557-9956},
	doi = {10.1109/TC.2020.3019704},
	abstract = {The releases of Intel SGX and AMD SEV mark the transition of hardware-based enclaves from research prototypes to mainstream products. These two paradigms of secure enclaves are attractive to both the cloud providers and tenants, since security is one of the key pillars of cloud computing. However, it is found that current hardware-defined enclaves are not flexible and efficient enough for the cloud. For example, although SGX can provide strong memory protection with both confidentiality and integrity, the size of secure memory is tightly restricted. On the contrary, SEV enables enclaves to use more memory but has critical security flaws due to no memory integrity protection. Meanwhile, both types of enclaves have relatively long booting latency, which makes them not suitable for short-term tasks like serverless workloads. After an in-depth analysis, we find that there are some intrinsic tradeoffs between security and performance due to the limitation of architectural designs. In this article, we investigate a novel hardware-software co-design of enclaves to meet the requirements of cloud by placing a part of the logic of the enclave mechanism into a lightweight software layer, named Enclavisor, to achieve a balance between security, performance, and flexibility. Specifically, our implementation is based on AMD's SEV and, Enclavisor is placed in the guest kernel mode of SEV's secure virtual machines. Enclavisor inherently supports memory encryption with no memory limitation and also achieves efficient booting, multiple enclave granularities, and post-launch remote attestation. Meanwhile, we also propose hardware/software solutions to mitigate the security flaws caused by the lack of memory integrity. We implement a prototype of Enclavisor on an AMD SEV server. The experiments on both micro-benchmarks and application benchmarks show that enclaves on Enclavisor can have close-to-native performance.},
	number = {10},
	journal = {IEEE Transactions on Computers},
	author = {Gu, Jinyu and Wu, Xinyue and Zhu, Bojun and Xia, Yubin and Zang, Binyu and Guan, Haibing and Chen, Haibo},
	month = oct,
	year = {2021},
	pages = {1598--1611},
}

@article{correia_omega_2022,
	title = {Omega: {A} {Secure} {Event} {Ordering} {Service} for the {Edge}},
	volume = {19},
	issn = {1941-0018},
	doi = {10.1109/TDSC.2021.3078520},
	abstract = {The edge computing paradigm extends cloud computing with storage and processing capacity close to the edge of the network, which can be materialized by using many fog nodes placed in multiple geographic locations. Fog nodes are likely to be vulnerable to tampering, so it is important to protect the functions they provide from attacks. A key building block of many distributed applications is an ordering service that keeps track of cause-effect dependencies among events and that allows events to be processed in an order that respects causality. This article presents the design and implementation of a secure event ordering service for fog nodes. Our service, named Omega, leverages the availability of a Trusted Execution Environment (TEE), based on SGX technology, to offer fog clients guarantees regarding the order in which events are applied and served, even when fog nodes are compromised. We have also built OmegaKV, a key-value store that uses Omega to offer causal consistency. Experimental results show that the ordering service can be secured without violating the latency constraints of time-sensitive edge applications, despite the overhead associated with using a TEE. Omega introduces an additional latency of approximately 4ms, that contrary to cloud based solutions, allows latency values in the 5ms-30ms range, as required by time-sensitive edge applications.},
	number = {5},
	journal = {IEEE Transactions on Dependable and Secure Computing},
	author = {Correia, Cláudio and Correia, Miguel and Rodrigues, Luís},
	month = sep,
	year = {2022},
	pages = {2952--2964},
}

@article{liu_privacy-preserving_2023,
	title = {A {Privacy}-{Preserving} {Outsourcing} {Computing} {Scheme} {Based} on {Secure} {Trusted} {Environment}},
	volume = {11},
	issn = {2168-7161},
	doi = {10.1109/TCC.2022.3201401},
	abstract = {As one of the key technologies to enable the internet of things (IoT), cloud computing plays a significant role in providing huge computing and storage facilities for large-scale data. Though cloud computing brings great advantages, new issues emerge, such as data security breach and privacy disclosure. In this article, we introduce a novel secure and privacy-preserving outsourcing computing scheme (hereafter referred to as SPOCS) to tackle this issue. In SPOCS, the effective use of Intel Software Guard Extensions (SGX), one of the trusted execution environment (TEE), ensures the confidence and integrity of sensitive data in cloud computing and prevents data loss from causing privacy disclosure. In order to keep malicious cloud service providers (CSPs) from illegally tampering with the outsourcing results, blockchain is employed to ensure the data immutability. Significantly, our proposed scheme achieves anonymity and traceability. In the outsourcing process, smart contracts are applied to make the whole process fully automated without any human involvement. Finally, the security of the proposed scheme is analyzed in terms of its resistance to different attacks. The experiments indicate that our scheme is effective and efficient.},
	number = {3},
	journal = {IEEE Transactions on Cloud Computing},
	author = {Liu, Zewei and Hu, Chunqiang and Li, Ruinian and Xiang, Tao and Li, Xingwang and Yu, Jiguo and Xia, Hui},
	month = jul,
	year = {2023},
	pages = {2325--2336},
}

@inproceedings{gu_secure_2017,
	title = {Secure {Live} {Migration} of {SGX} {Enclaves} on {Untrusted} {Cloud}},
	doi = {10.1109/DSN.2017.37},
	abstract = {The recent commercial availability of Intel SGX (Software Guard eXtensions) provides a hardware-enabled building block for secure execution of software modules in an untrusted cloud. As an untrusted hypervisor/OS has no access to an enclave's running states, a VM (virtual machine) with enclaves running inside loses the capability of live migration, a key feature of VMs in the cloud. This paper presents the first study on the support for live migration of SGX-capable VMs. We identify the security properties that a secure enclave migration process should meet and propose a software-based solution. We leverage several techniques such as two-phase checkpointing and self-destroy to implement our design on a real SGX machine. Security analysis confirms the security of our proposed design and performance evaluation shows that it incurs negligible performance overhead. Besides, we give suggestions on the future hardware design for supporting transparent enclave migration.},
	booktitle = {2017 47th {Annual} {IEEE}/{IFIP} {International} {Conference} on {Dependable} {Systems} and {Networks} ({DSN})},
	author = {Gu, Jinyu and Hua, Zhichao and Xia, Yubin and Chen, Haibo and Zang, Binyu and Guan, Haibing and Li, Jinming},
	month = jun,
	year = {2017},
	note = {ISSN: 2158-3927},
	pages = {225--236},
}

@article{han_reflat_2023,
	title = {{ReFlat}: {A} {Robust} {Access} {Pattern} {Hiding} {Solution} for {General} {Cloud} {Query} {Processing} {Based} on {K}-{Isomorphism} and {Hardware} {Enclave}},
	volume = {11},
	issn = {2168-7161},
	doi = {10.1109/TCC.2021.3137351},
	abstract = {The access frequency pattern leakage reveals sensitive information over encrypted cloud data, such as query inclinations and interests. Even worse, adversaries can infer the content of storage with the help of auxiliary knowledge. It jeopardizes the mutual trust between the client users and the cloud platform as reported in many cases. In this paper, we study the threats model in which adversaries know both the exact in-memory flow of accessed blocks and the processing boundary of each request. Under these settings, he can precisely observe the access frequency patterns in both aggregated and independent perspectives over queries. We then propose the ReFlat module as a counter solution through the KK-duplication obfuscation mechanism. ReFlat securely runs inside the hardware enclave provided by Intel SGX and requires no modifications on query processors. The KK-duplication mechanism is further optimized with two working functions to practically deal with point and range queries. Comparing with the state-of-the-art schemes using the similar idea, that is, fake query injection, ReFlat eliminates the security risk of involving intermediate proxy and achieves higher robustness under the proposed threat model. We exhibit comparative experiment results showing that ReFlat exceeds existing schemes providing equal security level in multiple system performance metrics.},
	number = {2},
	journal = {IEEE Transactions on Cloud Computing},
	author = {Han, Ziyang and Hu, Haibo and Ye, Qingqing},
	month = apr,
	year = {2023},
	pages = {1474--1486},
}

@inproceedings{wang_cfhider_2019,
	title = {{CFHider}: {Control} {Flow} {Obfuscation} with {Intel} {SGX}},
	doi = {10.1109/INFOCOM.2019.8737444},
	abstract = {When a program is executed on an untrusted cloud, the confidentiality of the program's logics needs to be protected. Control flow obfuscation is a direct approach to obtain this goal. However, existing methods in this direction cannot achieve both high confidentiality and low overhead. In this paper, we propose CFHider, a hardware-assisted method to protect the control flow confidentiality. By combining program transformation and Intel Software Guard Extension (SGX) technology, CFHider moves branch statement conditions to an opaque and trusted memory space, i.e., the enclave, thereby offering a guaranteed control flow confidentiality. Based on the design of CFHider, we developed a prototype system targeting on Java applications. Our analysis and experimental results indicate that CFHider is effective in protecting the control flow confidentiality and incurs a much reduced performance overhead than existing software-based solutions (by a factor of 8.8).},
	booktitle = {{IEEE} {INFOCOM} 2019 - {IEEE} {Conference} on {Computer} {Communications}},
	author = {Wang, Yongzhi and Shen, Yulong and Su, Cuicui and Cheng, Ke and Yang, Yibo and Faree, ANter and Liu, Yao},
	month = apr,
	year = {2019},
	note = {ISSN: 2641-9874},
	pages = {541--549},
}

@article{yao_privacy-preserving_2023,
	title = {Privacy-{Preserving} {Content}-{Based} {Similarity} {Detection} {Over} in-the-{Cloud} {Middleboxes}},
	volume = {11},
	issn = {2168-7161},
	doi = {10.1109/TCC.2022.3169329},
	abstract = {It is increasingly popular for cloud providers to offer middlebox service that supports content-based similarity detection for enterprises. However, redirecting network traffic to the cloud for such service raises security concerns. While trusted execution environments such as Intel SGX have emerged as a pragmatic solution for designing secure in-the-cloud middleboxes, it remains challenging to practically support content-based similarity detection. In this paper, we design a secure in-the-cloud middlebox system that can detect content-based similar flows in encrypted traffic dynamically. To cope with the constrained enclave memory, we adopt the caching technique and devise a compact index to increase the cache hit rate for effective similarity detection inside the enclave. We also present a parallel algorithm for performance speedup, with an efficient enclave thread management mechanism. Extensive evaluations demonstrate that the overhead of our system compared to native processing (without SGX) is limited to 2.1×. Meanwhile, our tailored design can achieve up to 14.4{\textbackslash}times14.4× better computational efficiency compared to simply moving the target functionality to the SGX enclave via existing popular library operating systems like Graphene-SGX and Occlum. Our secure system can achieve a normalized similarity detection precision of about 90\%.},
	number = {2},
	journal = {IEEE Transactions on Cloud Computing},
	author = {Yao, Jing and Meng, Xiangyi and Zheng, Yifeng and Wang, Cong},
	month = apr,
	year = {2023},
	pages = {1854--1870},
}

@inproceedings{nguyen_cloud-based_2016,
	title = {Cloud-{Based} {Secure} {Logger} for {Medical} {Devices}},
	doi = {10.1109/CHASE.2016.48},
	abstract = {A logger in the cloud capable of keeping a secure, time-synchronized and tamper-evident log of medical device and patient information allows efficient forensic analysis in cases of adverse events or attacks on interoperable medical devices. A secure logger as such must meet requirements of confidentiality and integrity of message logs and provide tamper-detection and tamper-evidence. In this paper, we propose a design for such a cloud-based secure logger using the Intel Software Guard Extensions (SGX) and the Trusted Platform Module (TPM). The proposed logger receives medical device information from a dongle attached to a medical device. The logger relies on SGX, TPM and standard encryption to maintain a secure communication channel even on an untrusted network and operating system. We also show that the logger is resilient against different kinds of attacks such as Replay attacks, Injection attacks and Eavesdropping attacks.},
	booktitle = {2016 {IEEE} {First} {International} {Conference} on {Connected} {Health}: {Applications}, {Systems} and {Engineering} {Technologies} ({CHASE})},
	author = {Nguyen, Hung and Acharya, Bipeen and Ivanov, Radoslav and Haeberlen, Andreas and Phan, Linh T. X. and Sokolsky, Oleg and Walker, Jesse and Weimer, James and Hanson, William and Lee, Insup},
	month = jun,
	year = {2016},
	pages = {89--94},
}

@inproceedings{svenningsson_sgx-bundler_2022,
	title = {{SGX}-{Bundler}: speeding up enclave transitions for {IO}-intensive applications},
	doi = {10.1109/CCGrid54584.2022.00036},
	abstract = {Process-based confidential computing enclaves such as Intel SGX can be used to protect the confidentiality and integrity of workloads, without the overhead of virtualisation. However, they introduce a notable performance overhead, especially when it comes to transitions in and out of the enclave context. Such overhead makes the use of enclaves impractical for running IO-intensive applications, such as network packet processing or biological sequence analysis. We build on earlier approaches to improve the IO performance of work-loads in Intel SGX enclaves and propose the SGX-Bundler library, which helps reduce the cost of both individual single enclave transitions well as of the total number of enclave transitions in trusted applications running in Intel SGX enclaves. We describe the implementation of the SGX-Bundler library, evaluate its performance and demonstrate its practicality using the case study of Open vSwitch, a widely used software switch implementation.},
	booktitle = {2022 22nd {IEEE} {International} {Symposium} on {Cluster}, {Cloud} and {Internet} {Computing} ({CCGrid})},
	author = {Svenningsson, Jakob and Paladi, Nicolae and Vahidi, Arash},
	month = may,
	year = {2022},
	pages = {269--278},
}

@inproceedings{contiu_ibbe-sgx_2018,
	title = {{IBBE}-{SGX}: {Cryptographic} {Group} {Access} {Control} {Using} {Trusted} {Execution} {Environments}},
	doi = {10.1109/DSN.2018.00032},
	abstract = {While many cloud storage systems allow users to protect their data by making use of encryption, only few support collaborative editing on that data. A major challenge for enabling such collaboration is the need to enforce cryptographic access control policies in a secure and efficient manner. In this paper, we introduce IBBE-SGX, a new cryptographic access control extension that is efficient both in terms of computation and storage even when processing large and dynamic workloads of membership operations, while at the same time offering zero knowledge guarantees. IBBE-SGX builds upon Identity-Based Broadcasting Encryption (IBBE). We address IBBE's impracticality for cloud deployments by exploiting Intel Software Guard Extensions (SGX) to derive cuts in the computational complexity. Moreover, we propose a group partitioning mechanism such that the computational cost of membership update is bound to a fixed constant partition size rather than the size of the whole group. We have implemented and evaluated our new access control extension. Results highlight that IBBE-SGX performs membership changes 1.2 orders of magnitude faster than the traditional approach of Hybrid Encryption (HE), producing group metadata that are 6 orders of magnitude smaller than HE, while at the same time offering zero knowledge guarantees.},
	booktitle = {2018 48th {Annual} {IEEE}/{IFIP} {International} {Conference} on {Dependable} {Systems} and {Networks} ({DSN})},
	author = {Contiu, Stefan and Pires, Rafael and Vaucher, Sébastien and Pasin, Marcelo and Felber, Pascal and Réveillère, Laurent},
	month = jun,
	year = {2018},
	note = {ISSN: 2158-3927},
	keywords = {identity},
	pages = {207--218},
}

@inproceedings{kelbert_securecloud_2017,
	title = {{SecureCloud}: {Secure} big data processing in untrusted clouds},
	doi = {10.23919/DATE.2017.7926999},
	abstract = {We present the SecureCloud EU Horizon 2020 project, whose goal is to enable new big data applications that use sensitive data in the cloud without compromising data security and privacy. For this, SecureCloud designs and develops a layered architecture that allows for (i) the secure creation and deployment of secure micro-services; (ii) the secure integration of individual micro-services to full-fledged big data applications; and (iii) the secure execution of these applications within untrusted cloud environments. To provide security guarantees, SecureCloud leverages novel security mechanisms present in recent commodity CPUs, in particular, Intel's Software Guard Extensions (SGX). SecureCloud applies this architecture to big data applications in the context of smart grids. We describe the SecureCloud approach, initial results, and considered use cases.},
	booktitle = {Design, {Automation} \& {Test} in {Europe} {Conference} \& {Exhibition} ({DATE}), 2017},
	author = {Kelbert, Florian and Gregor, Franz and Pires, Rafael and Köpsell, Stefan and Pasin, Marcelo and Havet, Aurélien and Schiavoni, Valerio and Felber, Pascal and Fetzer, Christof and Pietzuch, Peter},
	month = mar,
	year = {2017},
	note = {ISSN: 1558-1101},
	pages = {282--285},
}

@inproceedings{esteves_trustfs_2019,
	title = {{TrustFS}: {An} {SGX}-{Enabled} {Stackable} {File} {System} {Framework}},
	doi = {10.1109/SRDSW49218.2019.00012},
	abstract = {Data confidentiality in cloud services is commonly ensured by encrypting information before uploading it. However, this approach limits the use of content-aware functionalities, such as deduplication and compression. Although this issue has been addressed individually for some of these functionalities, no unified framework for building secure storage systems exists that can leverage such operations over encrypted data. We present TrustFS, a programmable and modular stackable file system framework for implementing secure content-aware storage functionalities over hardware-assisted trusted execution environments. This framework extends the original SafeFS architecture to provide the isolated execution guarantees of Intel SGX. We demonstrate its usability by implementing an SGX-enabled stackable file system prototype while a preliminary evaluation shows that it incurs reasonable performance overhead when compared to conventional storage systems. Finally, we highlight open research challenges that must be further pursued in order for TrustFS to be fully adequate for building production-ready secure storage solutions.},
	booktitle = {2019 38th {International} {Symposium} on {Reliable} {Distributed} {Systems} {Workshops} ({SRDSW})},
	author = {Esteves, Tânia and Macedo, Ricardo and Faria, Alberto and Portela, Bernardo and Paulo, João and Pereira, José and Harnik, Danny},
	month = oct,
	year = {2019},
	pages = {25--30},
}

@inproceedings{zeitouni_trusted_2021,
	title = {Trusted {Configuration} in {Cloud} {FPGAs}},
	doi = {10.1109/FCCM51124.2021.00036},
	abstract = {In this paper we tackle the open paradoxical challenge of FPGA-accelerated cloud computing: On one hand, clients aim to secure their Intellectual Property (IP) by encrypting their configuration bitstreams prior to uploading them to the cloud. On the other hand, cloud service providers disallow the use of encrypted bitstreams to mitigate rogue configurations from damaging or disabling the FPGA. Instead, cloud providers require a verifiable check on the hardware design that is intended to run on a cloud FPGA at the netlist-level before generating the bitstream and loading it onto the FPGA, therefore, contradicting the IP protection requirement of clients. Currently, there exist no practical solution that can adequately address this challenge.We present the first practical solution that, under reasonable trust assumptions, satisfies the IP protection requirement of the client and provides a bitstream sanity check to the cloud provider. Our proof-of-concept implementation uses existing tools and commodity hardware. It is based on a trusted FPGA shell that utilizes less than 1\% of the FPGA resources on a Xilinx VCU118 evaluation board, and an Intel SGX machine running the design checks on the client bitstream.},
	booktitle = {2021 {IEEE} 29th {Annual} {International} {Symposium} on {Field}-{Programmable} {Custom} {Computing} {Machines} ({FCCM})},
	author = {Zeitouni, Shaza and Vliegen, Jo and Frassetto, Tommaso and Koch, Dirk and Sadeghi, Ahmad-Reza and Mentens, Nele},
	month = may,
	year = {2021},
	note = {ISSN: 2576-2621},
	pages = {233--241},
}

@inproceedings{bhardwaj_fast_2016,
	title = {Fast, {Scalable} and {Secure} {Onloading} of {Edge} {Functions} {Using} {AirBox}},
	doi = {10.1109/SEC.2016.15},
	abstract = {This paper argues for the utility of back-end driven onloading to the edge as a way to address bandwidth use and latency challenges for future device-cloud interactions. Supporting such edge functions (EFs) requires solutions that can provide (i) fast and scalable EF provisioning and (ii) strong guarantees for the integrity of the EF execution and confidentiality of the state stored at the edge. In response to these goals, we (i) present a detailed design space exploration of the current technologies that can be leveraged in the design of edge function platforms (EFPs), (ii) develop a solution to address security concerns of EFs that leverages emerging hardware support for OS agnostic trusted execution environments such as Intel SGX enclaves, and (iii) propose and evaluate AirBox, a platform for fast, scalable and secure onloading of edge functions.},
	booktitle = {2016 {IEEE}/{ACM} {Symposium} on {Edge} {Computing} ({SEC})},
	author = {Bhardwaj, Ketan and Shih, Ming-Wei and Agarwal, Pragya and Gavrilovska, Ada and Kim, Taesoo and Schwan, Karsten},
	month = oct,
	year = {2016},
	pages = {14--27},
}

@inproceedings{cui_preserving_2018,
	title = {Preserving {Access} {Pattern} {Privacy} in {SGX}-{Assisted} {Encrypted} {Search}},
	doi = {10.1109/ICCCN.2018.8487338},
	abstract = {Outsourcing sensitive data and operations to untrusted cloud providers is considered a challenging issue. To perform a search operation, even if both the data and the query are encrypted, attackers still can learn which data locations match the query and what results are returned to the user. This kind of leakage is referred to as data access pattern. Indeed, using access pattern leakage, attackers can easily infer the content of the data and the query. Oblivious RAM (ORAM), Fully Homomorphic Encryption (FHE), and secure Multi- Party Computation (MPC) offer a higher level of security but incur high computation and communication overheads. One promising practical approach to process the outsourced data efficiently and securely is leveraging trusted hardware like Intel SGX. Recently, several SGX- based solutions have been proposed in the literature. However, those solutions suffer from side channel attacks, high overheads of context switching, or limited SGX memory. In this paper, we present an SGX-assisted scheme for performing search over encrypted data. Our solution protects access pattern against side channel attacks while ensuring search efficiency. It can process large databases without requiring any long-term storage on SGX. We have implemented a prototype of the scheme and evaluated its performance using a dataset of 1 million records. The equality query and range query can be completed in 11 and 40 milliseconds, respectively. Comparing with ORAM- based solutions, such as ObliDB, our scheme is more than 10x faster.},
	booktitle = {2018 27th {International} {Conference} on {Computer} {Communication} and {Networks} ({ICCCN})},
	author = {Cui, Shujie and Belguith, Sana and Zhang, Ming and Asghar, Muhammad Rizwan and Russello, Giovanni},
	month = jul,
	year = {2018},
	note = {ISSN: 1095-2055},
	pages = {1--9},
}

@inproceedings{miao_lejacon_2023,
	title = {Lejacon: {A} {Lightweight} and {Efficient} {Approach} to {Java} {Confidential} {Computing} on {SGX}},
	doi = {10.1109/ICSE48619.2023.00142},
	abstract = {Intel's SGX is a confidential computing technique. It allows key functionalities of C/C++/native applications to be confidentially executed in hardware enclaves. However, numerous cloud applications are written in Java. For supporting their confidential computing, state-of-the-art approaches deploy Java Virtual Machines (JVMs) in enclaves and perform confidential computing on JVMs. Meanwhile, these JVM-in-enclave solutions still suffer from serious limitations, such as heavy overheads of running JVMs in enclaves, large attack surfaces, and deep computation stacks. To mitigate the above limitations, we for-malize a Secure Closed-World (SCW) principle and then propose Lejacon, a lightweight and efficient approach to Java confidential computing. The key idea is, given a Java application, to (1) separately compile its confidential computing tasks into a bundle of Native Confidential Computing (NCC) services; (2) run the NCC services in enclaves on the Trusted Execution Environment (TEE) side, and meanwhile run the non-confidential code on a JVM on the Rich Execution Environment (REE) side. The two sides interact with each other, protecting confidential computing tasks and as well keeping the Trusted Computing Base (TCB) size small. We implement Lejacon and evaluate it against OcclumJ (a state-of-the-art JVM-in-enclave solution) on a set of benchmarks using the BouncyCastle cryptography library. The evaluation results clearly show the strengths of Lejacon: it achieves compet-itive performance in running Java confidential code in enclaves; compared with OcclumJ, Lejacon achieves speedups by up to 16.2x in running confidential code and also reduces the TCB sizes by 90+\% on average.},
	booktitle = {2023 {IEEE}/{ACM} 45th {International} {Conference} on {Software} {Engineering} ({ICSE})},
	author = {Miao, Xinyuan and Lin, Ziyi and Wang, Shaojun and Yu, Lei and Li, Sanhong and Wang, Zihan and Nie, Pengbo and Chen, Yuting and Shen, Beijun and Jiang, He},
	month = may,
	year = {2023},
	note = {ISSN: 1558-1225},
	pages = {1648--1660},
}

@article{xu_sgx-based_2019,
	title = {{SGX}-{Based} {Secure} {Indexing} {System}},
	volume = {7},
	issn = {2169-3536},
	doi = {10.1109/ACCESS.2019.2921223},
	abstract = {With the rising popularity of cloud computing technology, many positive effects have been exerted, whereas many security issues arise. The main existing way to ensure data confidentiality is to encrypt the data. However, the encrypted data renders keyword indexing more difficult to achieve, and the way to specify the plain-text keywords for the cipher-text data also reveals the privacy of the data owner to the untrusted service provider. In the meantime, many challenges are imposed on the software-based methods to index encrypted data, and existing hardware-based solutions typically have a large code footprint in a trusted environment. To solve these problems, an SGX-based secure indexing solution was built based on the combination of hardware and software and using Intel's Software Guard Extensions (SGX) technology. The results of the security analysis suggest that our scheme only leaks the access patterns, and our trust code protected by the SGX hardware is very small, thereby minimizing the exposed attack surface. Besides, our experiments verify that our scheme is efficient and practical, both in performance and storage aspects.},
	journal = {IEEE Access},
	author = {Xu, Jian and Zhang, Yuanjing and Fu, Kuiyuan and Peng, Su},
	year = {2019},
	pages = {77923--77931},
}

@inproceedings{campanile_cloudifying_2017,
	title = {Cloudifying {Critical} {Applications}: {A} {Use} {Case} from the {Power} {Grid} {Domain}},
	doi = {10.1109/PDP.2017.50},
	abstract = {The cloud computing paradigm is gaining more and more momentum, to the extent that it is no more confined to its initial application domains, i.e. use by enterprises and businesses that are simply willing to lower costs or to increase computing capacity in a flexible manner. In particular, increasing interest is recently being paid to the dramatic potentials that the use of cloud computing technology by critical infrastructure (CI) operators might bring about, in terms of benefits for the society at large. Since accidental or deliberate damage to a CI may result in devastating consequences, this mandates for dependable and trustworthy security mechanisms in cloud platforms. In this paper, we present a distributed application for real-time monitoring of a Power Grid. The application, which is called PoGriMon, is deployed on top of the SecureCloud platform, a security-enhanced IaaS solution that exploits the Intel Software Guard eXtension (SGX) technology. PoGriMon has been designed based on the requirements of the SCADA network of the Israeli Electric Corporation (IEC), and it is currently being validated in a realistic setup also provided by IEC.},
	booktitle = {2017 25th {Euromicro} {International} {Conference} on {Parallel}, {Distributed} and {Network}-based {Processing} ({PDP})},
	author = {Campanile, F. and Coppolino, L. and D’Antonio, S. and Lev, L. and Mazzeo, G. and Romano, L. and Sgaglione, L. and Tessitore, F.},
	month = mar,
	year = {2017},
	note = {ISSN: 2377-5750},
	pages = {363--370},
}

@inproceedings{xing_jupiter_2020,
	title = {Jupiter: {A} {Modern} {Federated} {Learning} {Platform} for {Regional} {Medical} {Care}},
	doi = {10.1109/JCC49151.2020.00012},
	abstract = {In this paper we propose Jupiter, an easy-to-use, secure and high-performance federated learning platform for regional medical care. Jupiter provides innovative programming abstractions to make data tunning more efficient as well as high-performance infrastructures to accelerate secure aggregations of parameters. Jupiter employs a stateful design with a bunch of optimizations and leverages popular techniques like SDN, DPDK and Intel SGX. The experiments show that with a low memory footprint, the throughput of single aggregator can reach 300MB/sec(with slice size fixed to 64KB), and the aggregation primitive we built can process 11k aggregations per second.},
	booktitle = {2020 {IEEE} {International} {Conference} on {Joint} {Cloud} {Computing}},
	author = {Xing, Ju and Jiang, Zexun and Yin, Hao},
	month = aug,
	year = {2020},
	pages = {21--21},
}

@article{jiang_reliablebox_2021,
	title = {{ReliableBox}: {Secure} and {Verifiable} {Cloud} {Storage} {With} {Location}-{Aware} {Backup}},
	volume = {32},
	issn = {1558-2183},
	doi = {10.1109/TPDS.2021.3080594},
	abstract = {While the prevalent cloud storage platforms are offering convenient services in support of diverse data-driven applications for clients, various security concerns raise in terms of data confidentiality, availability, and retrievability. Among them, servers' dishonesty on the location-specific data backup becomes a serious concern when the data stands out clients' control, considering the strict regulations imposed by many governments and organizations on data storage location. This article studies location-aware data backup verification for the data stored in clouds and aims to design a secure framework, named as ReliableBox, enabling the clients to verify if their data have been backed up on the remote servers with specific geolocation. In the design of ReliableBox, we leverage the prominent proof-of-storage techniques for data possession proof, and take advantage of multilateration geolocation and Intel SGX for the precise communication delay measurement and trust computing delay measurement, respectively. In ReliableBox, a client first computes integrity tags for the files and then outsources both the files and tags to the cloud storage server. In the later attestation, with the precise network delay and distance measurement from location-known verifiers, the client verifies that the outsourced files are intact and backed-up to hosts at the specific geolocation. With the customized design, ReliableBox can support the security needs in terms of both data integrity and backup location verification for clients, even when there exists potential dishonest cloud service providers who may manipulate the network delays or forge verification proofs. We provide security analysis to show the security property of ReliableBox in terms of data access, confidentiality, and verifications. In the end, we implement the system prototype and deploy it into several prevalent and commercial cloud platforms for performance evaluation. The experimental results demonstrate that ReliableBox is secure in support of data integrity checking and location-aware backup auditing, while it is robust to the data possession and location spoofing attacks.},
	number = {12},
	journal = {IEEE Transactions on Parallel and Distributed Systems},
	author = {Jiang, Tao and Meng, Wenjuan and Yuan, Xu and Wang, Liangmin and Ge, Jianhua and Ma, Jianfeng},
	month = dec,
	year = {2021},
	pages = {2996--3010},
}

@inproceedings{ren_accguard_2021,
	title = {{AccGuard}: {Secure} and {Trusted} {Computation} on {Remote} {FPGA} {Accelerators}},
	doi = {10.1109/iSES52644.2021.00093},
	abstract = {Application-specific acceleration has prevailed in cloud computing and data centers. But the current infrastructure design provides little or no support for security in external accelerators. Existing trusted computing solutions such as Intel SGX or ARM TrustZone only target CPU-only environments, leaving external accelerators and peripheral devices unprotected. This work proposes AccGuard, a new scheme to extend trust computation for remote FPGA accelerators. AccGuard consists of a security manager (SM) with hardware root of trust and remote attestation through standard cryptographic primitives to form an enclave framework for FPGA accelerators. It minimizes the performance overhead (due to the security features) compared to a state-of-the-art CPU-based enclave framework, Intel SGX, while enjoying the benefit of improved performance through hardware acceleration.},
	booktitle = {2021 {IEEE} {International} {Symposium} on {Smart} {Electronic} {Systems} ({iSES})},
	author = {Ren, Wei and Pan, Junhao and Chen, Deming},
	month = dec,
	year = {2021},
	pages = {378--383},
}

@inproceedings{weisse_regaining_2017,
	title = {Regaining lost cycles with {HotCalls}: {A} fast interface for {SGX} secure enclaves},
	doi = {10.1145/3079856.3080208},
	abstract = {Intel's SGX secure execution technology allows running computations on secret data using untrusted servers. While recent work showed how to port applications and large-scale computations to run under SGX, the performance implications of using the technology remains an open question. We present the first comprehensive quantitative study to evaluate the performance of SGX. We show that straightforward use of SGX library primitives for calling functions add between 8,200-17,000 cycles overhead, compared to 150 cycles of a typical system call. We quantify the performance impact of these library calls and show that in applications with high system calls frequency, such as memcached, openVPN, and lighttpd, which all have high bandwidth network requirements, the performance degradation may be as high as 79\%. We investigate the sources of this performance degradation by leveraging a new set of microbenchmarks for SGX-specific operations such as enclave entry-calls and out-calls, and encrypted memory I/O accesses. We leverage the insights we gain from these analyses to design a new SGX interface framework HotCalls. HotCalls are based on a synchronization spin-lock mechanism and provide a 13-27x speedup over the default interface. It can easily be integrated into existing code, making it a practical solution. Compared to a baseline SGX implementation of memcached, openVPN, and lighttpd - we show that using the new interface boosts the throughput by 2.6-3.7x, and reduces application latency by 62-74\%.},
	booktitle = {2017 {ACM}/{IEEE} 44th {Annual} {International} {Symposium} on {Computer} {Architecture} ({ISCA})},
	author = {Weisse, Ofir and Bertacco, Valeria and Austin, Todd},
	month = jun,
	year = {2017},
	pages = {81--93},
}

@inproceedings{gottel_security_2018,
	title = {Security, {Performance} and {Energy} {Trade}-{Offs} of {Hardware}-{Assisted} {Memory} {Protection} {Mechanisms}},
	doi = {10.1109/SRDS.2018.00024},
	abstract = {The deployment of large-scale distributed systems, e.g., publish-subscribe platforms, that operate over sensitive data using the infrastructure of public cloud providers, is nowadays heavily hindered by the surging lack of trust toward the cloud operators. Although purely software-based solutions exist to protect the confidentiality of data and the processing itself, such as homomorphic encryption schemes, their performance is far from being practical under real-world workloads. The performance trade-offs of two novel hardware-assisted memory protection mechanisms, namely AMD SEV and Intel SGX - currently available on the market to tackle this problem, are ADD described in this practical experience. Specifically, we implement and evaluate a publish/subscribe use-case and evaluate the impact of the memory protection mechanisms and the resulting performance. This paper reports on the experience gained while building this system, in particular when having to cope with the technical limitations imposed by SEV and SGX. Several tradeoffs that provide valuable insights in terms of latency, throughput, processing time and energy requirements are exhibited by means of micro-and macro-benchmarks.},
	booktitle = {2018 {IEEE} 37th {Symposium} on {Reliable} {Distributed} {Systems} ({SRDS})},
	author = {Göttel, Christian and Pires, Rafael and Rocha, Isabelly and Vaucher, Sébastien and Felber, Pascal and Pasin, Marcelo and Schiavoni, Valerio},
	month = oct,
	year = {2018},
	note = {ISSN: 2575-8462},
	pages = {133--142},
}

@inproceedings{li_confidential_2021,
	title = {Confidential {Serverless} {Made} {Efficient} with {Plug}-{In} {Enclaves}},
	doi = {10.1109/ISCA52012.2021.00032},
	abstract = {Serverless computing has become a fact of life on modern clouds. A serverless function may process sensitive data from clients. Protecting such a function against untrusted clouds using hardware enclave is attractive for user privacy. In this work, we run existing serverless applications in SGX enclave, and observe that the performance degradation can be as high as 5.6× to even 422.6×. Our investigation identifies these slowdowns are related to architectural features, mainly from page-wise enclave initialization. Leveraging insights from our overhead analysis, we revisit SGX hardware design and make minimal modification to its enclave model. We extend SGX with a new primitive—region-wise plugin enclaves that can be mapped into existing enclaves to reuse attested common states amongst functions. By remapping plugin enclaves, an enclave allows in-situ processing to avoid expensive data movement in a function chain. Experiments show that our design reduces the enclave function latency by 94.74-99.57\%, and boosts the autoscaling throughput by 19-179×.},
	booktitle = {2021 {ACM}/{IEEE} 48th {Annual} {International} {Symposium} on {Computer} {Architecture} ({ISCA})},
	author = {Li, Mingyu and Xia, Yubin and Chen, Haibo},
	month = jun,
	year = {2021},
	note = {ISSN: 2575-713X},
	pages = {306--318},
}

@inproceedings{okeeffe_facilitating_2020,
	title = {Facilitating plausible deniability for cloud providers regarding tenants’ activities using trusted execution},
	doi = {10.1109/IC2E48712.2020.00013},
	abstract = {A cloud provider that can technically determine tenants’ operations may be compelled to disclose such activities by law enforcement agencies (LEAs). The situation gets even more complex when multiple LEAs across different jurisdictions are involved, e.g., because of the distributed locations of cloud servers and data storage. Yet cloud providers typically do not need or want to know about their tenants’ activities, other than measuring how such activities incur expenses for using cloud resources.Thus mechanisms should be developed for cloud providers to have sufficient plausible deniability with regards to the processing being carried out by tenants on their platform, in jurisdictions that permit cloud providers to avoid liabilities in this way. Symmetrically, such mechanisms could protect tenants from legal over-reach, for example, when the country in which the cloud provider is incorporated could force disclosure of the processing carried out by cloud tenants.But to what extent can cloud providers acquire plausible deniability? Current discussions regarding risk have focused on data confidentiality and integrity. We argue that processing operations can equally reveal sensitive information—such as trade secrets and business processes—and that for some classes of application both data protection and algorithm protection are necessary.In this paper, we examine the legal and technical motivations for achieving plausible deniability in cloud interactions. We demonstrate the likely performance overhead of using containers secured with technologies such as Intel SGX. Further, we examine the current limitations of our proposed plausible deniability mechanisms, and outline a potential approach for enabling lawful access to enclaves subject to appropriate judicial oversight.},
	booktitle = {2020 {IEEE} {International} {Conference} on {Cloud} {Engineering} ({IC2E})},
	author = {O’Keeffe, Dan and Vranaki, Asma and Pasquier, Thomas and Eyers, David},
	month = apr,
	year = {2020},
	pages = {59--65},
}

@article{mofrad_securing_2022,
	title = {Securing {Big} {Data} {Scientific} {Workflows} via {Trusted} {Heterogeneous} {Environments}},
	volume = {19},
	issn = {1941-0018},
	doi = {10.1109/TDSC.2021.3123640},
	abstract = {Big data workflow management systems (BDWMS)s have recently emerged as popular data analytics platforms to conduct large-scale data analytics in the cloud. However, the protection of data confidentiality and secure execution of workflow applications remains an important and challenging problem. Although a few data analytics systems, such as VC3 and Opaque, were developed to address security problems, they are limited to specific domains such as Map-Reduce-style and SQL query workflows. A generic secure framework for BDWMSs is still missing. In this article, we propose SecDATAVIEW, a distributed BDWMS that employs heterogeneous workers, such as Intel SGX and AMD SEV, to protect both workflow and workflow data execution, addressing three major security challenges: (1) Reducing the TCB size of the big data workflow management system in the untrusted cloud by leveraging the hardware-assisted TEE and software attestation; (2) Supporting Java-written workflow tasks to overcome the limitation of SGX’s lack of support for Java programs; and (3) Reducing the adverse impact of SGX enclave memory paging overhead through a “Hybrid” workflow task scheduling system that selectively deploys sensitive tasks to a mix of SGX and SEV worker nodes. Our experimental results show that SecDATAVIEW imposes moderate overhead on the workflow execution time.},
	number = {6},
	journal = {IEEE Transactions on Dependable and Secure Computing},
	author = {Mofrad, Saeid and Ahmed, Ishtiaq and Zhang, Fengwei and Lu, Shiyong and Yang, Ping and Cui, Heming},
	month = nov,
	year = {2022},
	pages = {4187--4203},
}
